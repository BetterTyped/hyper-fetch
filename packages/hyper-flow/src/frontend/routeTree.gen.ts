/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as DashboardRouteRouteImport } from "./routes/_dashboard/route"
import { Route as WorkspacesIndexRouteImport } from "./routes/workspaces/index"
import { Route as ApplicationsIndexRouteImport } from "./routes/applications/index"
import { Route as DashboardIndexRouteImport } from "./routes/_dashboard/index"
import { Route as ApplicationsApplicationNameRouteRouteImport } from "./routes/applications/$applicationName/route"
import { Route as WorkspacesWorkspaceIdIndexRouteImport } from "./routes/workspaces/$workspaceId/index"
import { Route as ApplicationsApplicationNameIndexRouteImport } from "./routes/applications/$applicationName/index"
import { Route as DashboardSettingsIndexRouteImport } from "./routes/_dashboard/settings/index"
import { Route as WorkspacesWorkspaceIdTestingIndexRouteImport } from "./routes/workspaces/$workspaceId/testing/index"
import { Route as WorkspacesWorkspaceIdSettingsIndexRouteImport } from "./routes/workspaces/$workspaceId/settings/index"
import { Route as WorkspacesWorkspaceIdMocksIndexRouteImport } from "./routes/workspaces/$workspaceId/mocks/index"
import { Route as WorkspacesWorkspaceIdDocumentationIndexRouteImport } from "./routes/workspaces/$workspaceId/documentation/index"
import { Route as WorkspacesWorkspaceIdApisIndexRouteImport } from "./routes/workspaces/$workspaceId/apis/index"
import { Route as ApplicationsApplicationNameSettingsIndexRouteImport } from "./routes/applications/$applicationName/settings/index"
import { Route as ApplicationsApplicationNameQueuesIndexRouteImport } from "./routes/applications/$applicationName/queues/index"
import { Route as ApplicationsApplicationNameNetworkIndexRouteImport } from "./routes/applications/$applicationName/network/index"
import { Route as ApplicationsApplicationNameCacheIndexRouteImport } from "./routes/applications/$applicationName/cache/index"

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: "/_dashboard",
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspacesIndexRoute = WorkspacesIndexRouteImport.update({
  id: "/workspaces/",
  path: "/workspaces/",
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsIndexRoute = ApplicationsIndexRouteImport.update({
  id: "/applications/",
  path: "/applications/",
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DashboardRouteRoute,
} as any)
const ApplicationsApplicationNameRouteRoute =
  ApplicationsApplicationNameRouteRouteImport.update({
    id: "/applications/$applicationName",
    path: "/applications/$applicationName",
    getParentRoute: () => rootRouteImport,
  } as any)
const WorkspacesWorkspaceIdIndexRoute =
  WorkspacesWorkspaceIdIndexRouteImport.update({
    id: "/workspaces/$workspaceId/",
    path: "/workspaces/$workspaceId/",
    getParentRoute: () => rootRouteImport,
  } as any)
const ApplicationsApplicationNameIndexRoute =
  ApplicationsApplicationNameIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => ApplicationsApplicationNameRouteRoute,
  } as any)
const DashboardSettingsIndexRoute = DashboardSettingsIndexRouteImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => DashboardRouteRoute,
} as any)
const WorkspacesWorkspaceIdTestingIndexRoute =
  WorkspacesWorkspaceIdTestingIndexRouteImport.update({
    id: "/workspaces/$workspaceId/testing/",
    path: "/workspaces/$workspaceId/testing/",
    getParentRoute: () => rootRouteImport,
  } as any)
const WorkspacesWorkspaceIdSettingsIndexRoute =
  WorkspacesWorkspaceIdSettingsIndexRouteImport.update({
    id: "/workspaces/$workspaceId/settings/",
    path: "/workspaces/$workspaceId/settings/",
    getParentRoute: () => rootRouteImport,
  } as any)
const WorkspacesWorkspaceIdMocksIndexRoute =
  WorkspacesWorkspaceIdMocksIndexRouteImport.update({
    id: "/workspaces/$workspaceId/mocks/",
    path: "/workspaces/$workspaceId/mocks/",
    getParentRoute: () => rootRouteImport,
  } as any)
const WorkspacesWorkspaceIdDocumentationIndexRoute =
  WorkspacesWorkspaceIdDocumentationIndexRouteImport.update({
    id: "/workspaces/$workspaceId/documentation/",
    path: "/workspaces/$workspaceId/documentation/",
    getParentRoute: () => rootRouteImport,
  } as any)
const WorkspacesWorkspaceIdApisIndexRoute =
  WorkspacesWorkspaceIdApisIndexRouteImport.update({
    id: "/workspaces/$workspaceId/apis/",
    path: "/workspaces/$workspaceId/apis/",
    getParentRoute: () => rootRouteImport,
  } as any)
const ApplicationsApplicationNameSettingsIndexRoute =
  ApplicationsApplicationNameSettingsIndexRouteImport.update({
    id: "/settings/",
    path: "/settings/",
    getParentRoute: () => ApplicationsApplicationNameRouteRoute,
  } as any)
const ApplicationsApplicationNameQueuesIndexRoute =
  ApplicationsApplicationNameQueuesIndexRouteImport.update({
    id: "/queues/",
    path: "/queues/",
    getParentRoute: () => ApplicationsApplicationNameRouteRoute,
  } as any)
const ApplicationsApplicationNameNetworkIndexRoute =
  ApplicationsApplicationNameNetworkIndexRouteImport.update({
    id: "/network/",
    path: "/network/",
    getParentRoute: () => ApplicationsApplicationNameRouteRoute,
  } as any)
const ApplicationsApplicationNameCacheIndexRoute =
  ApplicationsApplicationNameCacheIndexRouteImport.update({
    id: "/cache/",
    path: "/cache/",
    getParentRoute: () => ApplicationsApplicationNameRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  "/applications/$applicationName": typeof ApplicationsApplicationNameRouteRouteWithChildren
  "/": typeof DashboardIndexRoute
  "/applications": typeof ApplicationsIndexRoute
  "/workspaces": typeof WorkspacesIndexRoute
  "/settings": typeof DashboardSettingsIndexRoute
  "/applications/$applicationName/": typeof ApplicationsApplicationNameIndexRoute
  "/workspaces/$workspaceId": typeof WorkspacesWorkspaceIdIndexRoute
  "/applications/$applicationName/cache": typeof ApplicationsApplicationNameCacheIndexRoute
  "/applications/$applicationName/network": typeof ApplicationsApplicationNameNetworkIndexRoute
  "/applications/$applicationName/queues": typeof ApplicationsApplicationNameQueuesIndexRoute
  "/applications/$applicationName/settings": typeof ApplicationsApplicationNameSettingsIndexRoute
  "/workspaces/$workspaceId/apis": typeof WorkspacesWorkspaceIdApisIndexRoute
  "/workspaces/$workspaceId/documentation": typeof WorkspacesWorkspaceIdDocumentationIndexRoute
  "/workspaces/$workspaceId/mocks": typeof WorkspacesWorkspaceIdMocksIndexRoute
  "/workspaces/$workspaceId/settings": typeof WorkspacesWorkspaceIdSettingsIndexRoute
  "/workspaces/$workspaceId/testing": typeof WorkspacesWorkspaceIdTestingIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof DashboardIndexRoute
  "/applications": typeof ApplicationsIndexRoute
  "/workspaces": typeof WorkspacesIndexRoute
  "/settings": typeof DashboardSettingsIndexRoute
  "/applications/$applicationName": typeof ApplicationsApplicationNameIndexRoute
  "/workspaces/$workspaceId": typeof WorkspacesWorkspaceIdIndexRoute
  "/applications/$applicationName/cache": typeof ApplicationsApplicationNameCacheIndexRoute
  "/applications/$applicationName/network": typeof ApplicationsApplicationNameNetworkIndexRoute
  "/applications/$applicationName/queues": typeof ApplicationsApplicationNameQueuesIndexRoute
  "/applications/$applicationName/settings": typeof ApplicationsApplicationNameSettingsIndexRoute
  "/workspaces/$workspaceId/apis": typeof WorkspacesWorkspaceIdApisIndexRoute
  "/workspaces/$workspaceId/documentation": typeof WorkspacesWorkspaceIdDocumentationIndexRoute
  "/workspaces/$workspaceId/mocks": typeof WorkspacesWorkspaceIdMocksIndexRoute
  "/workspaces/$workspaceId/settings": typeof WorkspacesWorkspaceIdSettingsIndexRoute
  "/workspaces/$workspaceId/testing": typeof WorkspacesWorkspaceIdTestingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/_dashboard": typeof DashboardRouteRouteWithChildren
  "/applications/$applicationName": typeof ApplicationsApplicationNameRouteRouteWithChildren
  "/_dashboard/": typeof DashboardIndexRoute
  "/applications/": typeof ApplicationsIndexRoute
  "/workspaces/": typeof WorkspacesIndexRoute
  "/_dashboard/settings/": typeof DashboardSettingsIndexRoute
  "/applications/$applicationName/": typeof ApplicationsApplicationNameIndexRoute
  "/workspaces/$workspaceId/": typeof WorkspacesWorkspaceIdIndexRoute
  "/applications/$applicationName/cache/": typeof ApplicationsApplicationNameCacheIndexRoute
  "/applications/$applicationName/network/": typeof ApplicationsApplicationNameNetworkIndexRoute
  "/applications/$applicationName/queues/": typeof ApplicationsApplicationNameQueuesIndexRoute
  "/applications/$applicationName/settings/": typeof ApplicationsApplicationNameSettingsIndexRoute
  "/workspaces/$workspaceId/apis/": typeof WorkspacesWorkspaceIdApisIndexRoute
  "/workspaces/$workspaceId/documentation/": typeof WorkspacesWorkspaceIdDocumentationIndexRoute
  "/workspaces/$workspaceId/mocks/": typeof WorkspacesWorkspaceIdMocksIndexRoute
  "/workspaces/$workspaceId/settings/": typeof WorkspacesWorkspaceIdSettingsIndexRoute
  "/workspaces/$workspaceId/testing/": typeof WorkspacesWorkspaceIdTestingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/applications/$applicationName"
    | "/"
    | "/applications"
    | "/workspaces"
    | "/settings"
    | "/applications/$applicationName/"
    | "/workspaces/$workspaceId"
    | "/applications/$applicationName/cache"
    | "/applications/$applicationName/network"
    | "/applications/$applicationName/queues"
    | "/applications/$applicationName/settings"
    | "/workspaces/$workspaceId/apis"
    | "/workspaces/$workspaceId/documentation"
    | "/workspaces/$workspaceId/mocks"
    | "/workspaces/$workspaceId/settings"
    | "/workspaces/$workspaceId/testing"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/applications"
    | "/workspaces"
    | "/settings"
    | "/applications/$applicationName"
    | "/workspaces/$workspaceId"
    | "/applications/$applicationName/cache"
    | "/applications/$applicationName/network"
    | "/applications/$applicationName/queues"
    | "/applications/$applicationName/settings"
    | "/workspaces/$workspaceId/apis"
    | "/workspaces/$workspaceId/documentation"
    | "/workspaces/$workspaceId/mocks"
    | "/workspaces/$workspaceId/settings"
    | "/workspaces/$workspaceId/testing"
  id:
    | "__root__"
    | "/_dashboard"
    | "/applications/$applicationName"
    | "/_dashboard/"
    | "/applications/"
    | "/workspaces/"
    | "/_dashboard/settings/"
    | "/applications/$applicationName/"
    | "/workspaces/$workspaceId/"
    | "/applications/$applicationName/cache/"
    | "/applications/$applicationName/network/"
    | "/applications/$applicationName/queues/"
    | "/applications/$applicationName/settings/"
    | "/workspaces/$workspaceId/apis/"
    | "/workspaces/$workspaceId/documentation/"
    | "/workspaces/$workspaceId/mocks/"
    | "/workspaces/$workspaceId/settings/"
    | "/workspaces/$workspaceId/testing/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  ApplicationsApplicationNameRouteRoute: typeof ApplicationsApplicationNameRouteRouteWithChildren
  ApplicationsIndexRoute: typeof ApplicationsIndexRoute
  WorkspacesIndexRoute: typeof WorkspacesIndexRoute
  WorkspacesWorkspaceIdIndexRoute: typeof WorkspacesWorkspaceIdIndexRoute
  WorkspacesWorkspaceIdApisIndexRoute: typeof WorkspacesWorkspaceIdApisIndexRoute
  WorkspacesWorkspaceIdDocumentationIndexRoute: typeof WorkspacesWorkspaceIdDocumentationIndexRoute
  WorkspacesWorkspaceIdMocksIndexRoute: typeof WorkspacesWorkspaceIdMocksIndexRoute
  WorkspacesWorkspaceIdSettingsIndexRoute: typeof WorkspacesWorkspaceIdSettingsIndexRoute
  WorkspacesWorkspaceIdTestingIndexRoute: typeof WorkspacesWorkspaceIdTestingIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_dashboard": {
      id: "/_dashboard"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/workspaces/": {
      id: "/workspaces/"
      path: "/workspaces"
      fullPath: "/workspaces"
      preLoaderRoute: typeof WorkspacesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/applications/": {
      id: "/applications/"
      path: "/applications"
      fullPath: "/applications"
      preLoaderRoute: typeof ApplicationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/_dashboard/": {
      id: "/_dashboard/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    "/applications/$applicationName": {
      id: "/applications/$applicationName"
      path: "/applications/$applicationName"
      fullPath: "/applications/$applicationName"
      preLoaderRoute: typeof ApplicationsApplicationNameRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/workspaces/$workspaceId/": {
      id: "/workspaces/$workspaceId/"
      path: "/workspaces/$workspaceId"
      fullPath: "/workspaces/$workspaceId"
      preLoaderRoute: typeof WorkspacesWorkspaceIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/applications/$applicationName/": {
      id: "/applications/$applicationName/"
      path: "/"
      fullPath: "/applications/$applicationName/"
      preLoaderRoute: typeof ApplicationsApplicationNameIndexRouteImport
      parentRoute: typeof ApplicationsApplicationNameRouteRoute
    }
    "/_dashboard/settings/": {
      id: "/_dashboard/settings/"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof DashboardSettingsIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    "/workspaces/$workspaceId/testing/": {
      id: "/workspaces/$workspaceId/testing/"
      path: "/workspaces/$workspaceId/testing"
      fullPath: "/workspaces/$workspaceId/testing"
      preLoaderRoute: typeof WorkspacesWorkspaceIdTestingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/workspaces/$workspaceId/settings/": {
      id: "/workspaces/$workspaceId/settings/"
      path: "/workspaces/$workspaceId/settings"
      fullPath: "/workspaces/$workspaceId/settings"
      preLoaderRoute: typeof WorkspacesWorkspaceIdSettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/workspaces/$workspaceId/mocks/": {
      id: "/workspaces/$workspaceId/mocks/"
      path: "/workspaces/$workspaceId/mocks"
      fullPath: "/workspaces/$workspaceId/mocks"
      preLoaderRoute: typeof WorkspacesWorkspaceIdMocksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/workspaces/$workspaceId/documentation/": {
      id: "/workspaces/$workspaceId/documentation/"
      path: "/workspaces/$workspaceId/documentation"
      fullPath: "/workspaces/$workspaceId/documentation"
      preLoaderRoute: typeof WorkspacesWorkspaceIdDocumentationIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/workspaces/$workspaceId/apis/": {
      id: "/workspaces/$workspaceId/apis/"
      path: "/workspaces/$workspaceId/apis"
      fullPath: "/workspaces/$workspaceId/apis"
      preLoaderRoute: typeof WorkspacesWorkspaceIdApisIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/applications/$applicationName/settings/": {
      id: "/applications/$applicationName/settings/"
      path: "/settings"
      fullPath: "/applications/$applicationName/settings"
      preLoaderRoute: typeof ApplicationsApplicationNameSettingsIndexRouteImport
      parentRoute: typeof ApplicationsApplicationNameRouteRoute
    }
    "/applications/$applicationName/queues/": {
      id: "/applications/$applicationName/queues/"
      path: "/queues"
      fullPath: "/applications/$applicationName/queues"
      preLoaderRoute: typeof ApplicationsApplicationNameQueuesIndexRouteImport
      parentRoute: typeof ApplicationsApplicationNameRouteRoute
    }
    "/applications/$applicationName/network/": {
      id: "/applications/$applicationName/network/"
      path: "/network"
      fullPath: "/applications/$applicationName/network"
      preLoaderRoute: typeof ApplicationsApplicationNameNetworkIndexRouteImport
      parentRoute: typeof ApplicationsApplicationNameRouteRoute
    }
    "/applications/$applicationName/cache/": {
      id: "/applications/$applicationName/cache/"
      path: "/cache"
      fullPath: "/applications/$applicationName/cache"
      preLoaderRoute: typeof ApplicationsApplicationNameCacheIndexRouteImport
      parentRoute: typeof ApplicationsApplicationNameRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardSettingsIndexRoute: typeof DashboardSettingsIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardSettingsIndexRoute: DashboardSettingsIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface ApplicationsApplicationNameRouteRouteChildren {
  ApplicationsApplicationNameIndexRoute: typeof ApplicationsApplicationNameIndexRoute
  ApplicationsApplicationNameCacheIndexRoute: typeof ApplicationsApplicationNameCacheIndexRoute
  ApplicationsApplicationNameNetworkIndexRoute: typeof ApplicationsApplicationNameNetworkIndexRoute
  ApplicationsApplicationNameQueuesIndexRoute: typeof ApplicationsApplicationNameQueuesIndexRoute
  ApplicationsApplicationNameSettingsIndexRoute: typeof ApplicationsApplicationNameSettingsIndexRoute
}

const ApplicationsApplicationNameRouteRouteChildren: ApplicationsApplicationNameRouteRouteChildren =
  {
    ApplicationsApplicationNameIndexRoute:
      ApplicationsApplicationNameIndexRoute,
    ApplicationsApplicationNameCacheIndexRoute:
      ApplicationsApplicationNameCacheIndexRoute,
    ApplicationsApplicationNameNetworkIndexRoute:
      ApplicationsApplicationNameNetworkIndexRoute,
    ApplicationsApplicationNameQueuesIndexRoute:
      ApplicationsApplicationNameQueuesIndexRoute,
    ApplicationsApplicationNameSettingsIndexRoute:
      ApplicationsApplicationNameSettingsIndexRoute,
  }

const ApplicationsApplicationNameRouteRouteWithChildren =
  ApplicationsApplicationNameRouteRoute._addFileChildren(
    ApplicationsApplicationNameRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  ApplicationsApplicationNameRouteRoute:
    ApplicationsApplicationNameRouteRouteWithChildren,
  ApplicationsIndexRoute: ApplicationsIndexRoute,
  WorkspacesIndexRoute: WorkspacesIndexRoute,
  WorkspacesWorkspaceIdIndexRoute: WorkspacesWorkspaceIdIndexRoute,
  WorkspacesWorkspaceIdApisIndexRoute: WorkspacesWorkspaceIdApisIndexRoute,
  WorkspacesWorkspaceIdDocumentationIndexRoute:
    WorkspacesWorkspaceIdDocumentationIndexRoute,
  WorkspacesWorkspaceIdMocksIndexRoute: WorkspacesWorkspaceIdMocksIndexRoute,
  WorkspacesWorkspaceIdSettingsIndexRoute:
    WorkspacesWorkspaceIdSettingsIndexRoute,
  WorkspacesWorkspaceIdTestingIndexRoute:
    WorkspacesWorkspaceIdTestingIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
