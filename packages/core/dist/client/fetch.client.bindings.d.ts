import { ClientResponseSuccessType, ClientResponseErrorType, ProgressPayloadType } from "client";
import { CommandInstance } from "command";
import { ExtractResponse, ExtractError } from "types";
export declare const getClientBindings: (cmd: CommandInstance, requestId: string) => Promise<{
    fullUrl: string;
    headers: HeadersInit;
    payload: string | FormData;
    config: Record<string, unknown>;
    getAbortController: () => AbortController;
    getRequestStartTimestamp: () => number;
    getResponseStartTimestamp: () => number;
    createAbortListener: <T extends CommandInstance>(callback: () => void, resolve: (value: ClientResponseErrorType<ExtractError<T>>) => void) => () => void;
    onBeforeRequest: () => void;
    onRequestStart: (progress?: ProgressPayloadType) => number;
    onRequestProgress: (progress: ProgressPayloadType) => number;
    onRequestEnd: () => number;
    onResponseStart: (progress?: ProgressPayloadType) => number;
    onResponseProgress: (progress: ProgressPayloadType) => number;
    onResponseEnd: () => number;
    onSuccess: <T_1 extends CommandInstance>(responseData: unknown, status: number, resolve: (value: ClientResponseErrorType<ExtractError<T_1>>) => void) => Promise<ClientResponseSuccessType<ExtractResponse<T_1>>>;
    onAbortError: <T_2 extends CommandInstance>(resolve: (value: ClientResponseErrorType<ExtractError<T_2>>) => void) => Promise<ClientResponseErrorType<ExtractError<T_2>>>;
    onTimeoutError: <T_3 extends CommandInstance>(resolve: (value: ClientResponseErrorType<ExtractError<T_3>>) => void) => Promise<ClientResponseErrorType<ExtractError<T_3>>>;
    onUnexpectedError: <T_4 extends CommandInstance>(resolve: (value: ClientResponseErrorType<ExtractError<T_4>>) => void) => Promise<ClientResponseErrorType<ExtractError<T_4>>>;
    onError: <T_5 extends CommandInstance>(error: Error | ExtractError<T_5>, status: number, resolve: (value: ClientResponseErrorType<ExtractError<T_5>>) => void) => Promise<ClientResponseErrorType<ExtractError<T_5>>>;
}>;
