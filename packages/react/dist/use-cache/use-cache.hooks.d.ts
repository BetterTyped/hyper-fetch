import { CommandInstance } from "@better-typed/hyper-fetch";
import { UseCacheOptionsType } from "use-cache";
export declare const useCache: <T extends Command<any, any, any, any, any, any, any, any, any, any, any>>(command: T, { dependencyTracking, initialData, deepCompare, }?: UseCacheOptionsType<T>) => {
    revalidate: (revalidateKey?: string | CommandInstance | RegExp) => void;
    setData: (data: import("@better-typed/hyper-fetch").ExtractResponse<T>, emitToCache?: boolean) => void;
    setError: (error: import("@better-typed/hyper-fetch").ExtractError<T>, emitToCache?: boolean) => void;
    setLoading: (loading: boolean, emitToHooks?: boolean) => void;
    setStatus: (status: number, emitToCache?: boolean) => void;
    setRetries: (retries: number, emitToCache?: boolean) => void;
    setTimestamp: (timestamp: Date, emitToCache?: boolean) => void;
    data: import("@better-typed/hyper-fetch").ExtractResponse<T>;
    error: import("@better-typed/hyper-fetch").ExtractError<T>;
    loading: boolean;
    status: number;
    retries: number;
    timestamp: Date;
    onCacheError: (callback: import("helpers").OnErrorCallbackType<import("@better-typed/hyper-fetch").ExtractError<T>>) => void;
    onCacheSuccess: (callback: import("helpers").OnSuccessCallbackType<import("@better-typed/hyper-fetch").ExtractResponse<T>>) => void;
    onCacheChange: (callback: import("helpers").OnFinishedCallbackType<ClientResponseType<import("@better-typed/hyper-fetch").ExtractResponse<T_1>, import("@better-typed/hyper-fetch").ExtractError<T_1>>>) => void;
};
