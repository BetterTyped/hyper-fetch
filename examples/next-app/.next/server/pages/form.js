"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/form";
exports.ids = ["pages/form"];
exports.modules = {

/***/ "../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fform&preferredRegion=&absolutePagePath=.%2Fpages%2Fform%2Findex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fform&preferredRegion=&absolutePagePath=.%2Fpages%2Fform%2Findex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages/module.compiled */ \"../../node_modules/next/dist/server/future/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"../../node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"../../node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"../../node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"./pages/_app.tsx\");\n/* harmony import */ var _pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/form/index.tsx */ \"./pages/form/index.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__, _pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__]);\n([private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__, _pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"default\"));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"getStaticProps\");\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"getStaticPaths\");\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"getServerSideProps\");\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"config\");\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"reportWebVitals\");\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticProps\");\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticPaths\");\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticParams\");\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerProps\");\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerSideProps\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/form\",\n        pathname: \"/form\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    components: {\n        App: private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default())\n    },\n    userland: _pages_form_index_tsx__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1yb3V0ZS1sb2FkZXIvaW5kZXguanM/a2luZD1QQUdFUyZwYWdlPSUyRmZvcm0mcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmZvcm0lMkZpbmRleC50c3gmYWJzb2x1dGVBcHBQYXRoPXByaXZhdGUtbmV4dC1wYWdlcyUyRl9hcHAmYWJzb2x1dGVEb2N1bWVudFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2RvY3VtZW50Jm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErRjtBQUNoQztBQUNMO0FBQzFEO0FBQ29EO0FBQ1Y7QUFDMUM7QUFDbUQ7QUFDbkQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLHVCQUF1Qix3RUFBSyxDQUFDLGtEQUFRO0FBQ3JDLHVCQUF1Qix3RUFBSyxDQUFDLGtEQUFRO0FBQ3JDLDJCQUEyQix3RUFBSyxDQUFDLGtEQUFRO0FBQ3pDLGVBQWUsd0VBQUssQ0FBQyxrREFBUTtBQUM3Qix3QkFBd0Isd0VBQUssQ0FBQyxrREFBUTtBQUM3QztBQUNPLGdDQUFnQyx3RUFBSyxDQUFDLGtEQUFRO0FBQzlDLGdDQUFnQyx3RUFBSyxDQUFDLGtEQUFRO0FBQzlDLGlDQUFpQyx3RUFBSyxDQUFDLGtEQUFRO0FBQy9DLGdDQUFnQyx3RUFBSyxDQUFDLGtEQUFRO0FBQzlDLG9DQUFvQyx3RUFBSyxDQUFDLGtEQUFRO0FBQ3pEO0FBQ08sd0JBQXdCLHlHQUFnQjtBQUMvQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELGlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLz9jOWYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgYXBwIGFuZCBkb2N1bWVudCBtb2R1bGVzLlxuaW1wb3J0IERvY3VtZW50IGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2RvY3VtZW50XCI7XG5pbXBvcnQgQXBwIGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2FwcFwiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvZm9ybS9pbmRleC50c3hcIjtcbi8vIFJlLWV4cG9ydCB0aGUgY29tcG9uZW50IChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcImdldFN0YXRpY1Byb3BzXCIpO1xuZXhwb3J0IGNvbnN0IGdldFN0YXRpY1BhdGhzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U3RhdGljUGF0aHNcIik7XG5leHBvcnQgY29uc3QgZ2V0U2VydmVyU2lkZVByb3BzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U2VydmVyU2lkZVByb3BzXCIpO1xuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbmV4cG9ydCBjb25zdCByZXBvcnRXZWJWaXRhbHMgPSBob2lzdCh1c2VybGFuZCwgXCJyZXBvcnRXZWJWaXRhbHNcIik7XG4vLyBSZS1leHBvcnQgbGVnYWN5IG1ldGhvZHMuXG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U3RhdGljUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJ1bnN0YWJsZV9nZXRTdGF0aWNQcm9wc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1BhdGhzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFN0YXRpY1BhcmFtcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1BhcmFtc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTZXJ2ZXJQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFNlcnZlclByb3BzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wc1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTLFxuICAgICAgICBwYWdlOiBcIi9mb3JtXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9mb3JtXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQXBwLFxuICAgICAgICBEb2N1bWVudFxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fform&preferredRegion=&absolutePagePath=.%2Fpages%2Fform%2Findex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./api/client.ts":
/*!***********************!*\
  !*** ./api/client.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   client: () => (/* binding */ client)\n/* harmony export */ });\n/* harmony import */ var _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.esm.js\");\n\nconst client = new _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_0__.Client({\n    url: \"http://localhost:5000\"\n}).setDebug(true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcGkvY2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJDO0FBRXBDLE1BQU1DLFNBQVMsSUFBSUQscURBQU1BLENBQUM7SUFBRUUsS0FBSztBQUF3QixHQUFHQyxRQUFRLENBQUMsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2FwaS9jbGllbnQudHM/NjBlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQgfSBmcm9tIFwiQGh5cGVyLWZldGNoL2NvcmVcIjtcblxuZXhwb3J0IGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQoeyB1cmw6IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwXCIgfSkuc2V0RGVidWcodHJ1ZSk7XG4iXSwibmFtZXMiOlsiQ2xpZW50IiwiY2xpZW50IiwidXJsIiwic2V0RGVidWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./api/client.ts\n");

/***/ }),

/***/ "./api/files/files.api.ts":
/*!********************************!*\
  !*** ./api/files/files.api.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postFile: () => (/* binding */ postFile)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client */ \"./api/client.ts\");\n\nconst postFile = _client__WEBPACK_IMPORTED_MODULE_0__.client.createRequest()({\n    endpoint: \"/api/files\",\n    method: \"POST\",\n    queued: true,\n    retry: 0\n}).setDataMapper((data)=>{\n    const formData = new FormData();\n    formData.append(\"file\", data.file);\n    return formData;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcGkvZmlsZXMvZmlsZXMuYXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBRTVCLE1BQU1DLFdBQVdELDJDQUFNQSxDQUMzQkUsYUFBYSxHQUFnRTtJQUM1RUMsVUFBVTtJQUNWQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsT0FBTztBQUNULEdBQ0NDLGFBQWEsQ0FBQyxDQUFDQztJQUNkLE1BQU1DLFdBQVcsSUFBSUM7SUFDckJELFNBQVNFLE1BQU0sQ0FBQyxRQUFRSCxLQUFLSSxJQUFJO0lBQ2pDLE9BQU9IO0FBQ1QsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2FwaS9maWxlcy9maWxlcy5hcGkudHM/OTJlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbGllbnQgfSBmcm9tIFwiLi4vY2xpZW50XCI7XG5cbmV4cG9ydCBjb25zdCBwb3N0RmlsZSA9IGNsaWVudFxuICAuY3JlYXRlUmVxdWVzdDx7IHJlc3BvbnNlOiB7IHJlc3BvbnNlOiBzdHJpbmcgfTsgcGF5bG9hZDogeyBmaWxlOiBGaWxlIH0gfT4oKSh7XG4gICAgZW5kcG9pbnQ6IFwiL2FwaS9maWxlc1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgcXVldWVkOiB0cnVlLFxuICAgIHJldHJ5OiAwLFxuICB9KVxuICAuc2V0RGF0YU1hcHBlcigoZGF0YSkgPT4ge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgZm9ybURhdGEuYXBwZW5kKFwiZmlsZVwiLCBkYXRhLmZpbGUpO1xuICAgIHJldHVybiBmb3JtRGF0YTtcbiAgfSk7XG4iXSwibmFtZXMiOlsiY2xpZW50IiwicG9zdEZpbGUiLCJjcmVhdGVSZXF1ZXN0IiwiZW5kcG9pbnQiLCJtZXRob2QiLCJxdWV1ZWQiLCJyZXRyeSIsInNldERhdGFNYXBwZXIiLCJkYXRhIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsImZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./api/files/files.api.ts\n");

/***/ }),

/***/ "./api/index.ts":
/*!**********************!*\
  !*** ./api/index.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var msw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! msw */ \"msw\");\n/* harmony import */ var msw__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(msw__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var msw_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! msw/node */ \"msw/node\");\n/* harmony import */ var _mocks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mocks */ \"./api/mocks.ts\");\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./client */ \"./api/client.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _client__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _client__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _files_files_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./files/files.api */ \"./api/files/files.api.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _files_files_api__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _files_files_api__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _users_users_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./users/users.api */ \"./api/users/users.api.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _users_users_api__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _users_users_api__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([msw_node__WEBPACK_IMPORTED_MODULE_1__]);\nmsw_node__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n// Start MSW\nif (true) {\n    (0,msw_node__WEBPACK_IMPORTED_MODULE_1__.setupServer)(..._mocks__WEBPACK_IMPORTED_MODULE_2__.handlers).listen();\n} else {}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcGkvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBa0M7QUFDSztBQUVKO0FBRVY7QUFFUztBQUNBO0FBRWxDLFlBQVk7QUFDWixJQUFJLElBQTZCLEVBQUU7SUFDakNDLHFEQUFXQSxJQUFJQyw0Q0FBUUEsRUFBRUMsTUFBTTtBQUNqQyxPQUFPLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvaW5kZXgudHM/OWU2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXR1cFdvcmtlciB9IGZyb20gXCJtc3dcIjtcbmltcG9ydCB7IHNldHVwU2VydmVyIH0gZnJvbSBcIm1zdy9ub2RlXCI7XG5cbmltcG9ydCB7IGhhbmRsZXJzIH0gZnJvbSBcIi4vbW9ja3NcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vY2xpZW50XCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL2ZpbGVzL2ZpbGVzLmFwaVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXNlcnMvdXNlcnMuYXBpXCI7XG5cbi8vIFN0YXJ0IE1TV1xuaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgc2V0dXBTZXJ2ZXIoLi4uaGFuZGxlcnMpLmxpc3RlbigpO1xufSBlbHNlIHtcbiAgc2V0dXBXb3JrZXIoLi4uaGFuZGxlcnMpLnN0YXJ0KCk7XG59XG4iXSwibmFtZXMiOlsic2V0dXBXb3JrZXIiLCJzZXR1cFNlcnZlciIsImhhbmRsZXJzIiwibGlzdGVuIiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./api/index.ts\n");

/***/ }),

/***/ "./api/mocks.ts":
/*!**********************!*\
  !*** ./api/mocks.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handlers: () => (/* binding */ handlers)\n/* harmony export */ });\n/* harmony import */ var msw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! msw */ \"msw\");\n/* harmony import */ var msw__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(msw__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.esm.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./utils/index.ts\");\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./client */ \"./api/client.ts\");\n/* harmony import */ var _users_users_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./users/users.api */ \"./api/users/users.api.ts\");\n/* harmony import */ var _files_files_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./files/files.api */ \"./api/files/files.api.ts\");\n\n\n\n\n\n\n// Mocks setup\nconst getMock = (request, response, delay)=>{\n    const { method, endpoint } = request;\n    const url = _client__WEBPACK_IMPORTED_MODULE_3__.client.url + endpoint;\n    function callback(req, res, ctx) {\n        return res(ctx.delay(delay), ctx.status(200), ctx.json(typeof response === \"function\" ? response(req) : response || {}));\n    }\n    if (method.toUpperCase() === \"POST\") {\n        return msw__WEBPACK_IMPORTED_MODULE_0__.rest.post(url, callback);\n    }\n    if (method.toUpperCase() === \"PUT\") {\n        return msw__WEBPACK_IMPORTED_MODULE_0__.rest.put(url, callback);\n    }\n    if (method.toUpperCase() === \"PATCH\") {\n        return msw__WEBPACK_IMPORTED_MODULE_0__.rest.patch(url, callback);\n    }\n    if (method.toUpperCase() === \"DELETE\") {\n        return msw__WEBPACK_IMPORTED_MODULE_0__.rest.delete(url, callback);\n    }\n    return msw__WEBPACK_IMPORTED_MODULE_0__.rest.get(url, callback);\n};\nconst usersPages = new Map();\nconst getPage = (req)=>{\n    const page = req.url.searchParams.get(\"page\") || 1;\n    const cachedData = usersPages.get(page);\n    if (!cachedData) {\n        const users = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getRandomUsers)();\n        const newData = {\n            page,\n            data: users\n        };\n        usersPages.set(page, newData);\n        return newData;\n    }\n    return cachedData;\n};\nconst handlers = [\n    getMock(_users_users_api__WEBPACK_IMPORTED_MODULE_4__.getUser, _utils__WEBPACK_IMPORTED_MODULE_2__.getRandomUser, _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_1__.Time.SEC),\n    getMock(_users_users_api__WEBPACK_IMPORTED_MODULE_4__.getUsers, getPage, _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_1__.Time.SEC),\n    getMock(_users_users_api__WEBPACK_IMPORTED_MODULE_4__.postUser, _utils__WEBPACK_IMPORTED_MODULE_2__.getRandomUser, _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_1__.Time.SEC),\n    getMock(_users_users_api__WEBPACK_IMPORTED_MODULE_4__.patchUser, _utils__WEBPACK_IMPORTED_MODULE_2__.getRandomUser, _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_1__.Time.SEC * 3),\n    getMock(_users_users_api__WEBPACK_IMPORTED_MODULE_4__.deleteUser, null),\n    getMock(_files_files_api__WEBPACK_IMPORTED_MODULE_5__.postFile, {\n        response: \"ok\"\n    }, _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_1__.Time.SEC * 2)\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcGkvbW9ja3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBMkI7QUFDK0I7QUFFRDtBQUN2QjtBQUNxRDtBQUMxQztBQUU3QyxjQUFjO0FBQ2QsTUFBTVcsVUFBVSxDQUNkQyxTQUNBQyxVQUNBQztJQUVBLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0o7SUFFN0IsTUFBTUssTUFBTWIsMkNBQU1BLENBQUNhLEdBQUcsR0FBR0Q7SUFFekIsU0FBU0UsU0FBU0MsR0FBUSxFQUFFQyxHQUFRLEVBQUVDLEdBQVE7UUFDNUMsT0FBT0QsSUFDTEMsSUFBSVAsS0FBSyxDQUFDQSxRQUNWTyxJQUFJQyxNQUFNLENBQUMsTUFDWEQsSUFBSUUsSUFBSSxDQUFDLE9BQU9WLGFBQWEsYUFBYUEsU0FBU00sT0FBT04sWUFBWSxDQUFDO0lBRTNFO0lBRUEsSUFBSUUsT0FBT1MsV0FBVyxPQUFPLFFBQVE7UUFDbkMsT0FBT3hCLHFDQUFJQSxDQUFDeUIsSUFBSSxDQUFDUixLQUFLQztJQUN4QjtJQUNBLElBQUlILE9BQU9TLFdBQVcsT0FBTyxPQUFPO1FBQ2xDLE9BQU94QixxQ0FBSUEsQ0FBQzBCLEdBQUcsQ0FBQ1QsS0FBS0M7SUFDdkI7SUFDQSxJQUFJSCxPQUFPUyxXQUFXLE9BQU8sU0FBUztRQUNwQyxPQUFPeEIscUNBQUlBLENBQUMyQixLQUFLLENBQUNWLEtBQUtDO0lBQ3pCO0lBQ0EsSUFBSUgsT0FBT1MsV0FBVyxPQUFPLFVBQVU7UUFDckMsT0FBT3hCLHFDQUFJQSxDQUFDNEIsTUFBTSxDQUFDWCxLQUFLQztJQUMxQjtJQUNBLE9BQU9sQixxQ0FBSUEsQ0FBQzZCLEdBQUcsQ0FBQ1osS0FBS0M7QUFDdkI7QUFFQSxNQUFNWSxhQUFhLElBQUlDO0FBRXZCLE1BQU1DLFVBQVUsQ0FBQ2I7SUFDZixNQUFNYyxPQUFPZCxJQUFJRixHQUFHLENBQUNpQixZQUFZLENBQUNMLEdBQUcsQ0FBQyxXQUFXO0lBQ2pELE1BQU1NLGFBQWFMLFdBQVdELEdBQUcsQ0FBQ0k7SUFFbEMsSUFBSSxDQUFDRSxZQUFZO1FBQ2YsTUFBTUMsUUFBUWpDLHNEQUFjQTtRQUM1QixNQUFNa0MsVUFBVTtZQUNkSjtZQUNBSyxNQUFNRjtRQUNSO1FBQ0FOLFdBQVdTLEdBQUcsQ0FBQ04sTUFBTUk7UUFDckIsT0FBT0E7SUFDVDtJQUNBLE9BQU9GO0FBQ1Q7QUFFTyxNQUFNSyxXQUFXO0lBQ3RCN0IsUUFBUUwscURBQU9BLEVBQUVKLGlEQUFhQSxFQUFFRCxtREFBSUEsQ0FBQ3dDLEdBQUc7SUFDeEM5QixRQUFRSixzREFBUUEsRUFBRXlCLFNBQVMvQixtREFBSUEsQ0FBQ3dDLEdBQUc7SUFDbkM5QixRQUFRRixzREFBUUEsRUFBRVAsaURBQWFBLEVBQUVELG1EQUFJQSxDQUFDd0MsR0FBRztJQUN6QzlCLFFBQVFILHVEQUFTQSxFQUFFTixpREFBYUEsRUFBRUQsbURBQUlBLENBQUN3QyxHQUFHLEdBQUc7SUFDN0M5QixRQUFRTix3REFBVUEsRUFBRTtJQUNwQk0sUUFBUUQsc0RBQVFBLEVBQUU7UUFBRUcsVUFBVTtJQUFLLEdBQUdaLG1EQUFJQSxDQUFDd0MsR0FBRyxHQUFHO0NBQ2xELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvbW9ja3MudHM/MDI4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXN0IH0gZnJvbSBcIm1zd1wiO1xuaW1wb3J0IHsgUmVxdWVzdEluc3RhbmNlLCBUaW1lIH0gZnJvbSBcIkBoeXBlci1mZXRjaC9jb3JlXCI7XG5cbmltcG9ydCB7IGdldFJhbmRvbVVzZXIsIGdldFJhbmRvbVVzZXJzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tIFwiLi9jbGllbnRcIjtcbmltcG9ydCB7IGRlbGV0ZVVzZXIsIGdldFVzZXIsIGdldFVzZXJzLCBwYXRjaFVzZXIsIHBvc3RVc2VyIH0gZnJvbSBcIi4vdXNlcnMvdXNlcnMuYXBpXCI7XG5pbXBvcnQgeyBwb3N0RmlsZSB9IGZyb20gXCIuL2ZpbGVzL2ZpbGVzLmFwaVwiO1xuXG4vLyBNb2NrcyBzZXR1cFxuY29uc3QgZ2V0TW9jayA9IChcbiAgcmVxdWVzdDogUmVxdWVzdEluc3RhbmNlLFxuICByZXNwb25zZTogUmVjb3JkPHN0cmluZywgYW55PiB8IG51bGwgfCAoKHJlcTogYW55KSA9PiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgbnVsbCksXG4gIGRlbGF5PzogbnVtYmVyLFxuKSA9PiB7XG4gIGNvbnN0IHsgbWV0aG9kLCBlbmRwb2ludCB9ID0gcmVxdWVzdDtcblxuICBjb25zdCB1cmwgPSBjbGllbnQudXJsICsgZW5kcG9pbnQ7XG5cbiAgZnVuY3Rpb24gY2FsbGJhY2socmVxOiBhbnksIHJlczogYW55LCBjdHg6IGFueSkge1xuICAgIHJldHVybiByZXMoXG4gICAgICBjdHguZGVsYXkoZGVsYXkpLFxuICAgICAgY3R4LnN0YXR1cygyMDApLFxuICAgICAgY3R4Lmpzb24odHlwZW9mIHJlc3BvbnNlID09PSBcImZ1bmN0aW9uXCIgPyByZXNwb25zZShyZXEpIDogcmVzcG9uc2UgfHwge30pLFxuICAgICk7XG4gIH1cblxuICBpZiAobWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09IFwiUE9TVFwiKSB7XG4gICAgcmV0dXJuIHJlc3QucG9zdCh1cmwsIGNhbGxiYWNrKTtcbiAgfVxuICBpZiAobWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09IFwiUFVUXCIpIHtcbiAgICByZXR1cm4gcmVzdC5wdXQodXJsLCBjYWxsYmFjayk7XG4gIH1cbiAgaWYgKG1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSBcIlBBVENIXCIpIHtcbiAgICByZXR1cm4gcmVzdC5wYXRjaCh1cmwsIGNhbGxiYWNrKTtcbiAgfVxuICBpZiAobWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09IFwiREVMRVRFXCIpIHtcbiAgICByZXR1cm4gcmVzdC5kZWxldGUodXJsLCBjYWxsYmFjayk7XG4gIH1cbiAgcmV0dXJuIHJlc3QuZ2V0KHVybCwgY2FsbGJhY2spO1xufTtcblxuY29uc3QgdXNlcnNQYWdlcyA9IG5ldyBNYXAoKTtcblxuY29uc3QgZ2V0UGFnZSA9IChyZXE6IGFueSkgPT4ge1xuICBjb25zdCBwYWdlID0gcmVxLnVybC5zZWFyY2hQYXJhbXMuZ2V0KFwicGFnZVwiKSB8fCAxO1xuICBjb25zdCBjYWNoZWREYXRhID0gdXNlcnNQYWdlcy5nZXQocGFnZSk7XG5cbiAgaWYgKCFjYWNoZWREYXRhKSB7XG4gICAgY29uc3QgdXNlcnMgPSBnZXRSYW5kb21Vc2VycygpO1xuICAgIGNvbnN0IG5ld0RhdGEgPSB7XG4gICAgICBwYWdlLFxuICAgICAgZGF0YTogdXNlcnMsXG4gICAgfTtcbiAgICB1c2Vyc1BhZ2VzLnNldChwYWdlLCBuZXdEYXRhKTtcbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfVxuICByZXR1cm4gY2FjaGVkRGF0YTtcbn07XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVycyA9IFtcbiAgZ2V0TW9jayhnZXRVc2VyLCBnZXRSYW5kb21Vc2VyLCBUaW1lLlNFQyksXG4gIGdldE1vY2soZ2V0VXNlcnMsIGdldFBhZ2UsIFRpbWUuU0VDKSxcbiAgZ2V0TW9jayhwb3N0VXNlciwgZ2V0UmFuZG9tVXNlciwgVGltZS5TRUMpLFxuICBnZXRNb2NrKHBhdGNoVXNlciwgZ2V0UmFuZG9tVXNlciwgVGltZS5TRUMgKiAzKSxcbiAgZ2V0TW9jayhkZWxldGVVc2VyLCBudWxsKSxcbiAgZ2V0TW9jayhwb3N0RmlsZSwgeyByZXNwb25zZTogXCJva1wiIH0sIFRpbWUuU0VDICogMiksXG5dO1xuIl0sIm5hbWVzIjpbInJlc3QiLCJUaW1lIiwiZ2V0UmFuZG9tVXNlciIsImdldFJhbmRvbVVzZXJzIiwiY2xpZW50IiwiZGVsZXRlVXNlciIsImdldFVzZXIiLCJnZXRVc2VycyIsInBhdGNoVXNlciIsInBvc3RVc2VyIiwicG9zdEZpbGUiLCJnZXRNb2NrIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiZGVsYXkiLCJtZXRob2QiLCJlbmRwb2ludCIsInVybCIsImNhbGxiYWNrIiwicmVxIiwicmVzIiwiY3R4Iiwic3RhdHVzIiwianNvbiIsInRvVXBwZXJDYXNlIiwicG9zdCIsInB1dCIsInBhdGNoIiwiZGVsZXRlIiwiZ2V0IiwidXNlcnNQYWdlcyIsIk1hcCIsImdldFBhZ2UiLCJwYWdlIiwic2VhcmNoUGFyYW1zIiwiY2FjaGVkRGF0YSIsInVzZXJzIiwibmV3RGF0YSIsImRhdGEiLCJzZXQiLCJoYW5kbGVycyIsIlNFQyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./api/mocks.ts\n");

/***/ }),

/***/ "./api/users/users.api.ts":
/*!********************************!*\
  !*** ./api/users/users.api.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   patchUser: () => (/* binding */ patchUser),\n/* harmony export */   postUser: () => (/* binding */ postUser)\n/* harmony export */ });\n/* harmony import */ var _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.esm.js\");\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../client */ \"./api/client.ts\");\n\n\nconst getUser = _client__WEBPACK_IMPORTED_MODULE_1__.client.createRequest()({\n    endpoint: \"/api/user/:userId\",\n    cache: true,\n    cacheTime: _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_0__.Time.SEC * 10\n});\nconst getUsers = _client__WEBPACK_IMPORTED_MODULE_1__.client.createRequest()({\n    endpoint: \"/api/users\",\n    cache: true,\n    cacheTime: _hyper_fetch_core__WEBPACK_IMPORTED_MODULE_0__.Time.SEC * 5\n});\nconst postUser = _client__WEBPACK_IMPORTED_MODULE_1__.client.createRequest()({\n    endpoint: \"/api/user\",\n    method: \"POST\",\n    cancelable: true\n});\nconst patchUser = _client__WEBPACK_IMPORTED_MODULE_1__.client.createRequest()({\n    endpoint: \"/api/user/:userId\",\n    method: \"PATCH\",\n    cancelable: false\n});\nconst deleteUser = _client__WEBPACK_IMPORTED_MODULE_1__.client.createRequest()({\n    endpoint: \"/api/user/:userId\",\n    method: \"DELETE\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcGkvdXNlcnMvdXNlcnMuYXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBeUM7QUFHTjtBQUU1QixNQUFNRSxVQUFVRCwyQ0FBTUEsQ0FBQ0UsYUFBYSxHQUE0QjtJQUNyRUMsVUFBVTtJQUNWQyxPQUFPO0lBQ1BDLFdBQVdOLG1EQUFJQSxDQUFDTyxHQUFHLEdBQUc7QUFDeEIsR0FBRztBQUVJLE1BQU1DLFdBQVdQLDJDQUFNQSxDQUFDRSxhQUFhLEdBQThCO0lBQ3hFQyxVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsV0FBV04sbURBQUlBLENBQUNPLEdBQUcsR0FBRztBQUN4QixHQUFHO0FBRUksTUFBTUUsV0FBV1IsMkNBQU1BLENBQUNFLGFBQWEsR0FBb0Q7SUFDOUZDLFVBQVU7SUFDVk0sUUFBUTtJQUNSQyxZQUFZO0FBQ2QsR0FBRztBQUVJLE1BQU1DLFlBQVlYLDJDQUFNQSxDQUFDRSxhQUFhLEdBQW9EO0lBQy9GQyxVQUFVO0lBQ1ZNLFFBQVE7SUFDUkMsWUFBWTtBQUNkLEdBQUc7QUFFSSxNQUFNRSxhQUFhWiwyQ0FBTUEsQ0FBQ0UsYUFBYSxHQUFHO0lBQy9DQyxVQUFVO0lBQ1ZNLFFBQVE7QUFDVixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXBpL3VzZXJzL3VzZXJzLmFwaS50cz9lMmE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRpbWUgfSBmcm9tIFwiQGh5cGVyLWZldGNoL2NvcmVcIjtcblxuaW1wb3J0IHsgUG9zdFVzZXJNb2RlbCwgVXNlck1vZGVsIH0gZnJvbSBcIi4uLy4uL21vZGVsc1wiO1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSBcIi4uL2NsaWVudFwiO1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlciA9IGNsaWVudC5jcmVhdGVSZXF1ZXN0PHsgcmVzcG9uc2U6IFVzZXJNb2RlbCB9PigpKHtcbiAgZW5kcG9pbnQ6IFwiL2FwaS91c2VyLzp1c2VySWRcIixcbiAgY2FjaGU6IHRydWUsXG4gIGNhY2hlVGltZTogVGltZS5TRUMgKiAxMCxcbn0pO1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlcnMgPSBjbGllbnQuY3JlYXRlUmVxdWVzdDx7IHJlc3BvbnNlOiBVc2VyTW9kZWxbXSB9PigpKHtcbiAgZW5kcG9pbnQ6IFwiL2FwaS91c2Vyc1wiLFxuICBjYWNoZTogdHJ1ZSxcbiAgY2FjaGVUaW1lOiBUaW1lLlNFQyAqIDUsXG59KTtcblxuZXhwb3J0IGNvbnN0IHBvc3RVc2VyID0gY2xpZW50LmNyZWF0ZVJlcXVlc3Q8eyByZXNwb25zZTogVXNlck1vZGVsOyBwYXlsb2FkOiBQb3N0VXNlck1vZGVsIH0+KCkoe1xuICBlbmRwb2ludDogXCIvYXBpL3VzZXJcIixcbiAgbWV0aG9kOiBcIlBPU1RcIixcbiAgY2FuY2VsYWJsZTogdHJ1ZSxcbn0pO1xuXG5leHBvcnQgY29uc3QgcGF0Y2hVc2VyID0gY2xpZW50LmNyZWF0ZVJlcXVlc3Q8eyByZXNwb25zZTogVXNlck1vZGVsOyBwYXlsb2FkOiBQb3N0VXNlck1vZGVsIH0+KCkoe1xuICBlbmRwb2ludDogXCIvYXBpL3VzZXIvOnVzZXJJZFwiLFxuICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgY2FuY2VsYWJsZTogZmFsc2UsXG59KTtcblxuZXhwb3J0IGNvbnN0IGRlbGV0ZVVzZXIgPSBjbGllbnQuY3JlYXRlUmVxdWVzdCgpKHtcbiAgZW5kcG9pbnQ6IFwiL2FwaS91c2VyLzp1c2VySWRcIixcbiAgbWV0aG9kOiBcIkRFTEVURVwiLFxufSk7XG4iXSwibmFtZXMiOlsiVGltZSIsImNsaWVudCIsImdldFVzZXIiLCJjcmVhdGVSZXF1ZXN0IiwiZW5kcG9pbnQiLCJjYWNoZSIsImNhY2hlVGltZSIsIlNFQyIsImdldFVzZXJzIiwicG9zdFVzZXIiLCJtZXRob2QiLCJjYW5jZWxhYmxlIiwicGF0Y2hVc2VyIiwiZGVsZXRlVXNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./api/users/users.api.ts\n");

/***/ }),

/***/ "./components/request.card.tsx":
/*!*************************************!*\
  !*** ./components/request.card.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestCard: () => (/* binding */ RequestCard)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _mui_material_Card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mui/material/Card */ \"../../node_modules/@mui/material/node/Card/index.js\");\n/* harmony import */ var _mui_material_Card__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_mui_material_Card__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mui_material_CardActions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/CardActions */ \"../../node_modules/@mui/material/node/CardActions/index.js\");\n/* harmony import */ var _mui_material_CardActions__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _mui_material_CardContent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mui/material/CardContent */ \"../../node_modules/@mui/material/node/CardContent/index.js\");\n/* harmony import */ var _mui_material_CardContent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _mui_material_Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/material/Button */ \"../../node_modules/@mui/material/node/Button/index.js\");\n/* harmony import */ var _mui_material_Button__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_mui_material_Button__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _mui_material_Typography__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/Typography */ \"../../node_modules/@mui/material/node/Typography/index.js\");\n/* harmony import */ var _mui_material_Typography__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\nfunction RequestCard({ request }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Card__WEBPACK_IMPORTED_MODULE_2___default()), {\n        sx: {\n            minWidth: 275,\n            mt: 2,\n            padding: 0,\n            background: \"#eaeaea\",\n            boxShadow: \"0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_3___default()), {\n                sx: {\n                    pb: 0\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Typography__WEBPACK_IMPORTED_MODULE_4___default()), {\n                        sx: {\n                            fontSize: 11\n                        },\n                        color: \"text.secondary\",\n                        gutterBottom: true,\n                        children: \"Ongoing Request\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                        lineNumber: 27,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Typography__WEBPACK_IMPORTED_MODULE_4___default()), {\n                        sx: {\n                            fontSize: 15\n                        },\n                        variant: \"h5\",\n                        children: [\n                            \"Request ID: \",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                                children: request.requestId\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                                lineNumber: 31,\n                                columnNumber: 23\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                        lineNumber: 30,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Typography__WEBPACK_IMPORTED_MODULE_4___default()), {\n                        sx: {\n                            fontSize: 13\n                        },\n                        color: \"text.secondary\",\n                        children: [\n                            \"Added at: \",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                                children: new Date(request.timestamp).toLocaleTimeString()\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                                lineNumber: 34,\n                                columnNumber: 21\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                        lineNumber: 33,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                lineNumber: 26,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_5___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Button__WEBPACK_IMPORTED_MODULE_6___default()), {\n                    size: \"small\",\n                    variant: \"contained\",\n                    color: request.stopped ? \"success\" : \"error\",\n                    onClick: request.stopped ? request.startRequest : request.stopRequest,\n                    children: request.stopped ? \"Start Request\" : \"Stop Request\"\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                    lineNumber: 38,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n                lineNumber: 37,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.card.tsx\",\n        lineNumber: 16,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3JlcXVlc3QuY2FyZC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNPO0FBQ2M7QUFDQTtBQUNWO0FBQ1E7QUFRM0MsU0FBU00sWUFBWSxFQUFFQyxPQUFPLEVBQVM7SUFDNUMscUJBQ0UsOERBQUNOLDJEQUFJQTtRQUNITyxJQUFJO1lBQ0ZDLFVBQVU7WUFDVkMsSUFBSTtZQUNKQyxTQUFTO1lBQ1RDLFlBQVk7WUFDWkMsV0FDRTtRQUNKOzswQkFFQSw4REFBQ1Ysa0VBQVdBO2dCQUFDSyxJQUFJO29CQUFFTSxJQUFJO2dCQUFFOztrQ0FDdkIsOERBQUNULGlFQUFVQTt3QkFBQ0csSUFBSTs0QkFBRU8sVUFBVTt3QkFBRzt3QkFBR0MsT0FBTTt3QkFBaUJDLFlBQVk7a0NBQUM7Ozs7OztrQ0FHdEUsOERBQUNaLGlFQUFVQTt3QkFBQ0csSUFBSTs0QkFBRU8sVUFBVTt3QkFBRzt3QkFBR0csU0FBUTs7NEJBQUs7MENBQ2pDLDhEQUFDQzswQ0FBR1osUUFBUWEsU0FBUzs7Ozs7Ozs7Ozs7O2tDQUVuQyw4REFBQ2YsaUVBQVVBO3dCQUFDRyxJQUFJOzRCQUFFTyxVQUFVO3dCQUFHO3dCQUFHQyxPQUFNOzs0QkFBaUI7MENBQzdDLDhEQUFDRzswQ0FBRyxJQUFJRSxLQUFLZCxRQUFRZSxTQUFTLEVBQUVDLGtCQUFrQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUdoRSw4REFBQ3JCLGtFQUFXQTswQkFDViw0RUFBQ0UsNkRBQU1BO29CQUNMb0IsTUFBSztvQkFDTE4sU0FBUTtvQkFDUkYsT0FBT1QsUUFBUWtCLE9BQU8sR0FBRyxZQUFZO29CQUNyQ0MsU0FBU25CLFFBQVFrQixPQUFPLEdBQUdsQixRQUFRb0IsWUFBWSxHQUFHcEIsUUFBUXFCLFdBQVc7OEJBRXBFckIsUUFBUWtCLE9BQU8sR0FBRyxrQkFBa0I7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9yZXF1ZXN0LmNhcmQudHN4PzMzN2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQ2FyZCBmcm9tIFwiQG11aS9tYXRlcmlhbC9DYXJkXCI7XG5pbXBvcnQgQ2FyZEFjdGlvbnMgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnNcIjtcbmltcG9ydCBDYXJkQ29udGVudCBmcm9tIFwiQG11aS9tYXRlcmlhbC9DYXJkQ29udGVudFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiQG11aS9tYXRlcmlhbC9CdXR0b25cIjtcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gXCJAbXVpL21hdGVyaWFsL1R5cG9ncmFwaHlcIjtcbmltcG9ydCB7IFF1ZXVlUmVxdWVzdCB9IGZyb20gXCJAaHlwZXItZmV0Y2gvcmVhY3RcIjtcbmltcG9ydCB7IFJlcXVlc3RJbnN0YW5jZSB9IGZyb20gXCJAaHlwZXItZmV0Y2gvY29yZVwiO1xuXG50eXBlIFByb3BzID0ge1xuICByZXF1ZXN0OiBRdWV1ZVJlcXVlc3Q8UmVxdWVzdEluc3RhbmNlPjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0Q2FyZCh7IHJlcXVlc3QgfTogUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZFxuICAgICAgc3g9e3tcbiAgICAgICAgbWluV2lkdGg6IDI3NSxcbiAgICAgICAgbXQ6IDIsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIGJhY2tncm91bmQ6IFwiI2VhZWFlYVwiLFxuICAgICAgICBib3hTaGFkb3c6XG4gICAgICAgICAgXCIwcHggMnB4IDFweCAtMXB4IHJnYigwIDAgMCAvIDIwJSksIDBweCAxcHggMXB4IDBweCByZ2IoMCAwIDAgLyAxNCUpLCAwcHggMXB4IDNweCAwcHggcmdiKDAgMCAwIC8gMTIlKVwiLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8Q2FyZENvbnRlbnQgc3g9e3sgcGI6IDAgfX0+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGZvbnRTaXplOiAxMSB9fSBjb2xvcj1cInRleHQuc2Vjb25kYXJ5XCIgZ3V0dGVyQm90dG9tPlxuICAgICAgICAgIE9uZ29pbmcgUmVxdWVzdFxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGZvbnRTaXplOiAxNSB9fSB2YXJpYW50PVwiaDVcIj5cbiAgICAgICAgICBSZXF1ZXN0IElEOiA8Yj57cmVxdWVzdC5yZXF1ZXN0SWR9PC9iPlxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGZvbnRTaXplOiAxMyB9fSBjb2xvcj1cInRleHQuc2Vjb25kYXJ5XCI+XG4gICAgICAgICAgQWRkZWQgYXQ6IDxiPntuZXcgRGF0ZShyZXF1ZXN0LnRpbWVzdGFtcCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9PC9iPlxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgPENhcmRBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICBjb2xvcj17cmVxdWVzdC5zdG9wcGVkID8gXCJzdWNjZXNzXCIgOiBcImVycm9yXCJ9XG4gICAgICAgICAgb25DbGljaz17cmVxdWVzdC5zdG9wcGVkID8gcmVxdWVzdC5zdGFydFJlcXVlc3QgOiByZXF1ZXN0LnN0b3BSZXF1ZXN0fVxuICAgICAgICA+XG4gICAgICAgICAge3JlcXVlc3Quc3RvcHBlZCA/IFwiU3RhcnQgUmVxdWVzdFwiIDogXCJTdG9wIFJlcXVlc3RcIn1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0NhcmRBY3Rpb25zPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkNhcmQiLCJDYXJkQWN0aW9ucyIsIkNhcmRDb250ZW50IiwiQnV0dG9uIiwiVHlwb2dyYXBoeSIsIlJlcXVlc3RDYXJkIiwicmVxdWVzdCIsInN4IiwibWluV2lkdGgiLCJtdCIsInBhZGRpbmciLCJiYWNrZ3JvdW5kIiwiYm94U2hhZG93IiwicGIiLCJmb250U2l6ZSIsImNvbG9yIiwiZ3V0dGVyQm90dG9tIiwidmFyaWFudCIsImIiLCJyZXF1ZXN0SWQiLCJEYXRlIiwidGltZXN0YW1wIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwic2l6ZSIsInN0b3BwZWQiLCJvbkNsaWNrIiwic3RhcnRSZXF1ZXN0Iiwic3RvcFJlcXVlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/request.card.tsx\n");

/***/ }),

/***/ "./components/request.tsx":
/*!********************************!*\
  !*** ./components/request.tsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Request: () => (/* binding */ Request)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/CircularProgress */ \"../../node_modules/@mui/material/node/CircularProgress/index.js\");\n/* harmony import */ var _mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=Box,Divider,List,ListItem,ListItemButton,ListItemIcon,ListItemText,Typography!=!@mui/material */ \"__barrel_optimize__?names=Box,Divider,List,ListItem,ListItemButton,ListItemIcon,ListItemText,Typography!=!../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _mui_material_Accordion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/material/Accordion */ \"../../node_modules/@mui/material/node/Accordion/index.js\");\n/* harmony import */ var _mui_material_Accordion__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_mui_material_Accordion__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _mui_material_AccordionSummary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/AccordionSummary */ \"../../node_modules/@mui/material/node/AccordionSummary/index.js\");\n/* harmony import */ var _mui_material_AccordionSummary__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_mui_material_AccordionSummary__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _mui_material_AccordionDetails__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mui/material/AccordionDetails */ \"../../node_modules/@mui/material/node/AccordionDetails/index.js\");\n/* harmony import */ var _mui_material_AccordionDetails__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_mui_material_AccordionDetails__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _mui_icons_material_ExpandMore__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/icons-material/ExpandMore */ \"../../node_modules/@mui/icons-material/ExpandMore.js\");\n/* harmony import */ var _mui_material_LinearProgress__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/LinearProgress */ \"../../node_modules/@mui/material/node/LinearProgress/index.js\");\n/* harmony import */ var _mui_material_LinearProgress__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_mui_material_LinearProgress__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! notistack */ \"notistack\");\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(notistack__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mui_icons_material_HourglassBottom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @mui/icons-material/HourglassBottom */ \"../../node_modules/@mui/icons-material/HourglassBottom.js\");\n/* harmony import */ var _mui_icons_material_Autorenew__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @mui/icons-material/Autorenew */ \"../../node_modules/@mui/icons-material/Autorenew.js\");\n/* harmony import */ var _mui_icons_material_Error__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @mui/icons-material/Error */ \"../../node_modules/@mui/icons-material/Error.js\");\n/* harmony import */ var _mui_icons_material_DataArray__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @mui/icons-material/DataArray */ \"../../node_modules/@mui/icons-material/DataArray.js\");\n/* harmony import */ var _mui_icons_material_AccessTime__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mui/icons-material/AccessTime */ \"../../node_modules/@mui/icons-material/AccessTime.js\");\n/* eslint-disable react/destructuring-assignment */ /* eslint-disable react/jsx-props-no-spreading */ /* eslint-disable no-console */ /* eslint-disable react/require-default-props */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction LinearProgressWithLabel(props) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Box, {\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Box, {\n                sx: {\n                    width: \"100%\",\n                    mr: 1\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_LinearProgress__WEBPACK_IMPORTED_MODULE_4___default()), {\n                    variant: \"determinate\",\n                    ...props\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 34,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 33,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Box, {\n                sx: {\n                    minWidth: 35\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    children: `${Math.round(props.value)}%`\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 37,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 36,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n        lineNumber: 32,\n        columnNumber: 5\n    }, this);\n}\nfunction Request({ name, children, result }) {\n    const { data, error, timestamp } = result;\n    const { enqueueSnackbar } = (0,notistack__WEBPACK_IMPORTED_MODULE_2__.useSnackbar)();\n    const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const [fetched, setFetched] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const [downloadProgress, setDownloadProgress] = react__WEBPACK_IMPORTED_MODULE_1__.useState({});\n    const [uploadProgress, setUploadProgress] = react__WEBPACK_IMPORTED_MODULE_1__.useState({});\n    const loading = \"loading\" in result ? result.loading : result.submitting;\n    const loadingComponent = loading ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Box, {\n        sx: {\n            display: \"flex\",\n            gap: \"10px\"\n        },\n        children: [\n            \"True \",\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_5___default()), {\n                size: \"4\"\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 58,\n                columnNumber: 12\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n        lineNumber: 57,\n        columnNumber: 5\n    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Box, {\n        sx: {\n            display: \"flex\",\n            gap: \"10px\"\n        },\n        children: \"False\"\n    }, void 0, false, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n        lineNumber: 61,\n        columnNumber: 5\n    }, this);\n    const dataComponent = data ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Accordion__WEBPACK_IMPORTED_MODULE_6___default()), {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_AccordionSummary__WEBPACK_IMPORTED_MODULE_7___default()), {\n                expandIcon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_ExpandMore__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 66,\n                    columnNumber: 37\n                }, void 0),\n                \"aria-controls\": \"panel1a-content\",\n                id: \"panel1a-header\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                    children: \"Show Data\"\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 67,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 66,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_AccordionDetails__WEBPACK_IMPORTED_MODULE_9___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"code\", {\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                        style: {\n                            margin: 0\n                        },\n                        children: JSON.stringify(data, null, 2)\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 71,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 70,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 69,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n        lineNumber: 65,\n        columnNumber: 5\n    }, this) : \"---\";\n    const errorComponent = error ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Accordion__WEBPACK_IMPORTED_MODULE_6___default()), {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_AccordionSummary__WEBPACK_IMPORTED_MODULE_7___default()), {\n                expandIcon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_ExpandMore__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 81,\n                    columnNumber: 37\n                }, void 0),\n                \"aria-controls\": \"panel1a-content\",\n                id: \"panel1a-header\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                    children: \"Show Error\"\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 82,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 81,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_AccordionDetails__WEBPACK_IMPORTED_MODULE_9___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"code\", {\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                        style: {\n                            margin: 0\n                        },\n                        children: JSON.stringify(error instanceof Error ? {\n                            message: error.message\n                        } : error, null, 2)\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 86,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                    lineNumber: 85,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 84,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n        lineNumber: 80,\n        columnNumber: 5\n    }, this) : \"---\";\n    const onSuccess = \"onSuccess\" in result ? result?.onSuccess : result?.onSubmitSuccess;\n    const onError = \"onError\" in result ? result?.onError : result?.onSubmitError;\n    const onAbort = \"onAbort\" in result ? result?.onAbort : result?.onSubmitAbort;\n    const onFinished = \"onFinished\" in result ? result?.onFinished : result?.onSubmitFinished;\n    const onRequestStart = \"onRequestStart\" in result ? result?.onRequestStart : result?.onSubmitRequestStart;\n    const onResponseStart = \"onResponseStart\" in result ? result?.onResponseStart : result?.onSubmitResponseStart;\n    const onDownloadProgress = \"onDownloadProgress\" in result ? result?.onDownloadProgress : result?.onSubmitDownloadProgress;\n    const onUploadProgress = \"onUploadProgress\" in result ? result?.onUploadProgress : result?.onSubmitUploadProgress;\n    onRequestStart(()=>{\n        setFetched(true);\n        enqueueSnackbar(\"Request started\", {\n            variant: \"default\"\n        });\n    });\n    onResponseStart(()=>{\n        enqueueSnackbar(\"Response started\", {\n            variant: \"info\"\n        });\n    });\n    onSuccess(()=>{\n        enqueueSnackbar(\"Success\", {\n            variant: \"success\"\n        });\n    });\n    onError(()=>{\n        enqueueSnackbar(\"Error\", {\n            variant: \"error\"\n        });\n    });\n    onAbort(()=>{\n        enqueueSnackbar(\"Abort Error\", {\n            variant: \"error\"\n        });\n    });\n    onFinished(()=>{\n        enqueueSnackbar(\"Finished\", {\n            variant: \"warning\"\n        });\n    });\n    onDownloadProgress((progress, details)=>{\n        setDownloadProgress((prev)=>({\n                ...prev,\n                [details.requestId]: progress\n            }));\n        if (progress.total === progress.loaded) {\n            setTimeout(()=>{\n                setUploadProgress((prev)=>{\n                    const newProgress = {\n                        ...prev\n                    };\n                    delete newProgress[details.requestId];\n                    return newProgress;\n                });\n                setDownloadProgress((prev)=>{\n                    const newProgress = {\n                        ...prev\n                    };\n                    delete newProgress[details.requestId];\n                    return newProgress;\n                });\n            }, 4000);\n        }\n    });\n    onUploadProgress((progress, details)=>{\n        setUploadProgress((prev)=>({\n                ...prev,\n                [details.requestId]: progress\n            }));\n    });\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setMounted(true);\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Box, {\n        sx: {\n            mb: 4\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                variant: \"h4\",\n                textTransform: \"uppercase\",\n                fontWeight: \"800\",\n                children: name\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 159,\n                columnNumber: 7\n            }, this),\n            children && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Box, {\n                sx: {\n                    mt: 2,\n                    mb: 2\n                },\n                children: children\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 162,\n                columnNumber: 20\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.List, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItem, {\n                        disablePadding: true,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemIcon, {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_HourglassBottom__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {}, void 0, false, {\n                                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                        lineNumber: 167,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 166,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: \"Initially Fetched\",\n                                    sx: {\n                                        minWidth: \"150px\",\n                                        maxWidth: \"150px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 169,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {\n                                    orientation: \"vertical\",\n                                    flexItem: true,\n                                    sx: {\n                                        margin: \"0 20px 0 10px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 170,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    secondary: String(fetched)\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 171,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                            lineNumber: 165,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 164,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {}, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 174,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItem, {\n                        disablePadding: true,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemIcon, {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_Autorenew__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {}, void 0, false, {\n                                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                        lineNumber: 178,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 177,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: \"Loading\",\n                                    sx: {\n                                        minWidth: \"150px\",\n                                        maxWidth: \"150px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 180,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {\n                                    orientation: \"vertical\",\n                                    flexItem: true,\n                                    sx: {\n                                        margin: \"0 20px 0 10px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 181,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: loadingComponent\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 182,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                            lineNumber: 176,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 175,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {}, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 185,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItem, {\n                        disablePadding: true,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemIcon, {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_Error__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                        lineNumber: 189,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 188,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: \"Error\",\n                                    sx: {\n                                        minWidth: \"150px\",\n                                        maxWidth: \"150px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 191,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {\n                                    orientation: \"vertical\",\n                                    flexItem: true,\n                                    sx: {\n                                        margin: \"0 20px 0 10px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 192,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: errorComponent\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 193,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                            lineNumber: 187,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 186,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {}, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 196,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItem, {\n                        disablePadding: true,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemIcon, {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_DataArray__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {}, void 0, false, {\n                                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                        lineNumber: 200,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 199,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: \"Data\",\n                                    sx: {\n                                        minWidth: \"150px\",\n                                        maxWidth: \"150px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 202,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {\n                                    orientation: \"vertical\",\n                                    flexItem: true,\n                                    sx: {\n                                        margin: \"0 20px 0 10px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 203,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: dataComponent\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 204,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                            lineNumber: 198,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 197,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {}, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 207,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItem, {\n                        disablePadding: true,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemIcon, {\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_AccessTime__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {}, void 0, false, {\n                                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                        lineNumber: 211,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 210,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    primary: \"Timestamp\",\n                                    sx: {\n                                        minWidth: \"150px\",\n                                        maxWidth: \"150px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 213,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {\n                                    orientation: \"vertical\",\n                                    flexItem: true,\n                                    sx: {\n                                        margin: \"0 20px 0 10px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 214,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.ListItemText, {\n                                    secondary: mounted && timestamp ? `${timestamp?.toDateString()} ${timestamp?.toLocaleTimeString()}` : \"---\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                                    lineNumber: 215,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                            lineNumber: 209,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 208,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {}, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 222,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                        variant: \"subtitle2\",\n                        textTransform: \"uppercase\",\n                        fontWeight: \"800\",\n                        children: \"Uploads\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 223,\n                        columnNumber: 9\n                    }, this),\n                    Object.keys(uploadProgress).map((key)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LinearProgressWithLabel, {\n                            value: uploadProgress[key].progress\n                        }, key, false, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                            lineNumber: 227,\n                            columnNumber: 11\n                        }, this)),\n                    !Object.keys(uploadProgress).length && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                        variant: \"caption\",\n                        color: \"GrayText\",\n                        children: \"No uploaded entities\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 230,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                        variant: \"subtitle2\",\n                        textTransform: \"uppercase\",\n                        fontWeight: \"800\",\n                        children: \"Downloads\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 234,\n                        columnNumber: 9\n                    }, this),\n                    Object.keys(downloadProgress).map((key)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LinearProgressWithLabel, {\n                            value: downloadProgress[key].progress\n                        }, key, false, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                            lineNumber: 238,\n                            columnNumber: 11\n                        }, this)),\n                    !Object.keys(downloadProgress).length && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Typography, {\n                        variant: \"caption\",\n                        color: \"GrayText\",\n                        children: \"No downloaded entities\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 241,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Divider_List_ListItem_ListItemButton_ListItemIcon_ListItemText_Typography_mui_material__WEBPACK_IMPORTED_MODULE_3__.Divider, {}, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                        lineNumber: 245,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n                lineNumber: 163,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/request.tsx\",\n        lineNumber: 158,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/request.tsx\n");

/***/ }),

/***/ "./components/sidebar.tsx":
/*!********************************!*\
  !*** ./components/sidebar.tsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sidebar: () => (/* binding */ Sidebar)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _mui_material_Box__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/Box */ \"../../node_modules/@mui/material/node/Box/index.js\");\n/* harmony import */ var _mui_material_Box__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_mui_material_Box__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _mui_material_List__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/List */ \"../../node_modules/@mui/material/node/List/index.js\");\n/* harmony import */ var _mui_material_List__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_mui_material_List__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _mui_material_ListItem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/material/ListItem */ \"../../node_modules/@mui/material/node/ListItem/index.js\");\n/* harmony import */ var _mui_material_ListItem__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_mui_material_ListItem__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/ListItemButton */ \"../../node_modules/@mui/material/node/ListItemButton/index.js\");\n/* harmony import */ var _mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/material/ListItemText */ \"../../node_modules/@mui/material/node/ListItemText/index.js\");\n/* harmony import */ var _mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"../../node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _constants_routing_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/routing.constants */ \"./constants/routing.constants.ts\");\n\n\n\n\n\n\n\n\n\nconst links = [\n    _constants_routing_constants__WEBPACK_IMPORTED_MODULE_3__.SSR_PAGE,\n    _constants_routing_constants__WEBPACK_IMPORTED_MODULE_3__.DETAILS_PAGE,\n    _constants_routing_constants__WEBPACK_IMPORTED_MODULE_3__.LIST_PAGE,\n    _constants_routing_constants__WEBPACK_IMPORTED_MODULE_3__.FORM_PAGE\n];\nconst drawerWidth = 240;\nconst Sidebar = ({ children })=>{\n    const { push } = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Box__WEBPACK_IMPORTED_MODULE_4___default()), {\n        sx: {\n            display: \"flex\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_Box__WEBPACK_IMPORTED_MODULE_4___default()), {\n                sx: {\n                    width: {\n                        sm: drawerWidth\n                    },\n                    flexShrink: {\n                        sm: 0\n                    },\n                    height: \"100%\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_List__WEBPACK_IMPORTED_MODULE_5___default()), {\n                    children: links.map((link)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_ListItem__WEBPACK_IMPORTED_MODULE_6___default()), {\n                            disablePadding: true,\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_7___default()), {\n                                onClick: ()=>push(link.path),\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_8___default()), {\n                                    primary: link.name\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/sidebar.tsx\",\n                                    lineNumber: 30,\n                                    columnNumber: 17\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/sidebar.tsx\",\n                                lineNumber: 29,\n                                columnNumber: 15\n                            }, undefined)\n                        }, link.path, false, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/sidebar.tsx\",\n                            lineNumber: 28,\n                            columnNumber: 13\n                        }, undefined))\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/sidebar.tsx\",\n                    lineNumber: 26,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/sidebar.tsx\",\n                lineNumber: 19,\n                columnNumber: 7\n            }, undefined),\n            children\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/sidebar.tsx\",\n        lineNumber: 18,\n        columnNumber: 5\n    }, undefined);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3NpZGViYXIudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDVTtBQUNFO0FBQ1E7QUFDWTtBQUNKO0FBQ2Q7QUFFc0Q7QUFFOUYsTUFBTVcsUUFBUTtJQUFDRCxrRUFBUUE7SUFBRUgsc0VBQVlBO0lBQUVFLG1FQUFTQTtJQUFFRCxtRUFBU0E7Q0FBQztBQUM1RCxNQUFNSSxjQUFjO0FBRWIsTUFBTUMsVUFBVSxDQUFDLEVBQUVDLFFBQVEsRUFBb0Q7SUFDcEYsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR1Qsc0RBQVNBO0lBRTFCLHFCQUNFLDhEQUFDTCwwREFBR0E7UUFBQ2UsSUFBSTtZQUFFQyxTQUFTO1FBQU87OzBCQUN6Qiw4REFBQ2hCLDBEQUFHQTtnQkFDRmUsSUFBSTtvQkFDRkUsT0FBTzt3QkFBRUMsSUFBSVA7b0JBQVk7b0JBQ3pCUSxZQUFZO3dCQUFFRCxJQUFJO29CQUFFO29CQUNwQkUsUUFBUTtnQkFDVjswQkFFQSw0RUFBQ25CLDJEQUFJQTs4QkFDRlMsTUFBTVcsR0FBRyxDQUFDLENBQUNDLHFCQUNWLDhEQUFDcEIsK0RBQVFBOzRCQUFDcUIsY0FBYztzQ0FDdEIsNEVBQUNwQixxRUFBY0E7Z0NBQUNxQixTQUFTLElBQU1WLEtBQUtRLEtBQUtHLElBQUk7MENBQzNDLDRFQUFDckIsbUVBQVlBO29DQUFDc0IsU0FBU0osS0FBS0ssSUFBSTs7Ozs7Ozs7Ozs7MkJBRk5MLEtBQUtHLElBQUk7Ozs7Ozs7Ozs7Ozs7OztZQVE1Q1o7Ozs7Ozs7QUFHUCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zaWRlYmFyLnRzeD83YTg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBCb3ggZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQm94XCI7XG5pbXBvcnQgTGlzdCBmcm9tIFwiQG11aS9tYXRlcmlhbC9MaXN0XCI7XG5pbXBvcnQgTGlzdEl0ZW0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1cIjtcbmltcG9ydCBMaXN0SXRlbUJ1dHRvbiBmcm9tIFwiQG11aS9tYXRlcmlhbC9MaXN0SXRlbUJ1dHRvblwiO1xuaW1wb3J0IExpc3RJdGVtVGV4dCBmcm9tIFwiQG11aS9tYXRlcmlhbC9MaXN0SXRlbVRleHRcIjtcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gXCJuZXh0L3JvdXRlclwiO1xuXG5pbXBvcnQgeyBERVRBSUxTX1BBR0UsIEZPUk1fUEFHRSwgTElTVF9QQUdFLCBTU1JfUEFHRSB9IGZyb20gXCIuLi9jb25zdGFudHMvcm91dGluZy5jb25zdGFudHNcIjtcblxuY29uc3QgbGlua3MgPSBbU1NSX1BBR0UsIERFVEFJTFNfUEFHRSwgTElTVF9QQUdFLCBGT1JNX1BBR0VdO1xuY29uc3QgZHJhd2VyV2lkdGggPSAyNDA7XG5cbmV4cG9ydCBjb25zdCBTaWRlYmFyID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIHwgdW5kZWZpbmVkIHwgbnVsbCB9KSA9PiB7XG4gIGNvbnN0IHsgcHVzaCB9ID0gdXNlUm91dGVyKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiIH19PlxuICAgICAgPEJveFxuICAgICAgICBzeD17e1xuICAgICAgICAgIHdpZHRoOiB7IHNtOiBkcmF3ZXJXaWR0aCB9LFxuICAgICAgICAgIGZsZXhTaHJpbms6IHsgc206IDAgfSxcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8TGlzdD5cbiAgICAgICAgICB7bGlua3MubWFwKChsaW5rKSA9PiAoXG4gICAgICAgICAgICA8TGlzdEl0ZW0gZGlzYWJsZVBhZGRpbmcga2V5PXtsaW5rLnBhdGh9PlxuICAgICAgICAgICAgICA8TGlzdEl0ZW1CdXR0b24gb25DbGljaz17KCkgPT4gcHVzaChsaW5rLnBhdGgpfT5cbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9e2xpbmsubmFtZX0gLz5cbiAgICAgICAgICAgICAgPC9MaXN0SXRlbUJ1dHRvbj5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvTGlzdD5cbiAgICAgIDwvQm94PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQm94PlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkJveCIsIkxpc3QiLCJMaXN0SXRlbSIsIkxpc3RJdGVtQnV0dG9uIiwiTGlzdEl0ZW1UZXh0IiwidXNlUm91dGVyIiwiREVUQUlMU19QQUdFIiwiRk9STV9QQUdFIiwiTElTVF9QQUdFIiwiU1NSX1BBR0UiLCJsaW5rcyIsImRyYXdlcldpZHRoIiwiU2lkZWJhciIsImNoaWxkcmVuIiwicHVzaCIsInN4IiwiZGlzcGxheSIsIndpZHRoIiwic20iLCJmbGV4U2hyaW5rIiwiaGVpZ2h0IiwibWFwIiwibGluayIsImRpc2FibGVQYWRkaW5nIiwib25DbGljayIsInBhdGgiLCJwcmltYXJ5IiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/sidebar.tsx\n");

/***/ }),

/***/ "./components/viewer.tsx":
/*!*******************************!*\
  !*** ./components/viewer.tsx ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Viewer: () => (/* binding */ Viewer)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"../../node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=Box,Button,Chip,Container,Stack,Typography!=!@mui/material */ \"__barrel_optimize__?names=Box,Button,Chip,Container,Stack,Typography!=!../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _hyper_fetch_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @hyper-fetch/react */ \"../../packages/react/dist/index.cjs.js\");\n/* harmony import */ var _hyper_fetch_react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _sidebar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sidebar */ \"./components/sidebar.tsx\");\n/* harmony import */ var _constants_routing_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants/routing.constants */ \"./constants/routing.constants.ts\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../api */ \"./api/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api__WEBPACK_IMPORTED_MODULE_6__]);\n_api__WEBPACK_IMPORTED_MODULE_6__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* eslint-disable react/require-default-props */ \n\n\n\n\n\n\n\nconst Viewer = ({ name, children, noButtons })=>{\n    const [mount, setMount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const { isOnline, isFocused } = (0,_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_3__.useAppManager)(_api__WEBPACK_IMPORTED_MODULE_6__.client);\n    const { push } = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const handleToggle = ()=>{\n        setMount((prev)=>!prev);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Box, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Box, {\n                sx: {\n                    background: \"#eaeaea\",\n                    pt: \"30px\",\n                    pb: \"40px\",\n                    pl: 3,\n                    pr: 3\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Typography, {\n                        variant: \"h3\",\n                        sx: {\n                            fontWeight: \"800\"\n                        },\n                        children: [\n                            name,\n                            !isFocused && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Chip, {\n                                label: \"Blur\",\n                                color: \"primary\"\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                                lineNumber: 30,\n                                columnNumber: 26\n                            }, undefined),\n                            !isOnline && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Chip, {\n                                label: \"Offline\",\n                                color: \"error\"\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                                lineNumber: 31,\n                                columnNumber: 25\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                        lineNumber: 28,\n                        columnNumber: 9\n                    }, undefined),\n                    !noButtons && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Stack, {\n                        direction: \"row\",\n                        spacing: 2,\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Box, {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Button, {\n                                    size: \"small\",\n                                    variant: \"contained\",\n                                    type: \"button\",\n                                    onClick: ()=>push(_constants_routing_constants__WEBPACK_IMPORTED_MODULE_5__.DASHBOARD_PAGE.path),\n                                    children: \"Go To dashboard\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                                    lineNumber: 36,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                                lineNumber: 35,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Box, {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Button, {\n                                    color: mount ? \"success\" : \"error\",\n                                    size: \"small\",\n                                    variant: \"contained\",\n                                    type: \"button\",\n                                    onClick: handleToggle,\n                                    children: mount ? \"Unmount\" : \"Mount\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                                    lineNumber: 41,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                                lineNumber: 40,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                        lineNumber: 34,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                lineNumber: 27,\n                columnNumber: 7\n            }, undefined),\n            !noButtons && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_sidebar__WEBPACK_IMPORTED_MODULE_4__.Sidebar, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Container, {\n                    sx: {\n                        pt: 4,\n                        borderLeft: \"1px solid rgba(0, 0, 0, 0.12)\"\n                    },\n                    children: mount && children\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                    lineNumber: 57,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                lineNumber: 56,\n                columnNumber: 9\n            }, undefined),\n            noButtons && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Chip_Container_Stack_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Container, {\n                sx: {\n                    pt: 4,\n                    borderLeft: \"1px solid rgba(0, 0, 0, 0.12)\"\n                },\n                children: mount && children\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n                lineNumber: 68,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/components/viewer.tsx\",\n        lineNumber: 26,\n        columnNumber: 5\n    }, undefined);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3ZpZXdlci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUE4QztBQUNOO0FBQ0E7QUFDd0M7QUFDN0I7QUFFZjtBQUM0QjtBQUNoQztBQUV6QixNQUFNYSxTQUFxRixDQUFDLEVBQ2pHQyxJQUFJLEVBQ0pDLFFBQVEsRUFDUkMsU0FBUyxFQUNWO0lBQ0MsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUdqQiwrQ0FBUUEsQ0FBQztJQUNuQyxNQUFNLEVBQUVrQixRQUFRLEVBQUVDLFNBQVMsRUFBRSxHQUFHWCxpRUFBYUEsQ0FBQ0csd0NBQU1BO0lBRXBELE1BQU0sRUFBRVMsSUFBSSxFQUFFLEdBQUduQixzREFBU0E7SUFFMUIsTUFBTW9CLGVBQWU7UUFDbkJKLFNBQVMsQ0FBQ0ssT0FBUyxDQUFDQTtJQUN0QjtJQUVBLHFCQUNFLDhEQUFDbEIsK0dBQUdBOzswQkFDRiw4REFBQ0EsK0dBQUdBO2dCQUFDbUIsSUFBSTtvQkFBRUMsWUFBWTtvQkFBV0MsSUFBSTtvQkFBUUMsSUFBSTtvQkFBUUMsSUFBSTtvQkFBR0MsSUFBSTtnQkFBRTs7a0NBQ3JFLDhEQUFDdkIsc0hBQVVBO3dCQUFDd0IsU0FBUTt3QkFBS04sSUFBSTs0QkFBRU8sWUFBWTt3QkFBTTs7NEJBQzlDakI7NEJBQ0EsQ0FBQ00sMkJBQWEsOERBQUNaLGdIQUFJQTtnQ0FBQ3dCLE9BQU07Z0NBQU9DLE9BQU07Ozs7Ozs0QkFDdkMsQ0FBQ2QsMEJBQVksOERBQUNYLGdIQUFJQTtnQ0FBQ3dCLE9BQU07Z0NBQVVDLE9BQU07Ozs7Ozs7Ozs7OztvQkFFM0MsQ0FBQ2pCLDJCQUNBLDhEQUFDWixpSEFBS0E7d0JBQUM4QixXQUFVO3dCQUFNQyxTQUFTOzswQ0FDOUIsOERBQUM5QiwrR0FBR0E7MENBQ0YsNEVBQUNGLGtIQUFNQTtvQ0FBQ2lDLE1BQUs7b0NBQVFOLFNBQVE7b0NBQVlPLE1BQUs7b0NBQVNDLFNBQVMsSUFBTWpCLEtBQUtWLHdFQUFjQSxDQUFDNEIsSUFBSTs4Q0FBRzs7Ozs7Ozs7Ozs7MENBSW5HLDhEQUFDbEMsK0dBQUdBOzBDQUNGLDRFQUFDRixrSEFBTUE7b0NBQ0w4QixPQUFPaEIsUUFBUSxZQUFZO29DQUMzQm1CLE1BQUs7b0NBQ0xOLFNBQVE7b0NBQ1JPLE1BQUs7b0NBQ0xDLFNBQVNoQjs4Q0FFUkwsUUFBUSxZQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQU85QixDQUFDRCwyQkFDQSw4REFBQ04sNkNBQU9BOzBCQUNOLDRFQUFDSCxxSEFBU0E7b0JBQ1JpQixJQUFJO3dCQUNGRSxJQUFJO3dCQUNKYyxZQUFZO29CQUNkOzhCQUVDdkIsU0FBU0Y7Ozs7Ozs7Ozs7O1lBSWZDLDJCQUNDLDhEQUFDVCxxSEFBU0E7Z0JBQ1JpQixJQUFJO29CQUNGRSxJQUFJO29CQUNKYyxZQUFZO2dCQUNkOzBCQUVDdkIsU0FBU0Y7Ozs7Ozs7Ozs7OztBQUtwQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy92aWV3ZXIudHN4P2ViMGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcmVxdWlyZS1kZWZhdWx0LXByb3BzICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gXCJuZXh0L3JvdXRlclwiO1xuaW1wb3J0IHsgQnV0dG9uLCBTdGFjaywgQm94LCBUeXBvZ3JhcGh5LCBDb250YWluZXIsIENoaXAgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xuaW1wb3J0IHsgdXNlQXBwTWFuYWdlciB9IGZyb20gXCJAaHlwZXItZmV0Y2gvcmVhY3RcIjtcblxuaW1wb3J0IHsgU2lkZWJhciB9IGZyb20gXCIuL3NpZGViYXJcIjtcbmltcG9ydCB7IERBU0hCT0FSRF9QQUdFIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9yb3V0aW5nLmNvbnN0YW50c1wiO1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSBcIi4uL2FwaVwiO1xuXG5leHBvcnQgY29uc3QgVmlld2VyOiBSZWFjdC5GQzx7IG5hbWU6IHN0cmluZzsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTsgbm9CdXR0b25zPzogYm9vbGVhbiB9PiA9ICh7XG4gIG5hbWUsXG4gIGNoaWxkcmVuLFxuICBub0J1dHRvbnMsXG59KSA9PiB7XG4gIGNvbnN0IFttb3VudCwgc2V0TW91bnRdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IHsgaXNPbmxpbmUsIGlzRm9jdXNlZCB9ID0gdXNlQXBwTWFuYWdlcihjbGllbnQpO1xuXG4gIGNvbnN0IHsgcHVzaCB9ID0gdXNlUm91dGVyKCk7XG5cbiAgY29uc3QgaGFuZGxlVG9nZ2xlID0gKCkgPT4ge1xuICAgIHNldE1vdW50KChwcmV2KSA9PiAhcHJldik7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuICAgICAgPEJveCBzeD17eyBiYWNrZ3JvdW5kOiBcIiNlYWVhZWFcIiwgcHQ6IFwiMzBweFwiLCBwYjogXCI0MHB4XCIsIHBsOiAzLCBwcjogMyB9fT5cbiAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImgzXCIgc3g9e3sgZm9udFdlaWdodDogXCI4MDBcIiB9fT5cbiAgICAgICAgICB7bmFtZX1cbiAgICAgICAgICB7IWlzRm9jdXNlZCAmJiA8Q2hpcCBsYWJlbD1cIkJsdXJcIiBjb2xvcj1cInByaW1hcnlcIiAvPn1cbiAgICAgICAgICB7IWlzT25saW5lICYmIDxDaGlwIGxhYmVsPVwiT2ZmbGluZVwiIGNvbG9yPVwiZXJyb3JcIiAvPn1cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICB7IW5vQnV0dG9ucyAmJiAoXG4gICAgICAgICAgPFN0YWNrIGRpcmVjdGlvbj1cInJvd1wiIHNwYWNpbmc9ezJ9PlxuICAgICAgICAgICAgPEJveD5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBzaXplPVwic21hbGxcIiB2YXJpYW50PVwiY29udGFpbmVkXCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHB1c2goREFTSEJPQVJEX1BBR0UucGF0aCl9PlxuICAgICAgICAgICAgICAgIEdvIFRvIGRhc2hib2FyZFxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPEJveD5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIGNvbG9yPXttb3VudCA/IFwic3VjY2Vzc1wiIDogXCJlcnJvclwifVxuICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlVG9nZ2xlfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge21vdW50ID8gXCJVbm1vdW50XCIgOiBcIk1vdW50XCJ9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPC9TdGFjaz5cbiAgICAgICAgKX1cbiAgICAgIDwvQm94PlxuXG4gICAgICB7IW5vQnV0dG9ucyAmJiAoXG4gICAgICAgIDxTaWRlYmFyPlxuICAgICAgICAgIDxDb250YWluZXJcbiAgICAgICAgICAgIHN4PXt7XG4gICAgICAgICAgICAgIHB0OiA0LFxuICAgICAgICAgICAgICBib3JkZXJMZWZ0OiBcIjFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHttb3VudCAmJiBjaGlsZHJlbn1cbiAgICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgICAgPC9TaWRlYmFyPlxuICAgICAgKX1cbiAgICAgIHtub0J1dHRvbnMgJiYgKFxuICAgICAgICA8Q29udGFpbmVyXG4gICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgIHB0OiA0LFxuICAgICAgICAgICAgYm9yZGVyTGVmdDogXCIxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKVwiLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7bW91bnQgJiYgY2hpbGRyZW59XG4gICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgKX1cbiAgICA8L0JveD5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZVJvdXRlciIsIkJ1dHRvbiIsIlN0YWNrIiwiQm94IiwiVHlwb2dyYXBoeSIsIkNvbnRhaW5lciIsIkNoaXAiLCJ1c2VBcHBNYW5hZ2VyIiwiU2lkZWJhciIsIkRBU0hCT0FSRF9QQUdFIiwiY2xpZW50IiwiVmlld2VyIiwibmFtZSIsImNoaWxkcmVuIiwibm9CdXR0b25zIiwibW91bnQiLCJzZXRNb3VudCIsImlzT25saW5lIiwiaXNGb2N1c2VkIiwicHVzaCIsImhhbmRsZVRvZ2dsZSIsInByZXYiLCJzeCIsImJhY2tncm91bmQiLCJwdCIsInBiIiwicGwiLCJwciIsInZhcmlhbnQiLCJmb250V2VpZ2h0IiwibGFiZWwiLCJjb2xvciIsImRpcmVjdGlvbiIsInNwYWNpbmciLCJzaXplIiwidHlwZSIsIm9uQ2xpY2siLCJwYXRoIiwiYm9yZGVyTGVmdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/viewer.tsx\n");

/***/ }),

/***/ "./constants/routing.constants.ts":
/*!****************************************!*\
  !*** ./constants/routing.constants.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DASHBOARD_PAGE: () => (/* binding */ DASHBOARD_PAGE),\n/* harmony export */   DETAILS_PAGE: () => (/* binding */ DETAILS_PAGE),\n/* harmony export */   FORM_PAGE: () => (/* binding */ FORM_PAGE),\n/* harmony export */   LIST_PAGE: () => (/* binding */ LIST_PAGE),\n/* harmony export */   SSR_PAGE: () => (/* binding */ SSR_PAGE)\n/* harmony export */ });\nconst DASHBOARD_PAGE = {\n    name: \"Dashboard\",\n    path: \"/\"\n};\nconst SSR_PAGE = {\n    name: \"Server side\",\n    path: \"/ssr\"\n};\nconst DETAILS_PAGE = {\n    name: \"Details\",\n    path: \"/details\"\n};\nconst LIST_PAGE = {\n    name: \"List\",\n    path: \"/list\"\n};\nconst FORM_PAGE = {\n    name: \"Form\",\n    path: \"/form\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb25zdGFudHMvcm91dGluZy5jb25zdGFudHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxNQUFNQSxpQkFBaUI7SUFDNUJDLE1BQU07SUFDTkMsTUFBTTtBQUNSLEVBQUU7QUFDSyxNQUFNQyxXQUFXO0lBQ3RCRixNQUFNO0lBQ05DLE1BQU07QUFDUixFQUFFO0FBQ0ssTUFBTUUsZUFBZTtJQUMxQkgsTUFBTTtJQUNOQyxNQUFNO0FBQ1IsRUFBRTtBQUNLLE1BQU1HLFlBQVk7SUFDdkJKLE1BQU07SUFDTkMsTUFBTTtBQUNSLEVBQUU7QUFDSyxNQUFNSSxZQUFZO0lBQ3ZCTCxNQUFNO0lBQ05DLE1BQU07QUFDUixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29uc3RhbnRzL3JvdXRpbmcuY29uc3RhbnRzLnRzPzgwYjkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IERBU0hCT0FSRF9QQUdFID0ge1xuICBuYW1lOiBcIkRhc2hib2FyZFwiLFxuICBwYXRoOiBcIi9cIixcbn07XG5leHBvcnQgY29uc3QgU1NSX1BBR0UgPSB7XG4gIG5hbWU6IFwiU2VydmVyIHNpZGVcIixcbiAgcGF0aDogXCIvc3NyXCIsXG59O1xuZXhwb3J0IGNvbnN0IERFVEFJTFNfUEFHRSA9IHtcbiAgbmFtZTogXCJEZXRhaWxzXCIsXG4gIHBhdGg6IFwiL2RldGFpbHNcIixcbn07XG5leHBvcnQgY29uc3QgTElTVF9QQUdFID0ge1xuICBuYW1lOiBcIkxpc3RcIixcbiAgcGF0aDogXCIvbGlzdFwiLFxufTtcbmV4cG9ydCBjb25zdCBGT1JNX1BBR0UgPSB7XG4gIG5hbWU6IFwiRm9ybVwiLFxuICBwYXRoOiBcIi9mb3JtXCIsXG59O1xuIl0sIm5hbWVzIjpbIkRBU0hCT0FSRF9QQUdFIiwibmFtZSIsInBhdGgiLCJTU1JfUEFHRSIsIkRFVEFJTFNfUEFHRSIsIkxJU1RfUEFHRSIsIkZPUk1fUEFHRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./constants/routing.constants.ts\n");

/***/ }),

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _hyper_fetch_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hyper-fetch/react */ \"../../packages/react/dist/index.cjs.js\");\n/* harmony import */ var _hyper_fetch_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! notistack */ \"notistack\");\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(notistack__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../api */ \"./api/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api__WEBPACK_IMPORTED_MODULE_4__]);\n_api__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n// import \"assets/index.css\";\nfunction CustomApp({ Component, pageProps }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_1__.ConfigProvider, {\n        client: _api__WEBPACK_IMPORTED_MODULE_4__.client,\n        fallbacks: pageProps?.fallbacks,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(notistack__WEBPACK_IMPORTED_MODULE_3__.SnackbarProvider, {\n            maxSnack: 6,\n            autoHideDuration: 1000,\n            anchorOrigin: {\n                vertical: \"top\",\n                horizontal: \"right\"\n            },\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_2___default()), {\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Nextjs\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/_app.tsx\",\n                        lineNumber: 21,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/_app.tsx\",\n                    lineNumber: 20,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                    className: \"app\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                        ...pageProps\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/_app.tsx\",\n                        lineNumber: 24,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/_app.tsx\",\n                    lineNumber: 23,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/_app.tsx\",\n            lineNumber: 12,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/_app.tsx\",\n        lineNumber: 11,\n        columnNumber: 5\n    }, this);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CustomApp);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFvRDtBQUV2QjtBQUNnQjtBQUNiO0FBRWhDLDZCQUE2QjtBQUU3QixTQUFTSSxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFZO0lBQ25ELHFCQUNFLDhEQUFDTiw4REFBY0E7UUFBQ0csUUFBUUEsd0NBQU1BO1FBQUVJLFdBQVdELFdBQVdDO2tCQUNwRCw0RUFBQ0wsdURBQWdCQTtZQUNmTSxVQUFVO1lBQ1ZDLGtCQUFrQjtZQUNsQkMsY0FBYztnQkFDWkMsVUFBVTtnQkFDVkMsWUFBWTtZQUNkOzs4QkFFQSw4REFBQ1gsa0RBQUlBOzhCQUNILDRFQUFDWTtrQ0FBTTs7Ozs7Ozs7Ozs7OEJBRVQsOERBQUNDO29CQUFLQyxXQUFVOzhCQUNkLDRFQUFDVjt3QkFBVyxHQUFHQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS2xDO0FBRUEsaUVBQWVGLFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9fYXBwLnRzeD8yZmJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZ1Byb3ZpZGVyIH0gZnJvbSBcIkBoeXBlci1mZXRjaC9yZWFjdFwiO1xuaW1wb3J0IHsgQXBwUHJvcHMgfSBmcm9tIFwibmV4dC9hcHBcIjtcbmltcG9ydCBIZWFkIGZyb20gXCJuZXh0L2hlYWRcIjtcbmltcG9ydCB7IFNuYWNrYmFyUHJvdmlkZXIgfSBmcm9tIFwibm90aXN0YWNrXCI7XG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tIFwiLi4vYXBpXCI7XG5cbi8vIGltcG9ydCBcImFzc2V0cy9pbmRleC5jc3NcIjtcblxuZnVuY3Rpb24gQ3VzdG9tQXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfTogQXBwUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Q29uZmlnUHJvdmlkZXIgY2xpZW50PXtjbGllbnR9IGZhbGxiYWNrcz17cGFnZVByb3BzPy5mYWxsYmFja3N9PlxuICAgICAgPFNuYWNrYmFyUHJvdmlkZXJcbiAgICAgICAgbWF4U25hY2s9ezZ9XG4gICAgICAgIGF1dG9IaWRlRHVyYXRpb249ezEwMDB9XG4gICAgICAgIGFuY2hvck9yaWdpbj17e1xuICAgICAgICAgIHZlcnRpY2FsOiBcInRvcFwiLFxuICAgICAgICAgIGhvcml6b250YWw6IFwicmlnaHRcIixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPEhlYWQ+XG4gICAgICAgICAgPHRpdGxlPk5leHRqczwvdGl0bGU+XG4gICAgICAgIDwvSGVhZD5cbiAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwiYXBwXCI+XG4gICAgICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxuICAgICAgICA8L21haW4+XG4gICAgICA8L1NuYWNrYmFyUHJvdmlkZXI+XG4gICAgPC9Db25maWdQcm92aWRlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tQXBwO1xuIl0sIm5hbWVzIjpbIkNvbmZpZ1Byb3ZpZGVyIiwiSGVhZCIsIlNuYWNrYmFyUHJvdmlkZXIiLCJjbGllbnQiLCJDdXN0b21BcHAiLCJDb21wb25lbnQiLCJwYWdlUHJvcHMiLCJmYWxsYmFja3MiLCJtYXhTbmFjayIsImF1dG9IaWRlRHVyYXRpb24iLCJhbmNob3JPcmlnaW4iLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJ0aXRsZSIsIm1haW4iLCJjbGFzc05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n");

/***/ }),

/***/ "./pages/form/form.page.tsx":
/*!**********************************!*\
  !*** ./pages/form/form.page.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FormPage: () => (/* binding */ FormPage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=Box,Button,Typography!=!@mui/material */ \"__barrel_optimize__?names=Box,Button,Typography!=!../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _hyper_fetch_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @hyper-fetch/react */ \"../../packages/react/dist/index.cjs.js\");\n/* harmony import */ var _hyper_fetch_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../api */ \"./api/index.ts\");\n/* harmony import */ var _components_request__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/request */ \"./components/request.tsx\");\n/* harmony import */ var _components_viewer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/viewer */ \"./components/viewer.tsx\");\n/* harmony import */ var _components_request_card__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/request.card */ \"./components/request.card.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api__WEBPACK_IMPORTED_MODULE_3__, _components_viewer__WEBPACK_IMPORTED_MODULE_5__]);\n([_api__WEBPACK_IMPORTED_MODULE_3__, _components_viewer__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/* __next_internal_client_entry_do_not_use__ FormPage auto */ \n/* eslint-disable no-console */ \n\n\n\n\n\n\nconst FormPage = ()=>{\n    // Post\n    const result = (0,_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_2__.useSubmit)(_api__WEBPACK_IMPORTED_MODULE_3__.postUser.setData({\n        email: \"test\",\n        age: 12,\n        name: \"name\"\n    }));\n    // Patch\n    const resultPatch = (0,_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_2__.useSubmit)(_api__WEBPACK_IMPORTED_MODULE_3__.patchUser.setData({\n        email: \"test\",\n        age: 12,\n        name: \"name\"\n    }).setParams({\n        userId: 1\n    }));\n    // Queue\n    const resultQueued = (0,_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_2__.useSubmit)(_api__WEBPACK_IMPORTED_MODULE_3__.postFile.setData({\n        file: new File([\n            \"\"\n        ], \"file.txt\")\n    }));\n    const { stopped, requests, stop, start } = (0,_hyper_fetch_react__WEBPACK_IMPORTED_MODULE_2__.useQueue)(_api__WEBPACK_IMPORTED_MODULE_3__.postFile);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_viewer__WEBPACK_IMPORTED_MODULE_5__.Viewer, {\n        name: \"Form\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_request__WEBPACK_IMPORTED_MODULE_4__.Request, {\n                name: \"Post\",\n                result: result,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Button, {\n                    type: \"button\",\n                    variant: \"contained\",\n                    onClick: ()=>result.submit(),\n                    children: \"Submit\"\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                    lineNumber: 27,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                lineNumber: 26,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_request__WEBPACK_IMPORTED_MODULE_4__.Request, {\n                name: \"Patch\",\n                result: resultPatch,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Button, {\n                    type: \"button\",\n                    variant: \"contained\",\n                    onClick: ()=>resultPatch.submit(),\n                    children: \"Submit\"\n                }, void 0, false, {\n                    fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                    lineNumber: 32,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                lineNumber: 31,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_request__WEBPACK_IMPORTED_MODULE_4__.Request, {\n                name: \"Queue\",\n                result: resultQueued,\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Button, {\n                        type: \"button\",\n                        variant: \"contained\",\n                        onClick: ()=>resultQueued.submit(),\n                        sx: {\n                            mr: 2\n                        },\n                        children: \"Add to Queue\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                        lineNumber: 37,\n                        columnNumber: 9\n                    }, undefined),\n                    !stopped && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Button, {\n                        type: \"button\",\n                        variant: \"contained\",\n                        color: \"error\",\n                        onClick: ()=>stop(),\n                        children: \"Stop queue\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                        lineNumber: 41,\n                        columnNumber: 11\n                    }, undefined),\n                    stopped && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Button, {\n                        type: \"button\",\n                        variant: \"contained\",\n                        color: \"success\",\n                        onClick: ()=>start(),\n                        children: \"Start queue\"\n                    }, void 0, false, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                        lineNumber: 46,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                lineNumber: 36,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Box, {\n                sx: {\n                    mb: 20\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Box_Button_Typography_mui_material__WEBPACK_IMPORTED_MODULE_7__.Typography, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                                children: \"Queued requests:\"\n                            }, void 0, false, {\n                                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                                lineNumber: 53,\n                                columnNumber: 11\n                            }, undefined),\n                            \" \",\n                            requests.length\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                        lineNumber: 52,\n                        columnNumber: 9\n                    }, undefined),\n                    requests.map((request)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_request_card__WEBPACK_IMPORTED_MODULE_6__.RequestCard, {\n                            request: request\n                        }, request.requestId, false, {\n                            fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                            lineNumber: 56,\n                            columnNumber: 11\n                        }, undefined))\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n                lineNumber: 51,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/maciejpyrc/Praca/better-typed/open-source/hyper-fetch/examples/next-app/pages/form/form.page.tsx\",\n        lineNumber: 25,\n        columnNumber: 5\n    }, undefined);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9mb3JtL2Zvcm0ucGFnZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLDZCQUE2QixHQUNIO0FBQzhCO0FBQ0M7QUFFQztBQUNQO0FBQ0Y7QUFDVztBQUVyRCxNQUFNWSxXQUFxQjtJQUNoQyxPQUFPO0lBQ1AsTUFBTUMsU0FBU1QsNkRBQVNBLENBQUNHLDBDQUFRQSxDQUFDTyxPQUFPLENBQUM7UUFBRUMsT0FBTztRQUFRQyxLQUFLO1FBQUlDLE1BQU07SUFBTztJQUVqRixRQUFRO0lBQ1IsTUFBTUMsY0FBY2QsNkRBQVNBLENBQUNFLDJDQUFTQSxDQUFDUSxPQUFPLENBQUM7UUFBRUMsT0FBTztRQUFRQyxLQUFLO1FBQUlDLE1BQU07SUFBTyxHQUFHRSxTQUFTLENBQUM7UUFBRUMsUUFBUTtJQUFFO0lBRWhILFFBQVE7SUFDUixNQUFNQyxlQUFlakIsNkRBQVNBLENBQUNJLDBDQUFRQSxDQUFDTSxPQUFPLENBQUM7UUFBRVEsTUFBTSxJQUFJQyxLQUFLO1lBQUM7U0FBRyxFQUFFO0lBQVk7SUFDbkYsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBR3RCLDREQUFRQSxDQUFDRywwQ0FBUUE7SUFFNUQscUJBQ0UsOERBQUNFLHNEQUFNQTtRQUFDTyxNQUFLOzswQkFDWCw4REFBQ1Isd0RBQU9BO2dCQUFDUSxNQUFLO2dCQUFPSixRQUFRQTswQkFDM0IsNEVBQUNYLDZGQUFNQTtvQkFBQzBCLE1BQUs7b0JBQVNDLFNBQVE7b0JBQVlDLFNBQVMsSUFBTWpCLE9BQU9rQixNQUFNOzhCQUFJOzs7Ozs7Ozs7OzswQkFJNUUsOERBQUN0Qix3REFBT0E7Z0JBQUNRLE1BQUs7Z0JBQVFKLFFBQVFLOzBCQUM1Qiw0RUFBQ2hCLDZGQUFNQTtvQkFBQzBCLE1BQUs7b0JBQVNDLFNBQVE7b0JBQVlDLFNBQVMsSUFBTVosWUFBWWEsTUFBTTs4QkFBSTs7Ozs7Ozs7Ozs7MEJBSWpGLDhEQUFDdEIsd0RBQU9BO2dCQUFDUSxNQUFLO2dCQUFRSixRQUFRUTs7a0NBQzVCLDhEQUFDbkIsNkZBQU1BO3dCQUFDMEIsTUFBSzt3QkFBU0MsU0FBUTt3QkFBWUMsU0FBUyxJQUFNVCxhQUFhVSxNQUFNO3dCQUFJQyxJQUFJOzRCQUFFQyxJQUFJO3dCQUFFO2tDQUFHOzs7Ozs7b0JBRzlGLENBQUNULHlCQUNBLDhEQUFDdEIsNkZBQU1BO3dCQUFDMEIsTUFBSzt3QkFBU0MsU0FBUTt3QkFBWUssT0FBTTt3QkFBUUosU0FBUyxJQUFNSjtrQ0FBUTs7Ozs7O29CQUloRkYseUJBQ0MsOERBQUN0Qiw2RkFBTUE7d0JBQUMwQixNQUFLO3dCQUFTQyxTQUFRO3dCQUFZSyxPQUFNO3dCQUFVSixTQUFTLElBQU1IO2tDQUFTOzs7Ozs7Ozs7Ozs7MEJBS3RGLDhEQUFDMUIsMEZBQUdBO2dCQUFDK0IsSUFBSTtvQkFBRUcsSUFBSTtnQkFBRzs7a0NBQ2hCLDhEQUFDaEMsaUdBQVVBOzswQ0FDVCw4REFBQ2lDOzBDQUFFOzs7Ozs7NEJBQW9COzRCQUFFWCxTQUFTWSxNQUFNOzs7Ozs7O29CQUV6Q1osU0FBU2EsR0FBRyxDQUFDLENBQUNDLHdCQUNiLDhEQUFDNUIsaUVBQVdBOzRCQUF5QjRCLFNBQVNBOzJCQUE1QkEsUUFBUUMsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLN0MsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3BhZ2VzL2Zvcm0vZm9ybS5wYWdlLnRzeD9jZjYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCb3gsIEJ1dHRvbiwgVHlwb2dyYXBoeSB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XG5pbXBvcnQgeyB1c2VTdWJtaXQsIHVzZVF1ZXVlIH0gZnJvbSBcIkBoeXBlci1mZXRjaC9yZWFjdFwiO1xuXG5pbXBvcnQgeyBwYXRjaFVzZXIsIHBvc3RVc2VyLCBwb3N0RmlsZSB9IGZyb20gXCIuLi8uLi9hcGlcIjtcbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9yZXF1ZXN0XCI7XG5pbXBvcnQgeyBWaWV3ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy92aWV3ZXJcIjtcbmltcG9ydCB7IFJlcXVlc3RDYXJkIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvcmVxdWVzdC5jYXJkXCI7XG5cbmV4cG9ydCBjb25zdCBGb3JtUGFnZTogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIC8vIFBvc3RcbiAgY29uc3QgcmVzdWx0ID0gdXNlU3VibWl0KHBvc3RVc2VyLnNldERhdGEoeyBlbWFpbDogXCJ0ZXN0XCIsIGFnZTogMTIsIG5hbWU6IFwibmFtZVwiIH0pKTtcblxuICAvLyBQYXRjaFxuICBjb25zdCByZXN1bHRQYXRjaCA9IHVzZVN1Ym1pdChwYXRjaFVzZXIuc2V0RGF0YSh7IGVtYWlsOiBcInRlc3RcIiwgYWdlOiAxMiwgbmFtZTogXCJuYW1lXCIgfSkuc2V0UGFyYW1zKHsgdXNlcklkOiAxIH0pKTtcblxuICAvLyBRdWV1ZVxuICBjb25zdCByZXN1bHRRdWV1ZWQgPSB1c2VTdWJtaXQocG9zdEZpbGUuc2V0RGF0YSh7IGZpbGU6IG5ldyBGaWxlKFtcIlwiXSwgXCJmaWxlLnR4dFwiKSB9KSk7XG4gIGNvbnN0IHsgc3RvcHBlZCwgcmVxdWVzdHMsIHN0b3AsIHN0YXJ0IH0gPSB1c2VRdWV1ZShwb3N0RmlsZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld2VyIG5hbWU9XCJGb3JtXCI+XG4gICAgICA8UmVxdWVzdCBuYW1lPVwiUG9zdFwiIHJlc3VsdD17cmVzdWx0fT5cbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdmFyaWFudD1cImNvbnRhaW5lZFwiIG9uQ2xpY2s9eygpID0+IHJlc3VsdC5zdWJtaXQoKX0+XG4gICAgICAgICAgU3VibWl0XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9SZXF1ZXN0PlxuICAgICAgPFJlcXVlc3QgbmFtZT1cIlBhdGNoXCIgcmVzdWx0PXtyZXN1bHRQYXRjaH0+XG4gICAgICAgIDxCdXR0b24gdHlwZT1cImJ1dHRvblwiIHZhcmlhbnQ9XCJjb250YWluZWRcIiBvbkNsaWNrPXsoKSA9PiByZXN1bHRQYXRjaC5zdWJtaXQoKX0+XG4gICAgICAgICAgU3VibWl0XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9SZXF1ZXN0PlxuICAgICAgPFJlcXVlc3QgbmFtZT1cIlF1ZXVlXCIgcmVzdWx0PXtyZXN1bHRRdWV1ZWR9PlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiB2YXJpYW50PVwiY29udGFpbmVkXCIgb25DbGljaz17KCkgPT4gcmVzdWx0UXVldWVkLnN1Ym1pdCgpfSBzeD17eyBtcjogMiB9fT5cbiAgICAgICAgICBBZGQgdG8gUXVldWVcbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIHshc3RvcHBlZCAmJiAoXG4gICAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdmFyaWFudD1cImNvbnRhaW5lZFwiIGNvbG9yPVwiZXJyb3JcIiBvbkNsaWNrPXsoKSA9PiBzdG9wKCl9PlxuICAgICAgICAgICAgU3RvcCBxdWV1ZVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgICB7c3RvcHBlZCAmJiAoXG4gICAgICAgICAgPEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdmFyaWFudD1cImNvbnRhaW5lZFwiIGNvbG9yPVwic3VjY2Vzc1wiIG9uQ2xpY2s9eygpID0+IHN0YXJ0KCl9PlxuICAgICAgICAgICAgU3RhcnQgcXVldWVcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvUmVxdWVzdD5cbiAgICAgIDxCb3ggc3g9e3sgbWI6IDIwIH19PlxuICAgICAgICA8VHlwb2dyYXBoeT5cbiAgICAgICAgICA8Yj5RdWV1ZWQgcmVxdWVzdHM6PC9iPiB7cmVxdWVzdHMubGVuZ3RofVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIHtyZXF1ZXN0cy5tYXAoKHJlcXVlc3QpID0+IChcbiAgICAgICAgICA8UmVxdWVzdENhcmQga2V5PXtyZXF1ZXN0LnJlcXVlc3RJZH0gcmVxdWVzdD17cmVxdWVzdH0gLz5cbiAgICAgICAgKSl9XG4gICAgICA8L0JveD5cbiAgICA8L1ZpZXdlcj5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJCb3giLCJCdXR0b24iLCJUeXBvZ3JhcGh5IiwidXNlU3VibWl0IiwidXNlUXVldWUiLCJwYXRjaFVzZXIiLCJwb3N0VXNlciIsInBvc3RGaWxlIiwiUmVxdWVzdCIsIlZpZXdlciIsIlJlcXVlc3RDYXJkIiwiRm9ybVBhZ2UiLCJyZXN1bHQiLCJzZXREYXRhIiwiZW1haWwiLCJhZ2UiLCJuYW1lIiwicmVzdWx0UGF0Y2giLCJzZXRQYXJhbXMiLCJ1c2VySWQiLCJyZXN1bHRRdWV1ZWQiLCJmaWxlIiwiRmlsZSIsInN0b3BwZWQiLCJyZXF1ZXN0cyIsInN0b3AiLCJzdGFydCIsInR5cGUiLCJ2YXJpYW50Iiwib25DbGljayIsInN1Ym1pdCIsInN4IiwibXIiLCJjb2xvciIsIm1iIiwiYiIsImxlbmd0aCIsIm1hcCIsInJlcXVlc3QiLCJyZXF1ZXN0SWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/form/form.page.tsx\n");

/***/ }),

/***/ "./pages/form/index.tsx":
/*!******************************!*\
  !*** ./pages/form/index.tsx ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _form_page__WEBPACK_IMPORTED_MODULE_0__.FormPage)\n/* harmony export */ });\n/* harmony import */ var _form_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.page */ \"./pages/form/form.page.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_form_page__WEBPACK_IMPORTED_MODULE_0__]);\n_form_page__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// eslint-disable-next-line no-restricted-exports\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9mb3JtL2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGlEQUFpRDtBQUNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcGFnZXMvZm9ybS9pbmRleC50c3g/ODI2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1leHBvcnRzXG5leHBvcnQgeyBGb3JtUGFnZSBhcyBkZWZhdWx0IH0gZnJvbSBcIi4vZm9ybS5wYWdlXCI7XG4iXSwibmFtZXMiOlsiRm9ybVBhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/form/index.tsx\n");

/***/ }),

/***/ "./utils/index.ts":
/*!************************!*\
  !*** ./utils/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _random_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./random.utils */ \"./utils/random.utils.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _random_utils__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _random_utils__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _users_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./users.utils */ \"./utils/users.utils.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _users_utils__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _users_utils__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0I7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3V0aWxzL2luZGV4LnRzPzU2ZDciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vcmFuZG9tLnV0aWxzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91c2Vycy51dGlsc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/index.ts\n");

/***/ }),

/***/ "./utils/random.utils.ts":
/*!*******************************!*\
  !*** ./utils/random.utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWord: () => (/* binding */ getWord),\n/* harmony export */   getWords: () => (/* binding */ getWords),\n/* harmony export */   randomParagraph: () => (/* binding */ randomParagraph),\n/* harmony export */   randomSentence: () => (/* binding */ randomSentence),\n/* harmony export */   randomWords: () => (/* binding */ randomWords)\n/* harmony export */ });\nconst arrayOf = (length, mapFunc)=>Array.from({\n        length\n    }, (_, index)=>mapFunc(index));\nconst lerp = (min, max, t)=>{\n    return min * (1 - t) + max * t;\n};\nconst round = (value, decimalPoint = 0)=>{\n    if (decimalPoint >= 0) {\n        return Math.round(value * 10 ** decimalPoint) / 10 ** decimalPoint;\n    }\n    const exp = Number(`10e${decimalPoint - 1}`);\n    return Math.round(value * exp) * 10 ** Math.abs(decimalPoint);\n};\nconst lerpRounded = (min, max, t, decimalPoint = 0)=>round(lerp(min, max, t), decimalPoint);\nconst words = [\n    \"a\",\n    \"ac\",\n    \"accumsan\",\n    \"ad\",\n    \"adipiscing\",\n    \"aenean\",\n    \"aenean\",\n    \"aliquam\",\n    \"aliquam\",\n    \"aliquet\",\n    \"amet\",\n    \"ante\",\n    \"aptent\",\n    \"arcu\",\n    \"at\",\n    \"auctor\",\n    \"augue\",\n    \"bibendum\",\n    \"blandit\",\n    \"class\",\n    \"commodo\",\n    \"condimentum\",\n    \"congue\",\n    \"consectetur\",\n    \"consequat\",\n    \"conubia\",\n    \"convallis\",\n    \"cras\",\n    \"cubilia\",\n    \"curabitur\",\n    \"curabitur\",\n    \"curae\",\n    \"cursus\",\n    \"dapibus\",\n    \"diam\",\n    \"dictum\",\n    \"dictumst\",\n    \"dolor\",\n    \"donec\",\n    \"donec\",\n    \"dui\",\n    \"duis\",\n    \"egestas\",\n    \"eget\",\n    \"eleifend\",\n    \"elementum\",\n    \"elit\",\n    \"enim\",\n    \"erat\",\n    \"eros\",\n    \"est\",\n    \"et\",\n    \"etiam\",\n    \"etiam\",\n    \"eu\",\n    \"euismod\",\n    \"facilisis\",\n    \"fames\",\n    \"faucibus\",\n    \"felis\",\n    \"fermentum\",\n    \"feugiat\",\n    \"fringilla\",\n    \"fusce\",\n    \"gravida\",\n    \"habitant\",\n    \"habitasse\",\n    \"hac\",\n    \"hendrerit\",\n    \"himenaeos\",\n    \"iaculis\",\n    \"id\",\n    \"imperdiet\",\n    \"in\",\n    \"inceptos\",\n    \"integer\",\n    \"interdum\",\n    \"ipsum\",\n    \"justo\",\n    \"lacinia\",\n    \"lacus\",\n    \"laoreet\",\n    \"lectus\",\n    \"leo\",\n    \"libero\",\n    \"ligula\",\n    \"litora\",\n    \"lobortis\",\n    \"lorem\",\n    \"luctus\",\n    \"maecenas\",\n    \"magna\",\n    \"malesuada\",\n    \"massa\",\n    \"mattis\",\n    \"mauris\",\n    \"metus\",\n    \"mi\",\n    \"molestie\",\n    \"mollis\",\n    \"morbi\",\n    \"nam\",\n    \"nec\",\n    \"neque\",\n    \"netus\",\n    \"nibh\",\n    \"nisi\",\n    \"nisl\",\n    \"non\",\n    \"nostra\",\n    \"nulla\",\n    \"nullam\",\n    \"nunc\",\n    \"odio\",\n    \"orci\",\n    \"ornare\",\n    \"pellentesque\",\n    \"per\",\n    \"pharetra\",\n    \"phasellus\",\n    \"placerat\",\n    \"platea\",\n    \"porta\",\n    \"porttitor\",\n    \"posuere\",\n    \"potenti\",\n    \"praesent\",\n    \"pretium\",\n    \"primis\",\n    \"proin\",\n    \"pulvinar\",\n    \"purus\",\n    \"quam\",\n    \"quis\",\n    \"quisque\",\n    \"quisque\",\n    \"rhoncus\",\n    \"risus\",\n    \"rutrum\",\n    \"sagittis\",\n    \"sapien\",\n    \"scelerisque\",\n    \"sed\",\n    \"sem\",\n    \"semper\",\n    \"senectus\",\n    \"sit\",\n    \"sociosqu\",\n    \"sodales\",\n    \"sollicitudin\",\n    \"suscipit\",\n    \"suspendisse\",\n    \"taciti\",\n    \"tellus\",\n    \"tempor\",\n    \"tempus\",\n    \"tincidunt\",\n    \"torquent\",\n    \"tortor\",\n    \"tristique\",\n    \"turpis\",\n    \"ullamcorper\",\n    \"ultrices\",\n    \"ultricies\",\n    \"urna\",\n    \"ut\",\n    \"ut\",\n    \"varius\",\n    \"vehicula\",\n    \"vel\",\n    \"velit\",\n    \"venenatis\",\n    \"vestibulum\",\n    \"vitae\",\n    \"vivamus\",\n    \"viverra\",\n    \"volutpat\",\n    \"vulputate\"\n];\nconst getWord = ()=>words[lerpRounded(0, words.length - 1, Math.random())];\nconst getWords = (min, max)=>arrayOf(lerpRounded(min, max, Math.random()), getWord);\nconst randomWords = (min = 2, max = 10)=>getWords(min, max).join(\" \");\nconst randomSentence = (min = 8, max = 20)=>{\n    const sentence = getWords(min, max);\n    if (sentence.length) {\n        sentence[0] = sentence[0].charAt(0).toUpperCase() + sentence[0].slice(1);\n        sentence[sentence.length - 1] += \".\";\n    }\n    return sentence.join(\" \");\n};\nconst randomParagraph = (min, max)=>{\n    const sentencesAmount = lerpRounded(min, max, Math.random());\n    return arrayOf(sentencesAmount, ()=>randomSentence()).join(\" \");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/random.utils.ts\n");

/***/ }),

/***/ "./utils/users.utils.ts":
/*!******************************!*\
  !*** ./utils/users.utils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomUser: () => (/* binding */ getRandomUser),\n/* harmony export */   getRandomUsers: () => (/* binding */ getRandomUsers)\n/* harmony export */ });\n/* harmony import */ var _random_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./random.utils */ \"./utils/random.utils.ts\");\n\nconst getRandomUser = ()=>{\n    const name = (0,_random_utils__WEBPACK_IMPORTED_MODULE_0__.getWord)();\n    return {\n        id: Math.round(Math.random() * 10000),\n        name,\n        email: `${name}@local.local`,\n        age: Math.round(Math.random() * 100)\n    };\n};\nconst getRandomUsers = (count = 10)=>{\n    return Array.from(Array(count).keys()).map(getRandomUser);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy91c2Vycy51dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDeUM7QUFFbEMsTUFBTUMsZ0JBQWdCO0lBQzNCLE1BQU1DLE9BQU9GLHNEQUFPQTtJQUVwQixPQUFPO1FBQ0xHLElBQUlDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLO1FBQy9CSjtRQUNBSyxPQUFPLENBQUMsRUFBRUwsS0FBSyxZQUFZLENBQUM7UUFDNUJNLEtBQUtKLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLO0lBQ2xDO0FBQ0YsRUFBRTtBQUVLLE1BQU1HLGlCQUFpQixDQUFDQyxRQUFRLEVBQUU7SUFDdkMsT0FBT0MsTUFBTUMsSUFBSSxDQUFDRCxNQUFNRCxPQUFPRyxJQUFJLElBQUlDLEdBQUcsQ0FBQ2I7QUFDN0MsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3V0aWxzL3VzZXJzLnV0aWxzLnRzP2U0M2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlck1vZGVsIH0gZnJvbSBcIi4uL21vZGVsc1wiO1xuaW1wb3J0IHsgZ2V0V29yZCB9IGZyb20gXCIuL3JhbmRvbS51dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tVXNlciA9ICgpOiBVc2VyTW9kZWwgPT4ge1xuICBjb25zdCBuYW1lID0gZ2V0V29yZCgpO1xuXG4gIHJldHVybiB7XG4gICAgaWQ6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwKSxcbiAgICBuYW1lLFxuICAgIGVtYWlsOiBgJHtuYW1lfUBsb2NhbC5sb2NhbGAsXG4gICAgYWdlOiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDApLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFJhbmRvbVVzZXJzID0gKGNvdW50ID0gMTApOiBVc2VyTW9kZWxbXSA9PiB7XG4gIHJldHVybiBBcnJheS5mcm9tKEFycmF5KGNvdW50KS5rZXlzKCkpLm1hcChnZXRSYW5kb21Vc2VyKTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0V29yZCIsImdldFJhbmRvbVVzZXIiLCJuYW1lIiwiaWQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJlbWFpbCIsImFnZSIsImdldFJhbmRvbVVzZXJzIiwiY291bnQiLCJBcnJheSIsImZyb20iLCJrZXlzIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/users.utils.ts\n");

/***/ }),

/***/ "__barrel_optimize__?names=Box,Button,Chip,Container,Stack,Typography!=!../../node_modules/@mui/material/index.js":
/*!************************************************************************************************************************!*\
  !*** __barrel_optimize__?names=Box,Button,Chip,Container,Stack,Typography!=!../../node_modules/@mui/material/index.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Box: () => (/* reexport default from dynamic */ _Box__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   Button: () => (/* reexport default from dynamic */ _Button__WEBPACK_IMPORTED_MODULE_1___default.a),\n/* harmony export */   Chip: () => (/* reexport default from dynamic */ _Chip__WEBPACK_IMPORTED_MODULE_2___default.a),\n/* harmony export */   Container: () => (/* reexport default from dynamic */ _Container__WEBPACK_IMPORTED_MODULE_3___default.a),\n/* harmony export */   Stack: () => (/* reexport safe */ _Stack__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   Typography: () => (/* reexport default from dynamic */ _Typography__WEBPACK_IMPORTED_MODULE_5___default.a)\n/* harmony export */ });\n/* harmony import */ var _Box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Box */ \"../../node_modules/@mui/material/node/Box/index.js\");\n/* harmony import */ var _Box__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Box__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button */ \"../../node_modules/@mui/material/node/Button/index.js\");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Button__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Chip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chip */ \"../../node_modules/@mui/material/node/Chip/index.js\");\n/* harmony import */ var _Chip__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Chip__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Container */ \"../../node_modules/@mui/material/node/Container/index.js\");\n/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Container__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _Stack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Stack */ \"../../node_modules/@mui/material/node/Stack/index.js\");\n/* harmony import */ var _Typography__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Typography */ \"../../node_modules/@mui/material/node/Typography/index.js\");\n/* harmony import */ var _Typography__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_Typography__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX19iYXJyZWxfb3B0aW1pemVfXz9uYW1lcz1Cb3gsQnV0dG9uLENoaXAsQ29udGFpbmVyLFN0YWNrLFR5cG9ncmFwaHkhPSEuLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNzQztBQUNNO0FBQ0o7QUFDVTtBQUNSO0FBQ1UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW5kZXguanM/NzU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQm94IH0gZnJvbSBcIi4vQm94XCJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQnV0dG9uIH0gZnJvbSBcIi4vQnV0dG9uXCJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2hpcCB9IGZyb20gXCIuL0NoaXBcIlxuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb250YWluZXIgfSBmcm9tIFwiLi9Db250YWluZXJcIlxuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdGFjayB9IGZyb20gXCIuL1N0YWNrXCJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVHlwb2dyYXBoeSB9IGZyb20gXCIuL1R5cG9ncmFwaHlcIiJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiQm94IiwiQnV0dG9uIiwiQ2hpcCIsIkNvbnRhaW5lciIsIlN0YWNrIiwiVHlwb2dyYXBoeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///__barrel_optimize__?names=Box,Button,Chip,Container,Stack,Typography!=!../../node_modules/@mui/material/index.js\n");

/***/ }),

/***/ "__barrel_optimize__?names=Box,Button,Typography!=!../../node_modules/@mui/material/index.js":
/*!***************************************************************************************************!*\
  !*** __barrel_optimize__?names=Box,Button,Typography!=!../../node_modules/@mui/material/index.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Box: () => (/* reexport default from dynamic */ _Box__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   Button: () => (/* reexport default from dynamic */ _Button__WEBPACK_IMPORTED_MODULE_1___default.a),\n/* harmony export */   Typography: () => (/* reexport default from dynamic */ _Typography__WEBPACK_IMPORTED_MODULE_2___default.a)\n/* harmony export */ });\n/* harmony import */ var _Box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Box */ \"../../node_modules/@mui/material/node/Box/index.js\");\n/* harmony import */ var _Box__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Box__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button */ \"../../node_modules/@mui/material/node/Button/index.js\");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Button__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Typography__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Typography */ \"../../node_modules/@mui/material/node/Typography/index.js\");\n/* harmony import */ var _Typography__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Typography__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX19iYXJyZWxfb3B0aW1pemVfXz9uYW1lcz1Cb3gsQnV0dG9uLFR5cG9ncmFwaHkhPSEuLi8uLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDc0M7QUFDTTtBQUNRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2luZGV4LmpzPzc1NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgeyBkZWZhdWx0IGFzIEJveCB9IGZyb20gXCIuL0JveFwiXG5leHBvcnQgeyBkZWZhdWx0IGFzIEJ1dHRvbiB9IGZyb20gXCIuL0J1dHRvblwiXG5leHBvcnQgeyBkZWZhdWx0IGFzIFR5cG9ncmFwaHkgfSBmcm9tIFwiLi9UeXBvZ3JhcGh5XCIiXSwibmFtZXMiOlsiZGVmYXVsdCIsIkJveCIsIkJ1dHRvbiIsIlR5cG9ncmFwaHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///__barrel_optimize__?names=Box,Button,Typography!=!../../node_modules/@mui/material/index.js\n");

/***/ }),

/***/ "__barrel_optimize__?names=Box,Divider,List,ListItem,ListItemButton,ListItemIcon,ListItemText,Typography!=!../../node_modules/@mui/material/index.js":
/*!***********************************************************************************************************************************************************!*\
  !*** __barrel_optimize__?names=Box,Divider,List,ListItem,ListItemButton,ListItemIcon,ListItemText,Typography!=!../../node_modules/@mui/material/index.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Box: () => (/* reexport default from dynamic */ _Box__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   Divider: () => (/* reexport default from dynamic */ _Divider__WEBPACK_IMPORTED_MODULE_1___default.a),\n/* harmony export */   List: () => (/* reexport default from dynamic */ _List__WEBPACK_IMPORTED_MODULE_2___default.a),\n/* harmony export */   ListItem: () => (/* reexport default from dynamic */ _ListItem__WEBPACK_IMPORTED_MODULE_3___default.a),\n/* harmony export */   ListItemButton: () => (/* reexport default from dynamic */ _ListItemButton__WEBPACK_IMPORTED_MODULE_4___default.a),\n/* harmony export */   ListItemIcon: () => (/* reexport default from dynamic */ _ListItemIcon__WEBPACK_IMPORTED_MODULE_5___default.a),\n/* harmony export */   ListItemText: () => (/* reexport default from dynamic */ _ListItemText__WEBPACK_IMPORTED_MODULE_6___default.a),\n/* harmony export */   Typography: () => (/* reexport default from dynamic */ _Typography__WEBPACK_IMPORTED_MODULE_7___default.a)\n/* harmony export */ });\n/* harmony import */ var _Box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Box */ \"../../node_modules/@mui/material/node/Box/index.js\");\n/* harmony import */ var _Box__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Box__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Divider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Divider */ \"../../node_modules/@mui/material/node/Divider/index.js\");\n/* harmony import */ var _Divider__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Divider__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./List */ \"../../node_modules/@mui/material/node/List/index.js\");\n/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_List__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _ListItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListItem */ \"../../node_modules/@mui/material/node/ListItem/index.js\");\n/* harmony import */ var _ListItem__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ListItem__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ListItemButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListItemButton */ \"../../node_modules/@mui/material/node/ListItemButton/index.js\");\n/* harmony import */ var _ListItemButton__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ListItemButton__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ListItemIcon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListItemIcon */ \"../../node_modules/@mui/material/node/ListItemIcon/index.js\");\n/* harmony import */ var _ListItemIcon__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _ListItemText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ListItemText */ \"../../node_modules/@mui/material/node/ListItemText/index.js\");\n/* harmony import */ var _ListItemText__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ListItemText__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _Typography__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Typography */ \"../../node_modules/@mui/material/node/Typography/index.js\");\n/* harmony import */ var _Typography__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_Typography__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX19iYXJyZWxfb3B0aW1pemVfXz9uYW1lcz1Cb3gsRGl2aWRlcixMaXN0LExpc3RJdGVtLExpc3RJdGVtQnV0dG9uLExpc3RJdGVtSWNvbixMaXN0SXRlbVRleHQsVHlwb2dyYXBoeSE9IS4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNzQztBQUNRO0FBQ047QUFDUTtBQUNZO0FBQ0o7QUFDQTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2luZGV4LmpzPzc1NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgeyBkZWZhdWx0IGFzIEJveCB9IGZyb20gXCIuL0JveFwiXG5leHBvcnQgeyBkZWZhdWx0IGFzIERpdmlkZXIgfSBmcm9tIFwiLi9EaXZpZGVyXCJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGlzdCB9IGZyb20gXCIuL0xpc3RcIlxuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaXN0SXRlbSB9IGZyb20gXCIuL0xpc3RJdGVtXCJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGlzdEl0ZW1CdXR0b24gfSBmcm9tIFwiLi9MaXN0SXRlbUJ1dHRvblwiXG5leHBvcnQgeyBkZWZhdWx0IGFzIExpc3RJdGVtSWNvbiB9IGZyb20gXCIuL0xpc3RJdGVtSWNvblwiXG5leHBvcnQgeyBkZWZhdWx0IGFzIExpc3RJdGVtVGV4dCB9IGZyb20gXCIuL0xpc3RJdGVtVGV4dFwiXG5leHBvcnQgeyBkZWZhdWx0IGFzIFR5cG9ncmFwaHkgfSBmcm9tIFwiLi9UeXBvZ3JhcGh5XCIiXSwibmFtZXMiOlsiZGVmYXVsdCIsIkJveCIsIkRpdmlkZXIiLCJMaXN0IiwiTGlzdEl0ZW0iLCJMaXN0SXRlbUJ1dHRvbiIsIkxpc3RJdGVtSWNvbiIsIkxpc3RJdGVtVGV4dCIsIlR5cG9ncmFwaHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///__barrel_optimize__?names=Box,Divider,List,ListItem,ListItemButton,ListItemIcon,ListItemText,Typography!=!../../node_modules/@mui/material/index.js\n");

/***/ }),

/***/ "../../packages/core/dist/index.cjs.js":
/*!*********************************************!*\
  !*** ../../packages/core/dist/index.cjs.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    AppEvents: ()=>AppEvents,\n    AppManager: ()=>AppManager,\n    Cache: ()=>Cache,\n    Client: ()=>Client,\n    Dispatcher: ()=>Dispatcher,\n    DispatcherRequestType: ()=>DispatcherRequestType,\n    HttpMethodsEnum: ()=>HttpMethodsEnum,\n    LoggerManager: ()=>LoggerManager,\n    Request: ()=>Request,\n    RequestEffect: ()=>RequestEffect,\n    RequestManager: ()=>RequestManager,\n    Time: ()=>Time,\n    adapter: ()=>adapter3,\n    appManagerInitialOptions: ()=>appManagerInitialOptions,\n    canRetryRequest: ()=>canRetryRequest,\n    defaultTimeout: ()=>defaultTimeout,\n    getAbortByIdEventKey: ()=>getAbortByIdEventKey,\n    getAbortEventKey: ()=>getAbortEventKey,\n    getAdapterBindings: ()=>getAdapterBindings,\n    getAdapterHeaders: ()=>getAdapterHeaders,\n    getAdapterPayload: ()=>getAdapterPayload,\n    getAppManagerEvents: ()=>getAppManagerEvents,\n    getCacheData: ()=>getCacheData,\n    getCacheEvents: ()=>getCacheEvents,\n    getCacheIdKey: ()=>getCacheIdKey,\n    getCacheKey: ()=>getCacheKey,\n    getDispatcherChangeEventKey: ()=>getDispatcherChangeEventKey,\n    getDispatcherDrainedEventKey: ()=>getDispatcherDrainedEventKey,\n    getDispatcherEvents: ()=>getDispatcherEvents,\n    getDispatcherStatusEventKey: ()=>getDispatcherStatusEventKey,\n    getDownloadProgressEventKey: ()=>getDownloadProgressEventKey,\n    getDownloadProgressIdEventKey: ()=>getDownloadProgressIdEventKey,\n    getErrorMessage: ()=>getErrorMessage,\n    getInvalidateEventKey: ()=>getInvalidateEventKey,\n    getIsEqualTimestamp: ()=>getIsEqualTimestamp,\n    getLoadingEventKey: ()=>getLoadingEventKey,\n    getLoadingIdEventKey: ()=>getLoadingIdEventKey,\n    getProgressData: ()=>getProgressData,\n    getProgressValue: ()=>getProgressValue,\n    getRemoveEventKey: ()=>getRemoveEventKey,\n    getRemoveIdEventKey: ()=>getRemoveIdEventKey,\n    getRequestDispatcher: ()=>getRequestDispatcher,\n    getRequestEta: ()=>getRequestEta,\n    getRequestKey: ()=>getRequestKey,\n    getRequestManagerEvents: ()=>getRequestManagerEvents,\n    getRequestStartEventKey: ()=>getRequestStartEventKey,\n    getRequestStartIdEventKey: ()=>getRequestStartIdEventKey,\n    getRequestType: ()=>getRequestType,\n    getResponseEventKey: ()=>getResponseEventKey,\n    getResponseHeaders: ()=>getResponseHeaders,\n    getResponseIdEventKey: ()=>getResponseIdEventKey,\n    getResponseStartEventKey: ()=>getResponseStartEventKey,\n    getResponseStartIdEventKey: ()=>getResponseStartIdEventKey,\n    getSimpleKey: ()=>getSimpleKey,\n    getTime: ()=>getTime,\n    getUniqueRequestId: ()=>getUniqueRequestId,\n    getUploadProgressEventKey: ()=>getUploadProgressEventKey,\n    getUploadProgressIdEventKey: ()=>getUploadProgressIdEventKey,\n    hasDocument: ()=>hasDocument,\n    hasWindow: ()=>hasWindow,\n    hydrate: ()=>hydrate,\n    interceptRequest: ()=>interceptRequest,\n    interceptResponse: ()=>interceptResponse,\n    logger: ()=>logger,\n    loggerIconLevels: ()=>loggerIconLevels,\n    loggerStyles: ()=>loggerStyles,\n    mocker: ()=>mocker,\n    onDocumentEvent: ()=>onDocumentEvent,\n    onWindowEvent: ()=>onWindowEvent,\n    parseErrorResponse: ()=>parseErrorResponse,\n    parseResponse: ()=>parseResponse,\n    sendRequest: ()=>sendRequest,\n    serialize: ()=>serialize,\n    severity: ()=>severity,\n    stringifyDefaultOptions: ()=>stringifyDefaultOptions,\n    stringifyKey: ()=>stringifyKey,\n    stringifyQueryParams: ()=>stringifyQueryParams,\n    stringifyValue: ()=>stringifyValue,\n    xhrExtra: ()=>xhrExtra\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/effect/request.effect.ts\nvar RequestEffect = class {\n    constructor(config){\n        this.config = config;\n        this.getEffectKey = ()=>{\n            return this.config.effectKey;\n        };\n        this.onTrigger = (request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onTrigger) == null ? void 0 : _b.call(_a, request);\n        };\n        this.onStart = (request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onStart) == null ? void 0 : _b.call(_a, request);\n        };\n        this.onSuccess = (response, request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onSuccess) == null ? void 0 : _b.call(_a, response, request);\n        };\n        this.onError = (response, request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onError) == null ? void 0 : _b.call(_a, response, request);\n        };\n        this.onFinished = (response, request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onFinished) == null ? void 0 : _b.call(_a, response, request);\n        };\n    }\n};\n// src/constants/time.constants.ts\nvar Time = /* @__PURE__ */ ((Time2)=>{\n    Time2[Time2[\"SEC\"] = 1e3] = \"SEC\";\n    Time2[Time2[\"MIN\"] = 6e4] = \"MIN\";\n    Time2[Time2[\"HOUR\"] = 36e5] = \"HOUR\";\n    Time2[Time2[\"DAY\"] = 864e5] = \"DAY\";\n    Time2[Time2[\"WEEK\"] = 6048e5] = \"WEEK\";\n    Time2[Time2[\"MONTH_30\"] = 2592e6] = \"MONTH_30\";\n    Time2[Time2[\"MONTH_31\"] = 26784e5] = \"MONTH_31\";\n    Time2[Time2[\"YEAR\"] = 31536e6] = \"YEAR\";\n    Time2[Time2[\"YEAR_LEAP\"] = 316224e5] = \"YEAR_LEAP\";\n    return Time2;\n})(Time || {});\n// src/adapter/adapter.constants.ts\nvar defaultTimeout = 1e3 /* SEC */  * 5;\nvar xhrExtra = {\n    headers: {}\n};\n// src/adapter/adapter.browser.ts\nvar adapter = (request, requestId)=>__async(void 0, null, function*() {\n        const { makeRequest, fullUrl, config, payload, headers, onError, onResponseEnd, onTimeoutError, onRequestEnd, createAbortListener, onResponseProgress, onRequestProgress, onResponseStart, onBeforeRequest, onRequestStart, onSuccess } = yield getAdapterBindings(request, requestId, 0, {\n            headers: {}\n        });\n        const { method = \"GET\" } = request;\n        return makeRequest((resolve)=>{\n            const xhr = new XMLHttpRequest();\n            xhr.timeout = defaultTimeout;\n            const abort = ()=>xhr.abort();\n            Object.entries(config).forEach(([name, value])=>{\n                xhr[name] = value;\n            });\n            xhr.open(method, fullUrl, true);\n            Object.entries(headers).forEach(([name, value])=>xhr.setRequestHeader(name, value));\n            const unmountListener = createAbortListener(0, xhrExtra, abort, resolve);\n            xhr.upload.onprogress = onRequestProgress;\n            xhr.onloadstart = ()=>{\n                onRequestEnd();\n                onResponseStart();\n            };\n            xhr.onprogress = onResponseProgress;\n            xhr.onloadend = ()=>{\n                onResponseEnd();\n                unmountListener();\n            };\n            xhr.ontimeout = ()=>onTimeoutError(0, xhrExtra, resolve);\n            xhr.onreadystatechange = (e)=>{\n                const event = e;\n                const finishedState = 4;\n                if (event.target && event.target.readyState === finishedState) {\n                    const { status } = event.target;\n                    const success = String(status).startsWith(\"2\") || String(status).startsWith(\"3\");\n                    const responseHeaders = getResponseHeaders(xhr.getAllResponseHeaders());\n                    if (success) {\n                        const data = parseResponse(event.target.response);\n                        onSuccess(data, status, {\n                            headers: responseHeaders\n                        }, resolve);\n                    } else {\n                        const data = parseErrorResponse(event.target.response);\n                        onError(data, status, {\n                            headers: responseHeaders\n                        }, resolve);\n                    }\n                }\n            };\n            onBeforeRequest();\n            onRequestStart();\n            xhr.send(payload);\n        });\n    });\n// src/adapter/adapter.server.ts\nvar import_http = __toESM(__webpack_require__(/*! http */ \"http\"));\nvar import_https = __toESM(__webpack_require__(/*! https */ \"https\"));\n// src/constants/http.constants.ts\nvar HttpMethodsEnum = /* @__PURE__ */ ((HttpMethodsEnum2)=>{\n    HttpMethodsEnum2[\"get\"] = \"GET\";\n    HttpMethodsEnum2[\"post\"] = \"POST\";\n    HttpMethodsEnum2[\"put\"] = \"PUT\";\n    HttpMethodsEnum2[\"patch\"] = \"PATCH\";\n    HttpMethodsEnum2[\"delete\"] = \"DELETE\";\n    return HttpMethodsEnum2;\n})(HttpMethodsEnum || {});\n// src/adapter/adapter.server.ts\nvar adapter2 = (request, requestId)=>__async(void 0, null, function*() {\n        const { makeRequest, fullUrl, config, headers, payload, onError, onResponseEnd, onTimeoutError, onRequestEnd, createAbortListener, onResponseProgress, onResponseStart, onBeforeRequest, onRequestStart, onSuccess } = yield getAdapterBindings(request, requestId, 0, xhrExtra);\n        const { method = \"GET\" /* get */ , client } = request;\n        const httpClient = client.url.includes(\"https://\") ? import_https.default : import_http.default;\n        const options = {\n            method,\n            headers,\n            timeout: defaultTimeout\n        };\n        Object.entries(config).forEach(([name, value])=>{\n            options[name] = value;\n        });\n        let unmountListener = ()=>null;\n        onBeforeRequest();\n        if (payload) {\n            options.headers[\"Content-Length\"] = Buffer.byteLength(JSON.stringify(payload));\n        }\n        const requestUrl = !fullUrl.startsWith(\"http\") ? `http://${fullUrl}` : fullUrl;\n        return makeRequest((resolve)=>{\n            const httpRequest = httpClient.request(requestUrl, options, (response)=>{\n                response.setEncoding(\"utf8\");\n                unmountListener = createAbortListener(0, xhrExtra, response.destroy, resolve);\n                let chunks = \"\";\n                const totalDownloadBytes = Number(response.headers[\"content-length\"]);\n                let downloadedBytes = 0;\n                onRequestStart();\n                response.on(\"data\", (chunk)=>{\n                    if (!chunks) {\n                        onRequestEnd();\n                        onResponseStart();\n                    }\n                    downloadedBytes += chunk.length;\n                    chunks += chunk;\n                    onResponseProgress({\n                        total: totalDownloadBytes,\n                        loaded: downloadedBytes\n                    });\n                });\n                response.on(\"end\", ()=>{\n                    const { statusCode } = response;\n                    const success = String(statusCode).startsWith(\"2\") || String(statusCode).startsWith(\"3\");\n                    if (success) {\n                        const data = parseResponse(chunks);\n                        onSuccess(data, statusCode, {\n                            headers: response.headers\n                        }, resolve);\n                    } else {\n                        const data = parseErrorResponse(chunks);\n                        onError(data, statusCode, {\n                            headers: response.headers\n                        }, resolve);\n                    }\n                    unmountListener();\n                    onResponseEnd();\n                });\n            });\n            httpRequest.on(\"timeout\", ()=>onTimeoutError(0, xhrExtra, resolve));\n            httpRequest.on(\"error\", (error)=>onError(error, 0, xhrExtra, resolve));\n            if (payload) {\n                httpRequest.write(payload);\n            }\n            httpRequest.end();\n        });\n    });\n// src/adapter/adapter.ts\nvar adapter3 = (request, requestId)=>__async(void 0, null, function*() {\n        if (typeof XMLHttpRequest !== \"undefined\") {\n            return adapter(request, requestId);\n        }\n        return adapter2(request, requestId);\n    });\n// src/adapter/adapter.utils.ts\nvar getErrorMessage = (errorCase)=>{\n    if (errorCase === \"timeout\") {\n        return new Error(\"Request timeout\");\n    }\n    if (errorCase === \"abort\") {\n        return new Error(\"Request cancelled\");\n    }\n    return new Error(\"Unexpected error\");\n};\nvar getResponseHeaders = (headersString)=>{\n    const arr = headersString.trim().split(/[\\r\\n]+/);\n    const headers = {};\n    arr.forEach((line)=>{\n        const parts = line.split(\": \");\n        const header = parts.shift();\n        const value = parts.join(\": \");\n        headers[header] = value;\n    });\n    return headers;\n};\nvar parseResponse = (response)=>{\n    try {\n        return JSON.parse(response);\n    } catch (err) {\n        return response;\n    }\n};\nvar parseErrorResponse = (response)=>{\n    return response ? parseResponse(response) : getErrorMessage();\n};\n// src/utils/uuid.utils.ts\nvar getUniqueRequestId = (key)=>{\n    return `${key}_${Date.now().toString(36)}_${Math.random().toString(36).substring(2)}`;\n};\n// src/utils/hydration.utils.ts\nvar serialize = (request, response, options)=>{\n    const { cacheKey } = request;\n    const data = response != null ? response : request.client.cache.get(cacheKey);\n    return __spreadProps(__spreadValues({}, options), {\n        // Keys to allow for easy serialization and deserialization\n        cacheKey,\n        // Data to be stored\n        timestamp: Date.now(),\n        data: JSON.stringify(data)\n    });\n};\nvar hydrate = (client, fallbacks, options)=>{\n    fallbacks == null ? void 0 : fallbacks.forEach((fallback)=>{\n        const _a = fallback, { cacheKey, data } = _a, fallbackOptions = __objRest(_a, [\n            \"cacheKey\",\n            \"data\"\n        ]);\n        const defaults = {\n            cache: true,\n            cacheTime: null,\n            garbageCollection: null,\n            override: false\n        };\n        const config = typeof options === \"function\" ? __spreadValues(__spreadValues(__spreadValues({}, defaults), fallbackOptions), options(fallback)) : __spreadValues(__spreadValues(__spreadValues({}, defaults), fallbackOptions), options);\n        if (!config.override) {\n            const cachedData = client.cache.get(cacheKey);\n            if (cachedData) {\n                return;\n            }\n        }\n        const parsedData = parseResponse(data);\n        client.cache.set(__spreadProps(__spreadValues({}, config), {\n            cacheKey\n        }), parsedData);\n    });\n};\n// src/request/request.ts\nvar Request = class _Request {\n    constructor(client, requestOptions, requestJSON){\n        this.client = client;\n        this.requestOptions = requestOptions;\n        this.requestJSON = requestJSON;\n        this.isMockEnabled = false;\n        this.setHeaders = (headers)=>{\n            return this.clone({\n                headers\n            });\n        };\n        this.setAuth = (auth)=>{\n            return this.clone({\n                auth\n            });\n        };\n        this.setParams = (params)=>{\n            return this.clone({\n                params\n            });\n        };\n        this.setData = (data)=>{\n            return this.clone({\n                data\n            });\n        };\n        this.setQueryParams = (queryParams)=>{\n            return this.clone({\n                queryParams\n            });\n        };\n        this.setOptions = (options)=>{\n            return this.clone({\n                options\n            });\n        };\n        this.setCancelable = (cancelable)=>{\n            return this.clone({\n                cancelable\n            });\n        };\n        this.setRetry = (retry)=>{\n            return this.clone({\n                retry\n            });\n        };\n        this.setRetryTime = (retryTime)=>{\n            return this.clone({\n                retryTime\n            });\n        };\n        this.setGarbageCollection = (garbageCollection)=>{\n            return this.clone({\n                garbageCollection\n            });\n        };\n        this.setCache = (cache)=>{\n            return this.clone({\n                cache\n            });\n        };\n        this.setCacheTime = (cacheTime)=>{\n            return this.clone({\n                cacheTime\n            });\n        };\n        this.setQueued = (queued)=>{\n            return this.clone({\n                queued\n            });\n        };\n        this.setAbortKey = (abortKey)=>{\n            this.updatedAbortKey = true;\n            return this.clone({\n                abortKey\n            });\n        };\n        this.setCacheKey = (cacheKey)=>{\n            this.updatedCacheKey = true;\n            return this.clone({\n                cacheKey\n            });\n        };\n        this.setQueueKey = (queueKey)=>{\n            this.updatedQueueKey = true;\n            return this.clone({\n                queueKey\n            });\n        };\n        this.setEffectKey = (effectKey)=>{\n            this.updatedEffectKey = true;\n            return this.clone({\n                effectKey\n            });\n        };\n        this.setDeduplicate = (deduplicate)=>{\n            return this.clone({\n                deduplicate\n            });\n        };\n        this.setDeduplicateTime = (deduplicateTime)=>{\n            return this.clone({\n                deduplicateTime\n            });\n        };\n        this.setUsed = (used)=>{\n            return this.clone({\n                used\n            });\n        };\n        this.setOffline = (offline)=>{\n            return this.clone({\n                offline\n            });\n        };\n        this.setMock = (mockData)=>{\n            const mockGenerator = function* mocked(mockedValues) {\n                if (Array.isArray(mockData)) {\n                    let iteration = 0;\n                    while(true){\n                        yield mockedValues[iteration];\n                        iteration = mockData.length === iteration + 1 ? 0 : iteration + 1;\n                    }\n                } else {\n                    while(true){\n                        yield mockData;\n                    }\n                }\n            };\n            this.mockData = mockData;\n            this.mock = mockGenerator(mockData);\n            this.isMockEnabled = true;\n            return this;\n        };\n        this.removeMock = ()=>{\n            this.mockData = null;\n            this.mock = null;\n            this.isMockEnabled = false;\n            return this;\n        };\n        this.setEnableMocking = (isMockEnabled)=>{\n            this.isMockEnabled = isMockEnabled;\n            return this;\n        };\n        /**\n     * Mappers\n     */ /**\n     * Map data before it gets send to the server\n     * @param dataMapper\n     * @returns\n     */ this.setDataMapper = (dataMapper)=>{\n            const cloned = this.clone(void 0);\n            cloned.dataMapper = dataMapper;\n            return cloned;\n        };\n        /**\n     * Map request before it gets send to the server\n     * @param requestMapper mapper of the request\n     * @returns new request\n     */ this.setRequestMapper = (requestMapper)=>{\n            const cloned = this.clone(void 0);\n            cloned.requestMapper = requestMapper;\n            return cloned;\n        };\n        /**\n     * Map the response to the new interface\n     * @param responseMapper our mapping callback\n     * @returns new response\n     */ this.setResponseMapper = (responseMapper)=>{\n            const cloned = this.clone();\n            cloned.responseMapper = responseMapper;\n            return cloned;\n        };\n        this.paramsMapper = (params, queryParams)=>{\n            let endpoint = this.requestOptions.endpoint;\n            if (params) {\n                Object.entries(params).forEach(([key, value])=>{\n                    endpoint = endpoint.replace(new RegExp(`:${key}`, \"g\"), String(value));\n                });\n            }\n            if (queryParams) {\n                endpoint += this.client.stringifyQueryParams(queryParams);\n            }\n            return endpoint;\n        };\n        this.hydrate = (data)=>{\n            this.client.cache.set(this, data);\n            return this;\n        };\n        this.abort = ()=>{\n            const { requestManager } = this.client;\n            requestManager.abortByKey(this.abortKey);\n            return this.clone();\n        };\n        /**\n     * Make a request without any side effects for cache or queues.\n     *\n     * Best way for making simple requests or using HF with the SSR.\n     * Method to use the request WITHOUT adding it to cache and queues.\n     * @param options\n     */ this.exec = (options)=>__async(this, null, function*() {\n                const { adapter: adapter4, requestManager } = this.client;\n                const request = this.clone(options);\n                const requestId = getUniqueRequestId(this.queueKey);\n                requestManager.addAbortController(this.abortKey, requestId);\n                const response = yield adapter4(request, requestId);\n                requestManager.removeAbortController(this.abortKey, requestId);\n                if (request.responseMapper) {\n                    return request.responseMapper(response);\n                }\n                return response;\n            });\n        /**\n     * Method used to perform requests with usage of cache and queues.\n     * @param options\n     */ this.send = (options)=>__async(this, null, function*() {\n                const _a = options || {}, { dispatcherType } = _a, rest = __objRest(_a, [\n                    \"dispatcherType\"\n                ]);\n                const request = this.clone(rest);\n                return sendRequest(request, options);\n            });\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C;\n        const { endpoint, headers, auth = true, method = client.defaultMethod, options, cancelable = false, retry = 0, retryTime = 500, garbageCollection = 6e4 /* MIN */  * 5, cache = true, cacheTime = 6e4 /* MIN */  * 5, queued = false, offline = true, abortKey, cacheKey, queueKey, effectKey, deduplicate = false, deduplicateTime = 10 } = __spreadValues(__spreadValues({}, (_b = (_a = this.client).requestDefaultOptions) == null ? void 0 : _b.call(_a, requestOptions)), requestOptions);\n        this.endpoint = (_c = requestJSON == null ? void 0 : requestJSON.endpoint) != null ? _c : endpoint;\n        this.headers = (_d = requestJSON == null ? void 0 : requestJSON.headers) != null ? _d : headers;\n        this.auth = (_e = requestJSON == null ? void 0 : requestJSON.auth) != null ? _e : auth;\n        this.method = method;\n        this.params = requestJSON == null ? void 0 : requestJSON.params;\n        this.data = requestJSON == null ? void 0 : requestJSON.data;\n        this.queryParams = requestJSON == null ? void 0 : requestJSON.queryParams;\n        this.options = (_f = requestJSON == null ? void 0 : requestJSON.options) != null ? _f : options;\n        this.cancelable = (_g = requestJSON == null ? void 0 : requestJSON.cancelable) != null ? _g : cancelable;\n        this.retry = (_h = requestJSON == null ? void 0 : requestJSON.retry) != null ? _h : retry;\n        this.retryTime = (_i = requestJSON == null ? void 0 : requestJSON.retryTime) != null ? _i : retryTime;\n        this.garbageCollection = (_j = requestJSON == null ? void 0 : requestJSON.garbageCollection) != null ? _j : garbageCollection;\n        this.cache = (_k = requestJSON == null ? void 0 : requestJSON.cache) != null ? _k : cache;\n        this.cacheTime = (_l = requestJSON == null ? void 0 : requestJSON.cacheTime) != null ? _l : cacheTime;\n        this.queued = (_m = requestJSON == null ? void 0 : requestJSON.queued) != null ? _m : queued;\n        this.offline = (_n = requestJSON == null ? void 0 : requestJSON.offline) != null ? _n : offline;\n        this.abortKey = (_p = (_o = requestJSON == null ? void 0 : requestJSON.abortKey) != null ? _o : abortKey) != null ? _p : this.client.abortKeyMapper(this);\n        this.cacheKey = (_r = (_q = requestJSON == null ? void 0 : requestJSON.cacheKey) != null ? _q : cacheKey) != null ? _r : this.client.cacheKeyMapper(this);\n        this.queueKey = (_t = (_s = requestJSON == null ? void 0 : requestJSON.queueKey) != null ? _s : queueKey) != null ? _t : this.client.queueKeyMapper(this);\n        this.effectKey = (_v = (_u = requestJSON == null ? void 0 : requestJSON.effectKey) != null ? _u : effectKey) != null ? _v : this.client.effectKeyMapper(this);\n        this.used = (_w = requestJSON == null ? void 0 : requestJSON.used) != null ? _w : false;\n        this.deduplicate = (_x = requestJSON == null ? void 0 : requestJSON.deduplicate) != null ? _x : deduplicate;\n        this.deduplicateTime = (_y = requestJSON == null ? void 0 : requestJSON.deduplicateTime) != null ? _y : deduplicateTime;\n        this.updatedAbortKey = (_z = requestJSON == null ? void 0 : requestJSON.updatedAbortKey) != null ? _z : false;\n        this.updatedCacheKey = (_A = requestJSON == null ? void 0 : requestJSON.updatedCacheKey) != null ? _A : false;\n        this.updatedQueueKey = (_B = requestJSON == null ? void 0 : requestJSON.updatedQueueKey) != null ? _B : false;\n        this.updatedEffectKey = (_C = requestJSON == null ? void 0 : requestJSON.updatedEffectKey) != null ? _C : false;\n    }\n    toJSON() {\n        return {\n            requestOptions: this.requestOptions,\n            endpoint: this.endpoint,\n            headers: this.headers,\n            auth: this.auth,\n            method: this.method,\n            params: this.params,\n            data: this.data,\n            queryParams: this.queryParams,\n            options: this.options,\n            cancelable: this.cancelable,\n            retry: this.retry,\n            retryTime: this.retryTime,\n            garbageCollection: this.garbageCollection,\n            cache: this.cache,\n            cacheTime: this.cacheTime,\n            queued: this.queued,\n            offline: this.offline,\n            abortKey: this.abortKey,\n            cacheKey: this.cacheKey,\n            queueKey: this.queueKey,\n            effectKey: this.effectKey,\n            used: this.used,\n            disableResponseInterceptors: this.requestOptions.disableResponseInterceptors,\n            disableRequestInterceptors: this.requestOptions.disableRequestInterceptors,\n            updatedAbortKey: this.updatedAbortKey,\n            updatedCacheKey: this.updatedCacheKey,\n            updatedQueueKey: this.updatedQueueKey,\n            updatedEffectKey: this.updatedEffectKey,\n            deduplicate: this.deduplicate,\n            deduplicateTime: this.deduplicateTime\n        };\n    }\n    clone(options) {\n        const json = this.toJSON();\n        const requestJSON = __spreadProps(__spreadValues(__spreadValues({}, json), options), {\n            params: options == null ? void 0 : options.params,\n            abortKey: this.updatedAbortKey ? (options == null ? void 0 : options.abortKey) || this.abortKey : void 0,\n            cacheKey: this.updatedCacheKey ? (options == null ? void 0 : options.cacheKey) || this.cacheKey : void 0,\n            queueKey: this.updatedQueueKey ? (options == null ? void 0 : options.queueKey) || this.queueKey : void 0,\n            endpoint: this.paramsMapper((options == null ? void 0 : options.params) || this.params, (options == null ? void 0 : options.queryParams) || this.queryParams),\n            queryParams: (options == null ? void 0 : options.queryParams) || this.queryParams,\n            // Typescript circular types issue - we have to leave any here\n            data: (options == null ? void 0 : options.data) || this.data\n        });\n        const cloned = new _Request(this.client, this.requestOptions, requestJSON);\n        cloned.dataMapper = this.dataMapper;\n        cloned.responseMapper = this.responseMapper;\n        cloned.requestMapper = this.requestMapper;\n        cloned.mockData = this.mockData;\n        cloned.mock = this.mock;\n        cloned.isMockEnabled = this.isMockEnabled;\n        return cloned;\n    }\n};\n// src/dispatcher/dispatcher.constants.ts\nvar DispatcherRequestType = /* @__PURE__ */ ((DispatcherRequestType2)=>{\n    DispatcherRequestType2[\"oneByOne\"] = \"one-by-one\";\n    DispatcherRequestType2[\"allAtOnce\"] = \"all-at-once\";\n    DispatcherRequestType2[\"previousCanceled\"] = \"previous-canceled\";\n    DispatcherRequestType2[\"deduplicated\"] = \"deduplicated\";\n    return DispatcherRequestType2;\n})(DispatcherRequestType || {});\n// src/dispatcher/dispatcher.events.ts\nvar getDispatcherEvents = (emitter)=>({\n        setDrained: (queueKey, values)=>{\n            emitter.emit(getDispatcherDrainedEventKey(queueKey), values);\n        },\n        setQueueStatus: (queueKey, values)=>{\n            emitter.emit(getDispatcherStatusEventKey(queueKey), values);\n        },\n        setQueueChanged: (queueKey, values)=>{\n            emitter.emit(getDispatcherChangeEventKey(queueKey), values);\n        },\n        onDrained: (queueKey, callback)=>{\n            emitter.on(getDispatcherDrainedEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDispatcherDrainedEventKey(queueKey), callback);\n        },\n        onQueueStatus: (queueKey, callback)=>{\n            emitter.on(getDispatcherStatusEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDispatcherStatusEventKey(queueKey), callback);\n        },\n        onQueueChange: (queueKey, callback)=>{\n            emitter.on(getDispatcherChangeEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDispatcherChangeEventKey(queueKey), callback);\n        }\n    });\n// src/dispatcher/dispatcher.ts\nvar import_events = __toESM(__webpack_require__(/*! events */ \"events\"));\nvar Dispatcher = class {\n    constructor(client, options){\n        this.client = client;\n        this.options = options;\n        this.emitter = new import_events.default();\n        this.events = getDispatcherEvents(this.emitter);\n        this.storage = /* @__PURE__ */ new Map();\n        this.requestCount = /* @__PURE__ */ new Map();\n        this.runningRequests = /* @__PURE__ */ new Map();\n        // ********************\n        // ********************\n        // Queue\n        // ********************\n        // ********************\n        /**\n     * Start request handling by queueKey\n     */ this.start = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            queue.stopped = false;\n            this.setQueue(queueKey, queue);\n            this.flushQueue(queueKey);\n            this.events.setQueueStatus(queueKey, queue);\n        };\n        /**\n     * Pause request queue, but not cancel already started requests\n     */ this.pause = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            queue.stopped = true;\n            this.setQueue(queueKey, queue);\n            this.events.setQueueStatus(queueKey, queue);\n        };\n        /**\n     * Stop request queue and cancel all started requests - those will be treated like not started\n     */ this.stop = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            queue.stopped = true;\n            this.setQueue(queueKey, queue);\n            this.cancelRunningRequests(queueKey);\n            this.events.setQueueStatus(queueKey, queue);\n        };\n        /**\n     * Return all\n     */ this.getQueuesKeys = ()=>{\n            return Array.from(this.storage.keys());\n        };\n        /**\n     * Return queue state object\n     */ this.getQueue = (queueKey)=>{\n            const initialQueueState = {\n                requests: [],\n                stopped: false\n            };\n            const storedEntity = this.storage.get(queueKey);\n            return storedEntity || initialQueueState;\n        };\n        /**\n     * Return request from queue state\n     */ this.getRequest = (queueKey, requestId)=>{\n            const initialQueueState = {\n                requests: [],\n                stopped: false\n            };\n            const storedEntity = this.storage.get(queueKey) || initialQueueState;\n            return storedEntity.requests.find((req)=>req.requestId === requestId);\n        };\n        /**\n     * Get value of the active queue status based on the stopped status\n     */ this.getIsActiveQueue = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            const hasAvailableRequests = queue.requests.some((req)=>!req.stopped);\n            const isRunningQueue = !queue.stopped;\n            return hasAvailableRequests && isRunningQueue;\n        };\n        /**\n     * Add new element to storage\n     */ this.addQueueElement = (queueKey, dispatcherDump)=>{\n            const queue = this.getQueue(queueKey);\n            queue.requests.push(dispatcherDump);\n            this.setQueue(queueKey, queue);\n        };\n        /**\n     * Set new queue storage value\n     */ this.setQueue = (queueKey, queue)=>{\n            var _a, _b;\n            this.storage.set(queueKey, queue);\n            (_b = (_a = this.options) == null ? void 0 : _a.onUpdateStorage) == null ? void 0 : _b.call(_a, queueKey, queue);\n            this.events.setQueueChanged(queueKey, queue);\n            return queue;\n        };\n        /**\n     * Clear requests from queue cache\n     */ this.clearQueue = (queueKey)=>{\n            var _a, _b;\n            const queue = this.getQueue(queueKey);\n            const newQueue = {\n                requests: [],\n                stopped: queue.stopped\n            };\n            this.storage.set(queueKey, newQueue);\n            (_b = (_a = this.options) == null ? void 0 : _a.onDeleteFromStorage) == null ? void 0 : _b.call(_a, queueKey, newQueue);\n            this.events.setQueueChanged(queueKey, newQueue);\n            return newQueue;\n        };\n        /**\n     * Method used to flush the queue requests\n     */ this.flushQueue = (queueKey)=>__async(this, null, function*() {\n                const queue = this.getQueue(queueKey);\n                const runningRequests = this.getRunningRequests(queueKey);\n                const queueElement = queue.requests.find((request)=>!request.stopped);\n                const isStopped = queue && queue.stopped;\n                const isOffline = !this.client.appManager.isOnline;\n                const isConcurrent = !(queueElement == null ? void 0 : queueElement.request.queued);\n                const isInactive = !runningRequests.length;\n                const isEmpty = !queueElement;\n                if (isStopped || isOffline || isEmpty) {\n                    this.logger.debug(\"Skipping queue trigger\", {\n                        isStopped,\n                        isOffline,\n                        isEmpty\n                    });\n                } else if (isConcurrent) {\n                    queue.requests.forEach((element)=>{\n                        if (!this.hasRunningRequest(queueKey, element.requestId)) {\n                            this.performRequest(element);\n                        }\n                    });\n                } else if (isInactive) {\n                    yield this.performRequest(queueElement);\n                    this.flushQueue(queueKey);\n                }\n            });\n        /**\n     * Flush all available requests from all queues\n     */ this.flush = ()=>__async(this, null, function*() {\n                const keys = this.getQueuesKeys();\n                for (const key of keys){\n                    const storageElement = this.getQueue(key);\n                    if (storageElement) {\n                        this.flushQueue(key);\n                    }\n                }\n            });\n        /**\n     * Clear all running requests and storage\n     */ this.clear = ()=>{\n            var _a, _b;\n            const keys = this.getQueuesKeys();\n            keys.forEach((queueKey)=>this.cancelRunningRequests(queueKey));\n            this.runningRequests.clear();\n            this.storage.clear();\n            (_b = (_a = this.options) == null ? void 0 : _a.onClearStorage) == null ? void 0 : _b.call(_a, this);\n        };\n        // ********************\n        // ********************\n        // Requests\n        // ********************\n        // ********************\n        /**\n     * Start particular request\n     */ this.startRequest = (queueKey, requestId)=>{\n            const queue = this.getQueue(queueKey);\n            const request = queue.requests.find((element)=>element.requestId === requestId);\n            if (request) {\n                request.stopped = false;\n                this.setQueue(queueKey, queue);\n                this.flushQueue(queueKey);\n                this.events.setQueueStatus(queueKey, queue);\n            }\n        };\n        /**\n     * Stop particular request\n     */ this.stopRequest = (queueKey, requestId)=>{\n            const queue = this.getQueue(queueKey);\n            const request = queue.requests.find((element)=>element.requestId === requestId);\n            if (request) {\n                request.stopped = true;\n                this.setQueue(queueKey, queue);\n                this.cancelRunningRequest(queueKey, requestId);\n                this.events.setQueueStatus(queueKey, queue);\n            }\n        };\n        /**\n     * Get currently running requests from all queueKeys\n     */ this.getAllRunningRequest = ()=>{\n            return Array.from(this.runningRequests.values()).flat();\n        };\n        /**\n     * Get currently running requests\n     */ this.getRunningRequests = (queueKey)=>{\n            return this.runningRequests.get(queueKey) || [];\n        };\n        /**\n     * Get running request by id\n     */ this.getRunningRequest = (queueKey, requestId)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            return runningRequests.find((req)=>req.requestId === requestId);\n        };\n        /**\n     * Add request to the running requests list\n     */ this.addRunningRequest = (queueKey, requestId, request)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            runningRequests.push({\n                requestId,\n                request,\n                timestamp: Date.now()\n            });\n            this.runningRequests.set(queueKey, runningRequests);\n        };\n        /**\n     * Get the value based on the currently running requests\n     */ this.hasRunningRequests = (queueKey)=>{\n            return !!this.getRunningRequests(queueKey).length;\n        };\n        /**\n     * Check if request is currently processing\n     */ this.hasRunningRequest = (queueKey, requestId)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            return !!runningRequests.find((req)=>req.requestId === requestId);\n        };\n        /**\n     * Cancel all started requests, but do NOT remove it from main storage\n     */ this.cancelRunningRequests = (queueKey)=>{\n            var _a;\n            (_a = this.runningRequests.get(queueKey)) == null ? void 0 : _a.forEach((request)=>{\n                this.client.requestManager.abortByRequestId(request.request.abortKey, request.requestId);\n            });\n            this.deleteRunningRequests(queueKey);\n        };\n        /**\n     * Cancel started request, but do NOT remove it from main storage\n     */ this.cancelRunningRequest = (queueKey, requestId)=>{\n            const requests = this.getRunningRequests(queueKey).filter((request)=>{\n                if (request.requestId === requestId) {\n                    this.client.requestManager.abortByRequestId(request.request.abortKey, request.requestId);\n                    return false;\n                }\n                return true;\n            });\n            this.runningRequests.set(queueKey, requests);\n        };\n        /**\n     * Delete all started requests, but do NOT clear it from queue and do NOT cancel them\n     */ this.deleteRunningRequests = (queueKey)=>{\n            this.runningRequests.set(queueKey, []);\n        };\n        /**\n     * Delete request by id, but do NOT clear it from queue and do NOT cancel them\n     */ this.deleteRunningRequest = (queueKey, requestId)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            this.runningRequests.set(queueKey, runningRequests.filter((req)=>req.requestId !== requestId));\n        };\n        /**\n     * Get count of requests from the same queueKey\n     */ this.getQueueRequestCount = (queueKey)=>{\n            return this.requestCount.get(queueKey) || 0;\n        };\n        /**\n     * Add request count to the queueKey\n     */ this.incrementQueueRequestCount = (queueKey)=>{\n            const count = this.requestCount.get(queueKey) || 0;\n            this.requestCount.set(queueKey, count + 1);\n        };\n        /**\n     * Create storage element from request\n     */ // eslint-disable-next-line class-methods-use-this\n        this.createStorageElement = (request)=>{\n            const requestId = getUniqueRequestId(request.queueKey);\n            const storageElement = {\n                requestId,\n                timestamp: +/* @__PURE__ */ new Date(),\n                request,\n                retries: 0,\n                stopped: false\n            };\n            return storageElement;\n        };\n        // ********************\n        // ********************\n        // Dispatching\n        // ********************\n        // ********************\n        /**\n     * Add request to the dispatcher handler\n     */ this.add = (request)=>{\n            const { queueKey } = request;\n            const storageElement = this.createStorageElement(request);\n            const { requestId } = storageElement;\n            const queue = this.getQueue(queueKey);\n            const [latestRequest] = queue.requests.slice(-1);\n            const requestType = getRequestType(request, latestRequest);\n            this.logger.debug(\"Adding request to queue\", {\n                requestType,\n                request,\n                requestId\n            });\n            switch(requestType){\n                case \"one-by-one\" /* oneByOne */ :\n                    {\n                        this.addQueueElement(queueKey, storageElement);\n                        this.flushQueue(queueKey);\n                        return requestId;\n                    }\n                case \"previous-canceled\" /* previousCanceled */ :\n                    {\n                        this.cancelRunningRequests(queueKey);\n                        this.clearQueue(queueKey);\n                        this.addQueueElement(queueKey, storageElement);\n                        this.flushQueue(queueKey);\n                        return requestId;\n                    }\n                case \"deduplicated\" /* deduplicated */ :\n                    {\n                        return queue.requests[0].requestId;\n                    }\n                default:\n                    {\n                        this.addQueueElement(queueKey, storageElement);\n                        this.flushQueue(queueKey);\n                        return requestId;\n                    }\n            }\n        };\n        /**\n     * Delete from the storage and cancel request\n     */ this.delete = (queueKey, requestId, abortKey)=>{\n            var _a, _b;\n            this.logger.debug(\"Deleting request\", {\n                queueKey,\n                requestId,\n                abortKey\n            });\n            const queue = this.getQueue(queueKey);\n            const queueElement = queue.requests.find((req)=>req.requestId === requestId);\n            if (!queueElement) return;\n            queue.requests = queue.requests.filter((req)=>req.requestId !== requestId);\n            this.storage.set(queueKey, queue);\n            if (this.hasRunningRequest(queueKey, requestId)) {\n                this.deleteRunningRequest(queueKey, requestId);\n                this.client.requestManager.abortByRequestId(abortKey, requestId);\n            }\n            (_b = (_a = this.options) == null ? void 0 : _a.onDeleteFromStorage) == null ? void 0 : _b.call(_a, queueKey, queue);\n            this.events.setQueueChanged(queueKey, queue);\n            this.client.requestManager.events.emitRemove(queueKey, requestId, {\n                requestId,\n                request: queueElement.request\n            });\n            if (!queue.requests.length) {\n                this.events.setDrained(queueKey, queue);\n            }\n            return queue;\n        };\n        /**\n     * Request can run for some time, once it's done, we have to check if it's successful or if it was aborted\n     * It can be different once the previous call was set as cancelled and removed from queue before this request got resolved\n     */ this.performRequest = (storageElement)=>__async(this, null, function*() {\n                var _a;\n                const { request, requestId } = storageElement;\n                this.logger.info(\"Performing request\", {\n                    request,\n                    requestId\n                });\n                const { retry, retryTime, queueKey, cacheKey, abortKey, offline } = request;\n                const { adapter: adapter4, requestManager, cache, appManager } = this.client;\n                const canRetry = canRetryRequest(storageElement.retries, retry);\n                const isOffline = !appManager.isOnline && offline;\n                const isAlreadyRunning = this.hasRunningRequest(queueKey, requestId);\n                const isStopped = storageElement.stopped;\n                if (isOffline || isAlreadyRunning || isStopped) {\n                    return this.logger.warning(\"Unable to perform request\", {\n                        isOffline,\n                        isAlreadyRunning,\n                        isStopped\n                    });\n                }\n                this.addRunningRequest(queueKey, requestId, request);\n                requestManager.events.emitLoading(queueKey, requestId, {\n                    queueKey,\n                    requestId,\n                    loading: true,\n                    isRetry: !!storageElement.retries,\n                    isOffline\n                });\n                this.incrementQueueRequestCount(queueKey);\n                requestManager.addAbortController(abortKey, requestId);\n                const response = yield adapter4(request, requestId);\n                requestManager.removeAbortController(abortKey, requestId);\n                const isOfflineResponseStatus = !appManager.isOnline;\n                const isCancelMessage = getErrorMessage(\"abort\").message === ((_a = response.error) == null ? void 0 : _a.message);\n                const isCanceled = !this.hasRunningRequest(queueKey, requestId) || isCancelMessage;\n                this.deleteRunningRequest(queueKey, requestId);\n                const requestDetails = {\n                    isCanceled,\n                    isOffline: isOfflineResponseStatus,\n                    retries: storageElement.retries,\n                    timestamp: +/* @__PURE__ */ new Date()\n                };\n                requestManager.events.emitLoading(queueKey, requestId, {\n                    queueKey,\n                    requestId,\n                    loading: false,\n                    isRetry: !!storageElement.retries,\n                    isOffline\n                });\n                requestManager.events.emitResponse(cacheKey, requestId, response, requestDetails);\n                cache.set(request, __spreadValues(__spreadValues({}, response), requestDetails));\n                this.logger.info(\"Request finished\", {\n                    requestId,\n                    request,\n                    response,\n                    requestDetails\n                });\n                if (isCanceled) {\n                    const queue = this.getQueue(queueKey);\n                    const queueElement = queue.requests.find((req)=>req.requestId === requestId);\n                    if (!queue.stopped && !(queueElement == null ? void 0 : queueElement.stopped)) {\n                        this.logger.debug(\"Request paused\", {\n                            response,\n                            requestDetails,\n                            request\n                        });\n                        return this.delete(queueKey, requestId, abortKey);\n                    }\n                    return this.logger.debug(\"Request canceled\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                }\n                if (!response.success && isOfflineResponseStatus) {\n                    if (!offline) {\n                        this.logger.warning(\"Removing non-offline request\", {\n                            response,\n                            requestDetails,\n                            request\n                        });\n                        return this.delete(queueKey, requestId, abortKey);\n                    }\n                    return this.logger.debug(\"Awaiting for network restoration\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                }\n                if (response.success) {\n                    this.delete(queueKey, requestId, abortKey);\n                    return this.logger.debug(\"Successful response, removing request from queue.\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                }\n                if (!response.success && canRetry) {\n                    this.logger.debug(\"Waiting for retry\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                    setTimeout(()=>{\n                        this.logger.warning(\"Error response, performing retry\");\n                        this.performRequest(__spreadProps(__spreadValues({}, storageElement), {\n                            retries: storageElement.retries + 1\n                        }));\n                    }, retryTime || 0);\n                } else {\n                    this.logger.error(\"All retries have been used. Removing request from queue.\");\n                    this.delete(queueKey, requestId, abortKey);\n                }\n            });\n        var _a, _b, _c, _d;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        this.logger = client.loggerManager.init(\"Dispatcher\");\n        if ((_b = this.options) == null ? void 0 : _b.storage) {\n            this.storage = this.options.storage;\n        }\n        this.client.appManager.events.onOnline(()=>{\n            this.flush();\n        });\n        (_d = (_c = this.options) == null ? void 0 : _c.onInitialization) == null ? void 0 : _d.call(_c, this);\n    }\n};\n// src/dispatcher/dispatcher.utils.ts\nvar getDispatcherDrainedEventKey = (key)=>{\n    return `${key}-drained-event`;\n};\nvar getDispatcherStatusEventKey = (key)=>{\n    return `${key}-status-event`;\n};\nvar getDispatcherChangeEventKey = (key)=>{\n    return `${key}-change-event`;\n};\nvar getIsEqualTimestamp = (currentTimestamp, threshold, queueTimestamp)=>{\n    if (!queueTimestamp) {\n        return false;\n    }\n    return queueTimestamp - currentTimestamp <= threshold;\n};\nvar canRetryRequest = (currentRetries, retry)=>{\n    if (retry && currentRetries < retry) {\n        return true;\n    }\n    return false;\n};\nvar getRequestType = (request, latestRequest)=>{\n    const { queued, cancelable, deduplicate } = request;\n    const canDeduplicate = latestRequest ? +/* @__PURE__ */ new Date() - latestRequest.timestamp <= request.deduplicateTime : false;\n    if (queued) {\n        return \"one-by-one\" /* oneByOne */ ;\n    }\n    if (cancelable) {\n        return \"previous-canceled\" /* previousCanceled */ ;\n    }\n    if (canDeduplicate && deduplicate) {\n        return \"deduplicated\" /* deduplicated */ ;\n    }\n    return \"all-at-once\" /* allAtOnce */ ;\n};\n// src/request/request.utils.ts\nvar stringifyKey = (value)=>{\n    try {\n        if (typeof value === \"string\") return value;\n        if (value === void 0 || value === null) return \"\";\n        const data = JSON.stringify(value);\n        if (typeof data !== \"string\") throw new Error();\n        return data;\n    } catch (_) {\n        return \"\";\n    }\n};\nvar getProgressValue = ({ loaded, total })=>{\n    if (!loaded || !total) return 0;\n    return Number((loaded * 100 / total).toFixed(0));\n};\nvar getRequestEta = (startDate, progressDate, { total, loaded })=>{\n    const timeElapsed = +progressDate - +startDate || 1;\n    const uploadSpeed = loaded / timeElapsed;\n    const totalValue = Math.max(total, loaded);\n    const sizeLeft = totalValue - loaded;\n    const estimatedTimeValue = uploadSpeed ? sizeLeft / uploadSpeed : null;\n    const timeLeft = totalValue === loaded ? 0 : estimatedTimeValue;\n    return {\n        timeLeft,\n        sizeLeft\n    };\n};\nvar getProgressData = (requestStartTime, progressDate, progressEvent)=>{\n    const { total, loaded } = progressEvent;\n    if (Number.isNaN(total) || Number.isNaN(loaded)) {\n        return {\n            progress: 0,\n            timeLeft: 0,\n            sizeLeft: 0,\n            total: 0,\n            loaded: 0,\n            startTimestamp: +requestStartTime\n        };\n    }\n    const { timeLeft, sizeLeft } = getRequestEta(requestStartTime, progressDate, progressEvent);\n    return {\n        progress: getProgressValue(progressEvent),\n        timeLeft,\n        sizeLeft,\n        total,\n        loaded,\n        startTimestamp: +requestStartTime\n    };\n};\nvar getSimpleKey = (request)=>{\n    return `${request.method}_${request.requestOptions.endpoint}_${request.cancelable}`;\n};\nvar getRequestKey = (request, useInitialValues)=>{\n    const methodKey = stringifyKey(request.method);\n    const endpointKey = useInitialValues ? request.requestOptions.endpoint : stringifyKey(request.endpoint);\n    return `${methodKey}_${endpointKey}`;\n};\nvar getRequestDispatcher = (request, dispatcherType = \"auto\")=>{\n    const { fetchDispatcher, submitDispatcher } = request.client;\n    const isGet = request.method === \"GET\" /* get */ ;\n    const isFetchDispatcher = dispatcherType === \"auto\" && isGet || dispatcherType === \"fetch\";\n    const dispatcher = isFetchDispatcher ? fetchDispatcher : submitDispatcher;\n    return [\n        dispatcher,\n        isFetchDispatcher\n    ];\n};\nvar sendRequest = (request, options)=>{\n    const { requestManager } = request.client;\n    const [dispatcher] = getRequestDispatcher(request, options == null ? void 0 : options.dispatcherType);\n    return new Promise((resolve)=>{\n        var _a;\n        let isResolved = false;\n        const requestId = dispatcher.add(request);\n        (_a = options == null ? void 0 : options.onSettle) == null ? void 0 : _a.call(options, requestId, request);\n        const unmountRequestStart = requestManager.events.onRequestStartById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onRequestStart) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountResponseStart = requestManager.events.onResponseStartById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onResponseStart) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountUpload = requestManager.events.onUploadProgressById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onUploadProgress) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountDownload = requestManager.events.onDownloadProgressById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onDownloadProgress) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountResponse = requestManager.events.onResponseById(requestId, (response, details)=>{\n            var _a2;\n            isResolved = true;\n            const mapping = (_a2 = request.responseMapper) == null ? void 0 : _a2.call(request, response);\n            const isOfflineStatus = request.offline && details.isOffline;\n            const willRetry = canRetryRequest(details.retries, request.retry);\n            const handleResponse = (success, data)=>{\n                var _a3;\n                if (!success && isOfflineStatus) return;\n                if (!success && willRetry) return;\n                (_a3 = options == null ? void 0 : options.onResponse) == null ? void 0 : _a3.call(options, data, details);\n                resolve(data);\n                umountAll();\n            };\n            if (mapping instanceof Promise) {\n                (()=>__async(void 0, null, function*() {\n                        const responseData = yield mapping;\n                        const { success } = responseData;\n                        handleResponse(success, responseData);\n                    }))();\n            } else {\n                const data = mapping || response;\n                const { success } = data;\n                handleResponse(success, data);\n            }\n        });\n        const unmountRemoveQueueElement = requestManager.events.onRemoveById(requestId, (...props)=>{\n            var _a2;\n            if (!isResolved) {\n                (_a2 = options == null ? void 0 : options.onRemove) == null ? void 0 : _a2.call(options, ...props);\n                resolve({\n                    data: null,\n                    status: null,\n                    success: null,\n                    error: getErrorMessage(\"deleted\"),\n                    extra: request.client.defaultExtra\n                });\n                umountAll();\n            }\n        });\n        function umountAll() {\n            unmountRequestStart();\n            unmountResponseStart();\n            unmountUpload();\n            unmountDownload();\n            unmountResponse();\n            unmountRemoveQueueElement();\n        }\n    });\n};\n// src/mocker/mocker.ts\nvar mocker = (_0, _1)=>__async(void 0, [\n        _0,\n        _1\n    ], function*(request, { onError, onResponseEnd, onTimeoutError, onRequestEnd, createAbortListener, onResponseProgress, onRequestProgress, onResponseStart, onBeforeRequest, onRequestStart, onSuccess }) {\n        const mock = request.mock.next();\n        const result = mock.value instanceof Function ? yield mock.value(request) : mock.value;\n        return new Promise((resolve)=>{\n            const { data, status = 200, success = true, extra, config } = result;\n            const { requestTime = 20, responseTime = 20, totalUploaded = 1, totalDownloaded = 1, timeout = false } = config || {};\n            createAbortListener(0, {}, ()=>{}, resolve);\n            onBeforeRequest();\n            onRequestStart();\n            const progress = (totalTime, totalSize, progressFunction)=>new Promise((resolveProgress)=>{\n                    const interval = 20;\n                    const dataStart = +/* @__PURE__ */ new Date();\n                    const chunkSize = Math.floor(totalSize / Math.floor(totalTime / Math.min(totalTime, interval)));\n                    let currentlyLoaded = 0;\n                    const timer = setInterval(function handleProgressInterval() {\n                        const currentTime = Math.min(totalTime, +/* @__PURE__ */ new Date() - dataStart);\n                        currentlyLoaded += currentlyLoaded + chunkSize >= totalSize ? totalSize - currentlyLoaded : chunkSize;\n                        if (currentTime >= totalTime) {\n                            resolveProgress(true);\n                            clearInterval(timer);\n                        } else {\n                            progressFunction({\n                                total: totalSize,\n                                loaded: currentlyLoaded\n                            });\n                        }\n                    }, interval);\n                });\n            const getResponse = ()=>__async(void 0, null, function*() {\n                    yield progress(requestTime, totalUploaded, onRequestProgress);\n                    onRequestEnd();\n                    onResponseStart();\n                    yield progress(responseTime, totalDownloaded, onResponseProgress);\n                    if (success) {\n                        onSuccess(data, status, extra || {}, resolve);\n                    } else {\n                        onError(data, status, extra || {}, resolve);\n                    }\n                });\n            if (timeout) {\n                setTimeout(()=>onTimeoutError(0, extra || {}, resolve), 1);\n            } else {\n                setTimeout(getResponse, requestTime + responseTime + 1);\n            }\n            onResponseEnd();\n        });\n    });\n// src/adapter/adapter.bindings.ts\nvar getAdapterBindings = (req, requestId, systemErrorStatus, systemErrorExtra)=>__async(void 0, null, function*() {\n        const { url, requestManager, loggerManager, headerMapper, payloadMapper } = req.client;\n        const logger2 = loggerManager.init(\"Adapter\");\n        let processingError = null;\n        let requestStartTimestamp = null;\n        let responseStartTimestamp = null;\n        let request = req;\n        let requestTotal = 1;\n        let responseTotal = 1;\n        let previousRequestTotal = 0;\n        let previousResponseTotal = 0;\n        logger2.debug(`Starting request middleware callbacks`);\n        try {\n            request = yield request.client.__modifyRequest(req);\n            if (request.auth) {\n                request = yield request.client.__modifyAuth(req);\n            }\n            if (request.requestMapper) {\n                request = yield request.requestMapper(request, requestId);\n            }\n        } catch (err) {\n            processingError = err;\n        }\n        const { client, abortKey, queueKey, endpoint, data } = request;\n        const fullUrl = url + endpoint;\n        const effects = client.effects.filter((effect)=>request.effectKey === effect.getEffectKey());\n        const headers = headerMapper(request);\n        let payload = data;\n        try {\n            payload = payloadMapper(data);\n            if (request.dataMapper) {\n                payload = yield request.dataMapper(data);\n            }\n        } catch (err) {\n            processingError = err;\n        }\n        const config = __spreadValues({}, request.options);\n        const getRequestStartTimestamp = ()=>{\n            return requestStartTimestamp;\n        };\n        const getResponseStartTimestamp = ()=>{\n            return responseStartTimestamp;\n        };\n        const getTotal = (previousTotal, progress)=>{\n            if (!progress) return previousTotal;\n            const total = Number(progress.total || 0);\n            const loaded = Number(progress.loaded || 0);\n            return Math.max(total, loaded, previousTotal);\n        };\n        const handleRequestProgress = (startTimestamp, progressTimestamp, progressEvent)=>{\n            const progress = getProgressData(new Date(startTimestamp), new Date(progressTimestamp), progressEvent);\n            if (previousRequestTotal !== 100) {\n                previousRequestTotal = progress.total;\n                requestManager.events.emitUploadProgress(queueKey, requestId, progress, {\n                    requestId,\n                    request\n                });\n            }\n        };\n        const handleResponseProgress = (startTimestamp, progressTimestamp, progressEvent)=>{\n            const progress = getProgressData(new Date(startTimestamp), new Date(progressTimestamp), progressEvent);\n            if (previousResponseTotal !== 100) {\n                previousResponseTotal = progress.total;\n                requestManager.events.emitDownloadProgress(queueKey, requestId, progress, {\n                    requestId,\n                    request\n                });\n            }\n        };\n        const onBeforeRequest = ()=>{\n            effects.forEach((effect)=>effect.onTrigger(request));\n        };\n        const onRequestStart = (progress)=>{\n            effects.forEach((action)=>action.onStart(request));\n            if (progress == null ? void 0 : progress.total) {\n                requestTotal = getTotal(requestTotal, progress);\n            }\n            const initialPayload = {\n                total: requestTotal,\n                loaded: (progress == null ? void 0 : progress.loaded) || 0\n            };\n            requestStartTimestamp = +/* @__PURE__ */ new Date();\n            handleRequestProgress(requestStartTimestamp, requestStartTimestamp, initialPayload);\n            requestManager.events.emitRequestStart(queueKey, requestId, {\n                requestId,\n                request\n            });\n            return requestStartTimestamp;\n        };\n        const onRequestProgress = (progress)=>{\n            if (!requestStartTimestamp) {\n                requestStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            requestTotal = getTotal(requestTotal, progress);\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            handleRequestProgress(requestStartTimestamp, progressTimestamp, {\n                total: requestTotal,\n                loaded: progress.loaded || 0\n            });\n            return progressTimestamp;\n        };\n        const onRequestEnd = ()=>{\n            if (!requestStartTimestamp) {\n                requestStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            handleRequestProgress(requestStartTimestamp, progressTimestamp, {\n                total: requestTotal,\n                loaded: requestTotal\n            });\n            return progressTimestamp;\n        };\n        const onResponseStart = (progress)=>{\n            responseStartTimestamp = +/* @__PURE__ */ new Date();\n            responseTotal = getTotal(responseTotal, progress);\n            const initialPayload = {\n                total: responseTotal,\n                loaded: (progress == null ? void 0 : progress.loaded) || 0\n            };\n            handleResponseProgress(responseStartTimestamp, responseStartTimestamp, initialPayload);\n            requestManager.events.emitResponseStart(queueKey, requestId, {\n                requestId,\n                request\n            });\n            return responseStartTimestamp;\n        };\n        const onResponseProgress = (progress)=>{\n            if (!responseStartTimestamp) {\n                responseStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            responseTotal = getTotal(responseTotal, progress);\n            handleResponseProgress(responseStartTimestamp, progressTimestamp, {\n                total: progress.total || responseTotal,\n                loaded: progress.loaded || 0\n            });\n            return progressTimestamp;\n        };\n        const onResponseEnd = ()=>{\n            if (!responseStartTimestamp) {\n                responseStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            handleResponseProgress(responseStartTimestamp, progressTimestamp, {\n                total: responseTotal,\n                loaded: responseTotal\n            });\n            return progressTimestamp;\n        };\n        const onSuccess = (responseData, status, extra, resolve)=>__async(void 0, null, function*() {\n                let response = {\n                    data: responseData,\n                    error: null,\n                    success: true,\n                    status,\n                    extra\n                };\n                response = yield request.client.__modifyResponse(response, request);\n                response = yield request.client.__modifySuccessResponse(response, request);\n                effects.forEach((effect)=>effect.onSuccess(response, request));\n                effects.forEach((effect)=>effect.onFinished(response, request));\n                resolve(response);\n                return response;\n            });\n        const onError = (error, status, extra, resolve)=>__async(void 0, null, function*() {\n                let responseData = {\n                    data: null,\n                    status,\n                    error,\n                    success: false,\n                    extra\n                };\n                responseData = yield request.client.__modifyResponse(responseData, request);\n                responseData = yield request.client.__modifyErrorResponse(responseData, request);\n                effects.forEach((effect)=>effect.onError(responseData, request));\n                effects.forEach((effect)=>effect.onFinished(responseData, request));\n                resolve(responseData);\n                return responseData;\n            });\n        const onAbortError = (status, extra, resolve)=>{\n            const error = getErrorMessage(\"abort\");\n            return onError(error, status, extra, resolve);\n        };\n        const onTimeoutError = (status, extra, resolve)=>{\n            const error = getErrorMessage(\"timeout\");\n            return onError(error, status, extra, resolve);\n        };\n        const onUnexpectedError = (status, extra, resolve)=>{\n            const error = getErrorMessage();\n            return onError(error, status, extra, resolve);\n        };\n        const getAbortController = ()=>{\n            return requestManager.getAbortController(abortKey, requestId);\n        };\n        const createAbortListener = (status, abortExtra, callback, resolve)=>{\n            const controller = getAbortController();\n            if (!controller) {\n                throw new Error(\"Controller is not found\");\n            }\n            const fn = ()=>{\n                onAbortError(status, abortExtra, resolve);\n                callback();\n                requestManager.events.emitAbort(abortKey, requestId, request);\n            };\n            if (controller.signal.aborted) {\n                fn();\n            }\n            controller.signal.addEventListener(\"abort\", fn);\n            return ()=>controller.signal.removeEventListener(\"abort\", fn);\n        };\n        const makeRequest = (apiCall)=>{\n            if (processingError) {\n                return onError(processingError, systemErrorStatus, systemErrorExtra, ()=>null);\n            }\n            if (req.mock && req.isMockEnabled && req.client.isMockEnabled) {\n                return mocker(request, {\n                    onError,\n                    onResponseEnd,\n                    onTimeoutError,\n                    onRequestEnd,\n                    createAbortListener,\n                    onResponseProgress,\n                    onRequestProgress,\n                    onResponseStart,\n                    onBeforeRequest,\n                    onRequestStart,\n                    onSuccess\n                });\n            }\n            return new Promise(apiCall);\n        };\n        logger2.debug(`Finishing request bindings creation`, {\n            fullUrl,\n            data,\n            headers,\n            payload,\n            config\n        });\n        return {\n            fullUrl,\n            data,\n            headers,\n            payload,\n            config,\n            getAbortController,\n            getRequestStartTimestamp,\n            getResponseStartTimestamp,\n            createAbortListener,\n            onBeforeRequest,\n            onRequestStart,\n            onRequestProgress,\n            onRequestEnd,\n            onResponseStart,\n            onResponseProgress,\n            onResponseEnd,\n            onSuccess,\n            onAbortError,\n            onTimeoutError,\n            onUnexpectedError,\n            onError,\n            makeRequest\n        };\n    });\n// src/cache/cache.ts\nvar import_events2 = __toESM(__webpack_require__(/*! events */ \"events\"));\nvar Cache = class {\n    constructor(client, options){\n        this.client = client;\n        this.options = options;\n        this.emitter = new import_events2.default();\n        this.garbageCollectors = /* @__PURE__ */ new Map();\n        /**\n     * Set the cache data to the storage\n     * @param request\n     * @param response\n     * @returns\n     */ this.set = (request, response)=>{\n            var _a, _b, _c;\n            this.logger.debug(\"Processing cache response\", {\n                request,\n                response\n            });\n            const { cacheKey, cache, cacheTime, garbageCollection } = request;\n            const cachedData = this.storage.get(cacheKey);\n            const processedResponse = typeof response === \"function\" ? response(cachedData) : response;\n            const data = getCacheData(cachedData, processedResponse);\n            const newCacheData = __spreadProps(__spreadValues({}, data), {\n                cacheTime,\n                clearKey: this.clearKey,\n                garbageCollection\n            });\n            this.events.emitCacheData(cacheKey, newCacheData);\n            this.logger.debug(\"Emitting cache response\", {\n                request,\n                data\n            });\n            if (!cache) {\n                return this.logger.debug(\"Prevented saving response to cache\", {\n                    request,\n                    data\n                });\n            }\n            if (processedResponse.success) {\n                this.logger.debug(\"Saving response to cache storage\", {\n                    request,\n                    data\n                });\n                this.storage.set(cacheKey, newCacheData);\n                (_a = this.lazyStorage) == null ? void 0 : _a.set(cacheKey, newCacheData);\n                (_c = (_b = this.options) == null ? void 0 : _b.onChange) == null ? void 0 : _c.call(_b, cacheKey, newCacheData);\n                this.scheduleGarbageCollector(cacheKey);\n            }\n        };\n        /**\n     * Update the cache data with partial response data\n     * @param request\n     * @param partialResponse\n     * @returns\n     */ this.update = (request, partialResponse)=>{\n            this.logger.debug(\"Processing cache update\", {\n                request,\n                partialResponse\n            });\n            const { cacheKey } = request;\n            const cachedData = this.storage.get(cacheKey);\n            const processedResponse = typeof partialResponse === \"function\" ? partialResponse(cachedData) : partialResponse;\n            if (cachedData) {\n                this.set(request, __spreadValues(__spreadValues({}, cachedData), processedResponse));\n            }\n        };\n        /**\n     * Get particular record from storage by cacheKey. It will trigger lazyStorage to emit lazy load event for reading it's data.\n     * @param cacheKey\n     * @returns\n     */ this.get = (cacheKey)=>{\n            this.getLazyResource(cacheKey);\n            const cachedData = this.storage.get(cacheKey);\n            return cachedData;\n        };\n        /**\n     * Get sync storage keys, lazyStorage keys will not be included\n     * @returns\n     */ this.keys = ()=>{\n            const values = this.storage.keys();\n            return Array.from(values);\n        };\n        /**\n     * Delete record from storages and trigger invalidation event\n     * @param cacheKey\n     */ this.delete = (cacheKey)=>{\n            var _a, _b, _c;\n            this.logger.debug(\"Deleting cache element\", {\n                cacheKey\n            });\n            this.storage.delete(cacheKey);\n            (_b = (_a = this.options) == null ? void 0 : _a.onDelete) == null ? void 0 : _b.call(_a, cacheKey);\n            (_c = this.lazyStorage) == null ? void 0 : _c.delete(cacheKey);\n        };\n        /**\n     * Invalidate cache by cacheKey or partial matching with RegExp\n     * @param cacheKey\n     */ this.invalidate = (cacheKey)=>__async(this, null, function*() {\n                this.logger.debug(\"Revalidating cache element\", {\n                    cacheKey\n                });\n                const keys = yield this.getLazyKeys();\n                if (typeof cacheKey === \"string\") {\n                    this.events.emitInvalidation(cacheKey);\n                    this.delete(cacheKey);\n                } else {\n                    for (const entityKey of keys){\n                        if (cacheKey.test(entityKey)) {\n                            this.events.emitInvalidation(entityKey);\n                            this.delete(entityKey);\n                        }\n                    }\n                }\n            });\n        /**\n     * Used to receive data from lazy storage\n     * @param cacheKey\n     */ this.getLazyResource = (cacheKey)=>__async(this, null, function*() {\n                var _a;\n                const data = yield (_a = this.lazyStorage) == null ? void 0 : _a.get(cacheKey);\n                const syncData = this.storage.get(cacheKey);\n                const hasLazyData = this.lazyStorage && data;\n                if (hasLazyData) {\n                    const now = +/* @__PURE__ */ new Date();\n                    const isNewestData = syncData ? syncData.timestamp < data.timestamp : true;\n                    const isStaleData = data.cacheTime <= now - data.timestamp;\n                    const isValidLazyData = data.clearKey === this.clearKey;\n                    if (!isValidLazyData) {\n                        this.lazyStorage.delete(cacheKey);\n                    }\n                    if (isNewestData && !isStaleData && isValidLazyData) {\n                        this.storage.set(cacheKey, data);\n                        this.events.emitCacheData(cacheKey, data);\n                        return data;\n                    }\n                }\n                const isValidData = (syncData == null ? void 0 : syncData.clearKey) === this.clearKey;\n                if (syncData && !isValidData) {\n                    this.delete(cacheKey);\n                }\n                return syncData;\n            });\n        /**\n     * Used to receive keys from sync storage and lazy storage\n     * @param cacheKey\n     */ this.getLazyKeys = ()=>__async(this, null, function*() {\n                var _a;\n                const keys = yield (_a = this.lazyStorage) == null ? void 0 : _a.keys();\n                const asyncKeys = Array.from(keys || []);\n                const syncKeys = Array.from(this.storage.keys());\n                return [\n                    .../* @__PURE__ */ new Set([\n                        ...asyncKeys,\n                        ...syncKeys\n                    ])\n                ];\n            });\n        /**\n     * Schedule garbage collection for given key\n     * @param cacheKey\n     * @returns\n     */ this.scheduleGarbageCollector = (cacheKey)=>__async(this, null, function*() {\n                const cacheData = yield this.getLazyResource(cacheKey);\n                clearTimeout(this.garbageCollectors.get(cacheKey));\n                if (cacheData) {\n                    const timeLeft = cacheData.garbageCollection + cacheData.timestamp - +/* @__PURE__ */ new Date();\n                    if (cacheData.garbageCollection !== null && JSON.stringify(cacheData.garbageCollection) === \"null\") {\n                        this.logger.info(\"Cache value is Infinite\", {\n                            cacheKey\n                        });\n                    } else if (timeLeft >= 0) {\n                        this.garbageCollectors.set(cacheKey, setTimeout(()=>{\n                            if (this.client.appManager.isOnline) {\n                                this.logger.info(\"Garbage collecting cache element\", {\n                                    cacheKey\n                                });\n                                this.delete(cacheKey);\n                            }\n                        }, timeLeft));\n                    } else if (this.client.appManager.isOnline) {\n                        this.logger.info(\"Garbage collecting cache element\", {\n                            cacheKey\n                        });\n                        this.delete(cacheKey);\n                    }\n                }\n            });\n        /**\n     * Clear cache storages\n     */ this.clear = ()=>__async(this, null, function*() {\n                this.storage.clear();\n            });\n        var _a, _b, _c, _d, _e, _f;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        this.storage = ((_b = this.options) == null ? void 0 : _b.storage) || /* @__PURE__ */ new Map();\n        this.events = getCacheEvents(this.emitter);\n        (_d = (_c = this.options) == null ? void 0 : _c.onInitialization) == null ? void 0 : _d.call(_c, this);\n        this.clearKey = ((_e = this.options) == null ? void 0 : _e.clearKey) || \"\";\n        this.lazyStorage = (_f = this.options) == null ? void 0 : _f.lazyStorage;\n        this.logger = this.client.loggerManager.init(\"Cache\");\n        this.getLazyKeys().then((keys)=>{\n            keys.forEach(this.scheduleGarbageCollector);\n        });\n        this.client.appManager.events.onOnline(()=>{\n            this.getLazyKeys().then((keys)=>{\n                keys.forEach(this.scheduleGarbageCollector);\n            });\n        });\n    }\n};\n// src/cache/cache.utils.ts\nvar getCacheData = (previousResponse, response)=>{\n    const { data, success } = response;\n    const previousData = !success && previousResponse ? previousResponse.data : null;\n    const computedData = data || previousData;\n    return __spreadProps(__spreadValues({}, response), {\n        data: computedData\n    });\n};\nvar getInvalidateEventKey = (key)=>{\n    return `${key}_invalidate`;\n};\nvar getCacheKey = (key)=>{\n    return `${key}_cache`;\n};\nvar getCacheIdKey = (key)=>{\n    return `${key}_cache_by_id`;\n};\n// src/cache/cache.events.ts\nvar getCacheEvents = (emitter)=>({\n        /**\n   * Set cache data\n   * @param cacheKey\n   * @param data\n   */ emitCacheData: (cacheKey, data)=>{\n            emitter.emit(getCacheKey(cacheKey), data);\n        },\n        /**\n   * Invalidate cache values event\n   */ emitInvalidation: (cacheKey)=>{\n            emitter.emit(getInvalidateEventKey(cacheKey));\n        },\n        /** StatusType\n   * Cache data listener\n   * @param cacheKey\n   * @param callback\n   * @returns\n   */ onData: (cacheKey, callback)=>{\n            emitter.on(getCacheKey(cacheKey), callback);\n            return ()=>emitter.removeListener(getCacheKey(cacheKey), callback);\n        },\n        /**\n   * Cache invalidation listener\n   * @param cacheKey\n   * @param callback\n   * @returns\n   */ onInvalidate: (cacheKey, callback)=>{\n            emitter.on(getInvalidateEventKey(cacheKey), callback);\n            return ()=>emitter.removeListener(getInvalidateEventKey(cacheKey), callback);\n        }\n    });\n// src/managers/app/app.manager.ts\nvar import_events3 = __toESM(__webpack_require__(/*! events */ \"events\"));\nvar AppManager = class {\n    constructor(options){\n        this.options = options;\n        this.emitter = new import_events3.default();\n        this.events = getAppManagerEvents(this.emitter);\n        this.setInitialFocus = (initValue)=>__async(this, null, function*() {\n                if (typeof initValue === \"function\") {\n                    this.isFocused = false;\n                    this.isFocused = yield initValue();\n                } else {\n                    this.isFocused = initValue;\n                }\n            });\n        this.setInitialOnline = (initValue)=>__async(this, null, function*() {\n                if (typeof initValue === \"function\") {\n                    this.isOnline = false;\n                    this.isOnline = yield initValue();\n                } else {\n                    this.isOnline = initValue;\n                }\n            });\n        this.setFocused = (isFocused)=>{\n            this.isFocused = isFocused;\n            if (isFocused) {\n                this.events.emitFocus();\n            } else {\n                this.events.emitBlur();\n            }\n        };\n        this.setOnline = (isOnline)=>{\n            this.isOnline = isOnline;\n            if (isOnline) {\n                this.events.emitOnline();\n            } else {\n                this.events.emitOffline();\n            }\n        };\n        var _a;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        const { focusEvent = appManagerInitialOptions.focusEvent, onlineEvent = appManagerInitialOptions.onlineEvent, initiallyFocused = appManagerInitialOptions.initiallyFocused, initiallyOnline = appManagerInitialOptions.initiallyOnline } = this.options || appManagerInitialOptions;\n        this.setInitialFocus(initiallyFocused);\n        this.setInitialOnline(initiallyOnline);\n        focusEvent(this.setFocused);\n        onlineEvent(this.setOnline);\n        this.isBrowser = hasDocument();\n    }\n};\n// src/managers/app/app.manager.utils.ts\nvar hasWindow = ()=>{\n    try {\n        return Boolean(window && window.addEventListener);\n    } catch (err) {\n        return false;\n    }\n};\nvar hasDocument = ()=>{\n    try {\n        return Boolean(hasWindow() && window.document && window.document.addEventListener);\n    } catch (err) {\n        return false;\n    }\n};\nvar onWindowEvent = (key, listener, options)=>{\n    if (hasWindow()) {\n        window.addEventListener(key, listener, options);\n    }\n};\nvar onDocumentEvent = (key, listener, options)=>{\n    if (hasDocument()) {\n        window.document.addEventListener(key, listener, options);\n    }\n};\n// src/managers/app/app.manager.events.ts\nvar getAppManagerEvents = (emitter)=>({\n        emitFocus: ()=>{\n            emitter.emit(\"focus\" /* focus */ );\n        },\n        emitBlur: ()=>{\n            emitter.emit(\"blur\" /* blur */ );\n        },\n        emitOnline: ()=>{\n            emitter.emit(\"online\" /* online */ );\n        },\n        emitOffline: ()=>{\n            emitter.emit(\"offline\" /* offline */ );\n        },\n        onFocus: (callback)=>{\n            emitter.on(\"focus\" /* focus */ , callback);\n            return ()=>emitter.removeListener(\"focus\" /* focus */ , callback);\n        },\n        onBlur: (callback)=>{\n            emitter.on(\"blur\" /* blur */ , callback);\n            return ()=>emitter.removeListener(\"blur\" /* blur */ , callback);\n        },\n        onOnline: (callback)=>{\n            emitter.on(\"online\" /* online */ , callback);\n            return ()=>emitter.removeListener(\"online\" /* online */ , callback);\n        },\n        onOffline: (callback)=>{\n            emitter.on(\"offline\" /* offline */ , callback);\n            return ()=>emitter.removeListener(\"offline\" /* offline */ , callback);\n        }\n    });\n// src/managers/app/app.manager.constants.ts\nvar AppEvents = /* @__PURE__ */ ((AppEvents2)=>{\n    AppEvents2[\"focus\"] = \"focus\";\n    AppEvents2[\"blur\"] = \"blur\";\n    AppEvents2[\"online\"] = \"online\";\n    AppEvents2[\"offline\"] = \"offline\";\n    return AppEvents2;\n})(AppEvents || {});\nvar appManagerInitialOptions = {\n    initiallyFocused: true,\n    initiallyOnline: true,\n    focusEvent: (setFocused)=>{\n        onDocumentEvent(\"visibilitychange\", ()=>setFocused(true));\n        onWindowEvent(\"focus\", ()=>setFocused(true));\n        onWindowEvent(\"blur\", ()=>setFocused(false));\n    },\n    onlineEvent: (setOnline)=>{\n        onWindowEvent(\"online\", ()=>setOnline(true));\n        onWindowEvent(\"offline\", ()=>setOnline(false));\n    }\n};\n// src/managers/request/request.manager.ts\nvar import_events4 = __toESM(__webpack_require__(/*! events */ \"events\"));\nvar RequestManager = class {\n    constructor(){\n        this.emitter = new import_events4.default();\n        this.events = getRequestManagerEvents(this.emitter);\n        this.abortControllers = /* @__PURE__ */ new Map();\n        this.addAbortController = (abortKey, requestId)=>{\n            let abortGroup = this.abortControllers.get(abortKey);\n            if (!abortGroup) {\n                const newAbortGroup = /* @__PURE__ */ new Map();\n                abortGroup = newAbortGroup;\n                this.abortControllers.set(abortKey, newAbortGroup);\n            }\n            const abortController = abortGroup.get(requestId);\n            if (!abortController || abortController.signal.aborted) {\n                abortGroup.set(requestId, new AbortController());\n            }\n        };\n        this.getAbortController = (abortKey, requestId)=>{\n            var _a;\n            return (_a = this.abortControllers.get(abortKey)) == null ? void 0 : _a.get(requestId);\n        };\n        this.removeAbortController = (abortKey, requestId)=>{\n            var _a;\n            (_a = this.abortControllers.get(abortKey)) == null ? void 0 : _a.delete(requestId);\n        };\n        // Aborting\n        this.useAbortController = (abortKey, requestId)=>{\n            var _a;\n            const controller = (_a = this.abortControllers.get(abortKey)) == null ? void 0 : _a.get(requestId);\n            controller == null ? void 0 : controller.abort();\n        };\n        this.abortByKey = (abortKey)=>{\n            const controllers = this.abortControllers.get(abortKey);\n            if (controllers) {\n                const entries = Array.from(controllers.entries());\n                entries.forEach(([key])=>{\n                    this.useAbortController(abortKey, key);\n                });\n            }\n        };\n        this.abortByRequestId = (abortKey, requestId)=>{\n            this.useAbortController(abortKey, requestId);\n        };\n        this.abortAll = ()=>{\n            const entries = Array.from(this.abortControllers.entries());\n            entries.forEach(([abortKey, value])=>{\n                const controllers = Array.from(value.entries());\n                controllers.forEach(([requestId])=>{\n                    this.useAbortController(abortKey, requestId);\n                });\n            });\n        };\n        var _a;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n    }\n};\n// src/managers/request/request.manager.utils.ts\nvar getLoadingEventKey = (key)=>`${key}-loading-event`;\nvar getLoadingIdEventKey = (key)=>`${key}-loading-event-by-id`;\nvar getRemoveEventKey = (key)=>`${key}-remove-event`;\nvar getRemoveIdEventKey = (key)=>`${key}-remove-event-by-id`;\nvar getAbortEventKey = (key)=>`${key}-request-abort`;\nvar getAbortByIdEventKey = (key)=>`${key}-request-abort-by-id`;\nvar getResponseEventKey = (key)=>`${key}-response`;\nvar getResponseIdEventKey = (key)=>`${key}-response-by-id`;\nvar getRequestStartEventKey = (key)=>`${key}-request-start`;\nvar getRequestStartIdEventKey = (key)=>`${key}-request-start-by-id`;\nvar getResponseStartEventKey = (key)=>`${key}-response-start`;\nvar getResponseStartIdEventKey = (key)=>`${key}-response-start-by-id`;\nvar getUploadProgressEventKey = (key)=>`${key}-request-progress`;\nvar getUploadProgressIdEventKey = (key)=>`${key}-request-progress-by-id`;\nvar getDownloadProgressEventKey = (key)=>`${key}-response-progress`;\nvar getDownloadProgressIdEventKey = (key)=>`${key}-response-progress-by-id`;\n// src/managers/request/request.manager.events.ts\nvar getRequestManagerEvents = (emitter)=>({\n        /**\n   * Emiter\n   */ // Loading\n        emitLoading: (queueKey, requestId, values)=>{\n            emitter.emit(getLoadingIdEventKey(requestId), values);\n            emitter.emit(getLoadingEventKey(queueKey), values);\n        },\n        // Start\n        emitRequestStart: (queueKey, requestId, details)=>{\n            emitter.emit(getRequestStartIdEventKey(requestId), details);\n            emitter.emit(getRequestStartEventKey(queueKey), details);\n        },\n        emitResponseStart: (queueKey, requestId, details)=>{\n            emitter.emit(getResponseStartIdEventKey(requestId), details);\n            emitter.emit(getResponseStartEventKey(queueKey), details);\n        },\n        // Progress\n        emitUploadProgress: (queueKey, requestId, values, details)=>{\n            emitter.emit(getUploadProgressIdEventKey(requestId), values, details);\n            emitter.emit(getUploadProgressEventKey(queueKey), values, details);\n        },\n        emitDownloadProgress: (queueKey, requestId, values, details)=>{\n            emitter.emit(getDownloadProgressIdEventKey(requestId), values, details);\n            emitter.emit(getDownloadProgressEventKey(queueKey), values, details);\n        },\n        // Response\n        emitResponse: (cacheKey, requestId, response, details)=>{\n            emitter.emit(getResponseIdEventKey(requestId), response, details);\n            emitter.emit(getResponseEventKey(cacheKey), response, details);\n        },\n        // Abort\n        emitAbort: (abortKey, requestId, request)=>{\n            emitter.emit(getAbortByIdEventKey(requestId), request);\n            emitter.emit(getAbortEventKey(abortKey), request);\n        },\n        // Remove\n        emitRemove: (queueKey, requestId, details)=>{\n            emitter.emit(getRemoveEventKey(queueKey), details);\n            emitter.emit(getRemoveIdEventKey(requestId), details);\n        },\n        /**\n   * Listeners\n   */ // Loading\n        onLoading: (queueKey, callback)=>{\n            emitter.on(getLoadingEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getLoadingEventKey(queueKey), callback);\n        },\n        onLoadingById: (requestId, callback)=>{\n            emitter.on(getLoadingIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getLoadingIdEventKey(requestId), callback);\n        },\n        // Request Start\n        onRequestStart: (queueKey, callback)=>{\n            emitter.on(getRequestStartEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getRequestStartEventKey(queueKey), callback);\n        },\n        onRequestStartById: (requestId, callback)=>{\n            emitter.on(getRequestStartIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getRequestStartIdEventKey(requestId), callback);\n        },\n        // Response Start\n        onResponseStart: (queueKey, callback)=>{\n            emitter.on(getResponseStartEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getResponseStartEventKey(queueKey), callback);\n        },\n        onResponseStartById: (requestId, callback)=>{\n            emitter.on(getResponseStartIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getResponseStartIdEventKey(requestId), callback);\n        },\n        // Progress\n        onUploadProgress: (queueKey, callback)=>{\n            emitter.on(getUploadProgressEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getUploadProgressEventKey(queueKey), callback);\n        },\n        onUploadProgressById: (requestId, callback)=>{\n            emitter.on(getUploadProgressIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getUploadProgressIdEventKey(requestId), callback);\n        },\n        onDownloadProgress: (queueKey, callback)=>{\n            emitter.on(getDownloadProgressEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDownloadProgressEventKey(queueKey), callback);\n        },\n        onDownloadProgressById: (requestId, callback)=>{\n            emitter.on(getDownloadProgressIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getDownloadProgressIdEventKey(requestId), callback);\n        },\n        // Response\n        onResponse: (cacheKey, callback)=>{\n            emitter.on(getResponseEventKey(cacheKey), callback);\n            return ()=>emitter.removeListener(getResponseEventKey(cacheKey), callback);\n        },\n        // Response by requestId\n        onResponseById: (requestId, callback)=>{\n            emitter.on(getResponseIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getResponseIdEventKey(requestId), callback);\n        },\n        // Abort\n        onAbort: (abortKey, callback)=>{\n            emitter.on(getAbortEventKey(abortKey), callback);\n            return ()=>emitter.removeListener(getAbortEventKey(abortKey), callback);\n        },\n        onAbortById: (requestId, callback)=>{\n            emitter.on(getAbortByIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getAbortByIdEventKey(requestId), callback);\n        },\n        // Remove\n        onRemove: (queueKey, callback)=>{\n            emitter.on(getRemoveEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getRemoveEventKey(queueKey), callback);\n        },\n        onRemoveById: (requestId, callback)=>{\n            emitter.on(getRemoveIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getRemoveIdEventKey(requestId), callback);\n        }\n    });\n// src/managers/logger/logger.manager.ts\nvar import_events5 = __toESM(__webpack_require__(/*! events */ \"events\"));\nvar LoggerManager = class {\n    constructor(client, options){\n        this.client = client;\n        this.options = options;\n        this.emitter = new import_events5.default();\n        this.setSeverity = (severity2)=>{\n            this.severity = severity2;\n        };\n        this.init = (module2)=>{\n            return {\n                error: (message, ...extra)=>{\n                    this.logger({\n                        level: \"error\",\n                        module: module2,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                },\n                warning: (message, ...extra)=>{\n                    this.logger({\n                        level: \"warning\",\n                        module: module2,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                },\n                info: (message, ...extra)=>{\n                    this.logger({\n                        level: \"info\",\n                        module: module2,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                },\n                debug: (message, ...extra)=>{\n                    this.logger({\n                        level: \"debug\",\n                        module: module2,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                }\n            };\n        };\n        var _a, _b, _c;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        this.logger = ((_b = this.options) == null ? void 0 : _b.logger) || logger;\n        this.severity = ((_c = this.options) == null ? void 0 : _c.severity) || 2;\n    }\n};\n// src/managers/logger/logger.manager.utils.ts\nvar getTime = ()=>{\n    const d = /* @__PURE__ */ new Date();\n    return `${d.toLocaleTimeString()}(:${d.getMilliseconds()})`;\n};\nvar logger = (log)=>{\n    var _a;\n    if (log.enabled && log.severity >= severity[log.level]) {\n        const styles = loggerStyles[log.level];\n        const emoji = loggerIconLevels[log.level];\n        const module2 = `%c[${log.module}]:[${getTime()}]:`;\n        const message = `${emoji}${module2} ${log.message}`;\n        if ((_a = log.extra) == null ? void 0 : _a.length) {\n            console.groupCollapsed(message, styles);\n            log.extra.forEach((data)=>{\n                console.log(data);\n            });\n            console.groupEnd();\n        } else {\n            console.log(message, styles);\n        }\n    }\n};\n// src/managers/logger/logger.manager.constants.ts\nvar defaultStyles = \"background:rgba(0,0,0,0.2);padding:2px 5px;border-radius:5px;font-weight:bold;\";\nvar loggerStyles = {\n    error: `${defaultStyles}color:#db2525`,\n    warning: `${defaultStyles}color:#e1941e`,\n    info: `${defaultStyles}color:#1e74e1`,\n    debug: `${defaultStyles}color:#adadad`\n};\nvar loggerIconLevels = {\n    error: `\\u{1F6A8}`,\n    warning: `\\u{1F6A7}`,\n    info: `\\u2139\\uFE0F`,\n    debug: `\\u{1F6E9}\\uFE0F`\n};\nvar severity = {\n    error: 0,\n    warning: 1,\n    info: 2,\n    debug: 3\n};\n// src/client/client.utils.ts\nvar stringifyValue = (response)=>{\n    try {\n        return JSON.stringify(response);\n    } catch (err) {\n        return \"\";\n    }\n};\nvar interceptRequest = (interceptors, request)=>__async(void 0, null, function*() {\n        let newRequest = request;\n        if (!request.requestOptions.disableRequestInterceptors) {\n            for (const interceptor of interceptors){\n                newRequest = yield interceptor(request);\n                if (!newRequest) throw new Error(\"Request modifier must return request\");\n            }\n        }\n        return newRequest;\n    });\nvar interceptResponse = (interceptors, response, request)=>__async(void 0, null, function*() {\n        let newResponse = response;\n        if (!request.requestOptions.disableResponseInterceptors) {\n            for (const interceptor of interceptors){\n                newResponse = yield interceptor(response, request);\n                if (!newResponse) throw new Error(\"Response modifier must return data\");\n            }\n        }\n        return newResponse;\n    });\nvar getAdapterHeaders = (request)=>{\n    const isFormData = hasWindow() && request.data instanceof FormData;\n    const headers = {};\n    if (!isFormData) headers[\"Content-Type\"] = \"application/json\";\n    Object.assign(headers, request.headers);\n    return headers;\n};\nvar getAdapterPayload = (data)=>{\n    const isFormData = hasWindow() && data instanceof FormData;\n    if (isFormData) return data;\n    return stringifyValue(data);\n};\nvar isValidValue = (options)=>{\n    return (value)=>{\n        const { skipNull, skipEmptyString } = options;\n        if (skipEmptyString && value === void 0) {\n            return false;\n        }\n        if (skipEmptyString && value === \"\") {\n            return false;\n        }\n        if (skipNull && value === null) {\n            return false;\n        }\n        return true;\n    };\n};\nvar encodeValue = (value, { encode, strict })=>{\n    if (encode && strict) {\n        return encodeURIComponent(value).replace(/[!'()*]/g, (s)=>`%${s.charCodeAt(0).toString(16).toUpperCase()}`);\n    }\n    if (encode) {\n        return encodeURIComponent(value);\n    }\n    return value;\n};\nvar encodeParams = (key, value, options)=>{\n    const shouldSkip = !isValidValue(options)(value);\n    if (!key || shouldSkip) {\n        return \"\";\n    }\n    const parsedValue = ()=>{\n        var _a, _b;\n        if (value instanceof Date) {\n            return ((_a = options.dateParser) == null ? void 0 : _a.call(options, value)) || value.toISOString();\n        }\n        if (typeof value === \"object\" && !Array.isArray(value)) {\n            return ((_b = options.objectParser) == null ? void 0 : _b.call(options, value)) || JSON.stringify(value);\n        }\n        return String(value);\n    };\n    return `${encodeValue(key, options)}=${encodeValue(parsedValue(), options)}`;\n};\nvar encodeArray = (key, array, options)=>{\n    const { arrayFormat, arraySeparator } = options;\n    return array.filter(isValidValue(options)).reduce((acc, value, index)=>{\n        switch(arrayFormat){\n            case \"index\":\n                {\n                    const keyValue = `${encodeValue(key, options)}[${encodeValue(String(index), options)}]=`;\n                    acc.push(`${keyValue}${encodeValue(String(value), options)}`);\n                    break;\n                }\n            case \"bracket\":\n                {\n                    const keyValue = `${encodeValue(key, options)}[]=`;\n                    acc.push(`${keyValue}${encodeValue(String(value), options)}`);\n                    break;\n                }\n            case \"comma\":\n                {\n                    const keyValue = !acc.length && `${encodeValue(key, options)}=` || \"\";\n                    return [\n                        [\n                            ...acc,\n                            `${keyValue}${encodeValue(String(value), options)}`\n                        ].join(\",\")\n                    ];\n                }\n            case \"separator\":\n                {\n                    const keyValue = !acc.length && `${encodeValue(key, options)}=` || \"\";\n                    return [\n                        [\n                            ...acc,\n                            `${keyValue}${encodeValue(String(value), options)}`\n                        ].join(arraySeparator || \"|\")\n                    ];\n                }\n            case \"bracket-separator\":\n                {\n                    const keyValue = !acc.length && `${encodeValue(key, options)}[]=` || \"\";\n                    return [\n                        [\n                            ...acc,\n                            `${keyValue}${encodeValue(String(value), options)}`\n                        ].join(arraySeparator || \"|\")\n                    ];\n                }\n            default:\n                {\n                    const keyValue = `${encodeValue(key, options)}=`;\n                    acc.push(`${keyValue}${encodeValue(String(value), options)}`);\n                }\n        }\n        return acc;\n    }, []).join(\"&\");\n};\nvar stringifyQueryParams = (queryParams, options = stringifyDefaultOptions)=>{\n    if (!queryParams || !Object.keys(queryParams).length) {\n        return \"\";\n    }\n    if (typeof queryParams === \"string\") {\n        const hasQuestionMark = queryParams[0] === \"?\";\n        return hasQuestionMark ? queryParams : `?${queryParams}`;\n    }\n    const stringified = Object.entries(queryParams).map(([key, value])=>{\n        if (Array.isArray(value)) {\n            return encodeArray(key, value, options);\n        }\n        return encodeParams(key, value, options);\n    }).filter(Boolean).join(\"&\");\n    if (stringified) {\n        return `?${stringified}`;\n    }\n    return \"\";\n};\n// src/client/client.ts\nvar Client = class _Client {\n    constructor(options){\n        this.options = options;\n        // Private\n        this.__onErrorCallbacks = [];\n        this.__onSuccessCallbacks = [];\n        this.__onResponseCallbacks = [];\n        this.__onAuthCallbacks = [];\n        this.__onRequestCallbacks = [];\n        // Managers\n        this.requestManager = new RequestManager();\n        this.loggerManager = new LoggerManager(this);\n        this.defaultMethod = \"GET\" /* get */ ;\n        this.defaultExtra = xhrExtra;\n        this.isMockEnabled = true;\n        // Registered requests effect\n        this.effects = [];\n        this.abortKeyMapper = getSimpleKey;\n        this.cacheKeyMapper = getRequestKey;\n        this.queueKeyMapper = getRequestKey;\n        this.effectKeyMapper = getSimpleKey;\n        // Utils\n        /**\n     * Method to stringify query params from objects.\n     */ this.stringifyQueryParams = (queryParams)=>stringifyQueryParams(queryParams, this.queryParamsConfig);\n        /**\n     * Method to get default headers and to map them based on the data format exchange, by default it handles FormData / JSON formats.\n     */ this.headerMapper = getAdapterHeaders;\n        /**\n     * Method to get request data and transform them to the required format. It handles FormData and JSON by default.\n     */ this.payloadMapper = getAdapterPayload;\n        /**\n     * Method to get request data and transform them to the required format. It handles FormData and JSON by default.\n     */ // eslint-disable-next-line class-methods-use-this\n        this.endpointMapper = (endpoint)=>endpoint;\n        // Logger\n        this.logger = this.loggerManager.init(\"Client\");\n        /**\n     * This method allows to configure global defaults for the request configuration like method, auth, deduplication etc.\n     */ this.setRequestDefaultOptions = (callback)=>{\n            this.requestDefaultOptions = callback;\n            return this;\n        };\n        this.setAdapterDefaultOptions = (callback)=>{\n            this.adapterDefaultOptions = callback;\n            return this;\n        };\n        /**\n     * This method enables the logger usage and display the logs in console\n     */ this.setDebug = (debug)=>{\n            this.debug = debug;\n            return this;\n        };\n        /**\n     * Set the logger severity of the messages displayed to the console\n     */ this.setLoggerSeverity = (severity2)=>{\n            this.loggerManager.setSeverity(severity2);\n            return this;\n        };\n        /**\n     * Set the new logger instance to the Client\n     */ this.setLogger = (callback)=>{\n            this.loggerManager = callback(this);\n            return this;\n        };\n        /**\n     * Set config for the query params stringify method, we can set here, among others, arrayFormat, skipNull, encode, skipEmptyString and more\n     */ this.setQueryParamsConfig = (queryParamsConfig)=>{\n            this.queryParamsConfig = queryParamsConfig;\n            return this;\n        };\n        /**\n     * Set the custom query params stringify method to the Client\n     * @param stringifyFn Custom callback handling query params stringify\n     */ this.setStringifyQueryParams = (stringifyFn)=>{\n            this.stringifyQueryParams = stringifyFn;\n            return this;\n        };\n        /**\n     * Set the custom header mapping function\n     */ this.setHeaderMapper = (headerMapper)=>{\n            this.headerMapper = headerMapper;\n            return this;\n        };\n        /**\n     * Set the request payload mapping function which get triggered before request get send\n     */ this.setPayloadMapper = (payloadMapper)=>{\n            this.payloadMapper = payloadMapper;\n            return this;\n        };\n        /**\n     * Set globally if mocking should be enabled or disabled for all client requests.\n     * @param isMockEnabled\n     */ this.setEnableGlobalMocking = (isMockEnabled)=>{\n            this.isMockEnabled = isMockEnabled;\n            return this;\n        };\n        /**\n     * Set the request payload mapping function which get triggered before request get send\n     */ this.setEndpointMapper = (endpointMapper)=>{\n            this.endpointMapper = endpointMapper;\n            return this;\n        };\n        /**\n     * Set custom http adapter to handle graphql, rest, firebase or others\n     */ this.setAdapter = (callback)=>{\n            const value = callback(this);\n            if (value instanceof _Client) {\n                return value;\n            }\n            this.adapter = value;\n            return this;\n        };\n        /**\n     * Set default method for requests.\n     */ this.setDefaultMethod = (defaultMethod)=>{\n            this.defaultMethod = defaultMethod;\n            return this;\n        };\n        /**\n     * Set default additional data for initial state.\n     */ this.setDefaultExtra = (defaultExtra)=>{\n            this.defaultExtra = defaultExtra;\n            return this;\n        };\n        /**\n     * Method of manipulating requests before sending the request. We can for example add custom header with token to the request which request had the auth set to true.\n     */ this.onAuth = (callback)=>{\n            this.__onAuthCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on auth.\n     * */ this.removeOnAuthInterceptors = (callbacks)=>{\n            this.__onAuthCallbacks = this.__onAuthCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method for intercepting error responses. It can be used for example to refresh tokens.\n     */ this.onError = (callback)=>{\n            this.__onErrorCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on error.\n     * */ this.removeOnErrorInterceptors = (callbacks)=>{\n            this.__onErrorCallbacks = this.__onErrorCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method for intercepting success responses.\n     */ this.onSuccess = (callback)=>{\n            this.__onSuccessCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on success.\n     * */ this.removeOnSuccessInterceptors = (callbacks)=>{\n            this.__onSuccessCallbacks = this.__onSuccessCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method of manipulating requests before sending the request.\n     */ this.onRequest = (callback)=>{\n            this.__onRequestCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on request.\n     * */ this.removeOnRequestInterceptors = (callbacks)=>{\n            this.__onRequestCallbacks = this.__onRequestCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method for intercepting any responses.\n     */ this.onResponse = (callback)=>{\n            this.__onResponseCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on request.\n     * */ this.removeOnResponseInterceptors = (callbacks)=>{\n            this.__onResponseCallbacks = this.__onResponseCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Add persistent effects which trigger on the request lifecycle\n     */ this.addEffect = (effect)=>{\n            this.effects = this.effects.concat(effect);\n            return this;\n        };\n        /**\n     * Remove effects from Client\n     */ this.removeEffect = (effect)=>{\n            const name = typeof effect === \"string\" ? effect : effect.getEffectKey();\n            this.effects = this.effects.filter((currentEffect)=>currentEffect.getEffectKey() !== name);\n            return this;\n        };\n        /**\n     * Key setters\n     */ this.setAbortKeyMapper = (callback)=>{\n            this.abortKeyMapper = callback;\n        };\n        this.setCacheKeyMapper = (callback)=>{\n            this.cacheKeyMapper = callback;\n        };\n        this.setQueueKeyMapper = (callback)=>{\n            this.queueKeyMapper = callback;\n        };\n        this.setEffectKeyMapper = (callback)=>{\n            this.effectKeyMapper = callback;\n        };\n        /**\n     * Helper used by http adapter to apply the modifications on response error\n     */ this.__modifyAuth = (request)=>__async(this, null, function*() {\n                return interceptRequest(this.__onAuthCallbacks, request);\n            });\n        /**\n     * Private helper to run async pre-request processing\n     */ this.__modifyRequest = (request)=>__async(this, null, function*() {\n                return interceptRequest(this.__onRequestCallbacks, request);\n            });\n        /**\n     * Private helper to run async on-error response processing\n     */ this.__modifyErrorResponse = (response, request)=>__async(this, null, function*() {\n                return interceptResponse(this.__onErrorCallbacks, response, request);\n            });\n        /**\n     * Private helper to run async on-success response processing\n     */ this.__modifySuccessResponse = (response, request)=>__async(this, null, function*() {\n                return interceptResponse(this.__onSuccessCallbacks, response, request);\n            });\n        /**\n     * Private helper to run async response processing\n     */ this.__modifyResponse = (response, request)=>__async(this, null, function*() {\n                return interceptResponse(this.__onResponseCallbacks, response, request);\n            });\n        /**\n     * Clears the Client instance and remove all listeners on it's dependencies\n     */ this.clear = ()=>{\n            const { appManager, cache, fetchDispatcher, submitDispatcher } = this.options;\n            this.requestManager.abortControllers.clear();\n            this.fetchDispatcher.clear();\n            this.submitDispatcher.clear();\n            this.cache.clear();\n            this.requestManager.emitter.removeAllListeners();\n            this.fetchDispatcher.emitter.removeAllListeners();\n            this.submitDispatcher.emitter.removeAllListeners();\n            this.cache.emitter.removeAllListeners();\n            this.appManager = (appManager == null ? void 0 : appManager(this)) || new AppManager();\n            this.cache = (cache == null ? void 0 : cache(this)) || new Cache(this);\n            this.fetchDispatcher = (fetchDispatcher == null ? void 0 : fetchDispatcher(this)) || new Dispatcher(this);\n            this.submitDispatcher = (submitDispatcher == null ? void 0 : submitDispatcher(this)) || new Dispatcher(this);\n        };\n        /**\n     * Create requests based on the Client setup\n     *\n     * @template {response: any, payload:any} Properties\n     */ this.createRequest = ()=>{\n            return (params)=>{\n                const endpoint = this.endpointMapper(params.endpoint);\n                const mappedParams = __spreadProps(__spreadValues({}, params), {\n                    endpoint\n                });\n                return new Request(this, mappedParams);\n            };\n        };\n        const { url, adapter: adapter4, appManager, cache, fetchDispatcher, submitDispatcher } = this.options;\n        this.url = url;\n        this.adapter = adapter4 || adapter3;\n        this.appManager = (appManager == null ? void 0 : appManager(this)) || new AppManager();\n        this.cache = (cache == null ? void 0 : cache(this)) || new Cache(this);\n        this.fetchDispatcher = (fetchDispatcher == null ? void 0 : fetchDispatcher(this)) || new Dispatcher(this);\n        this.submitDispatcher = (submitDispatcher == null ? void 0 : submitDispatcher(this)) || new Dispatcher(this);\n    }\n};\n// src/client/client.constants.ts\nvar stringifyDefaultOptions = {\n    strict: true,\n    encode: true,\n    arrayFormat: \"bracket\",\n    arraySeparator: \"bracket\",\n    sort: false,\n    skipNull: true,\n    skipEmptyString: true\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); //# sourceMappingURL=index.cjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/core/dist/index.cjs.js\n");

/***/ }),

/***/ "../../packages/core/dist/index.esm.js":
/*!*********************************************!*\
  !*** ../../packages/core/dist/index.esm.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppEvents: () => (/* binding */ AppEvents),\n/* harmony export */   AppManager: () => (/* binding */ AppManager),\n/* harmony export */   Cache: () => (/* binding */ Cache),\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   Dispatcher: () => (/* binding */ Dispatcher),\n/* harmony export */   DispatcherRequestType: () => (/* binding */ DispatcherRequestType),\n/* harmony export */   HttpMethodsEnum: () => (/* binding */ HttpMethodsEnum),\n/* harmony export */   LoggerManager: () => (/* binding */ LoggerManager),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   RequestEffect: () => (/* binding */ RequestEffect),\n/* harmony export */   RequestManager: () => (/* binding */ RequestManager),\n/* harmony export */   Time: () => (/* binding */ Time),\n/* harmony export */   adapter: () => (/* binding */ adapter3),\n/* harmony export */   appManagerInitialOptions: () => (/* binding */ appManagerInitialOptions),\n/* harmony export */   canRetryRequest: () => (/* binding */ canRetryRequest),\n/* harmony export */   defaultTimeout: () => (/* binding */ defaultTimeout),\n/* harmony export */   getAbortByIdEventKey: () => (/* binding */ getAbortByIdEventKey),\n/* harmony export */   getAbortEventKey: () => (/* binding */ getAbortEventKey),\n/* harmony export */   getAdapterBindings: () => (/* binding */ getAdapterBindings),\n/* harmony export */   getAdapterHeaders: () => (/* binding */ getAdapterHeaders),\n/* harmony export */   getAdapterPayload: () => (/* binding */ getAdapterPayload),\n/* harmony export */   getAppManagerEvents: () => (/* binding */ getAppManagerEvents),\n/* harmony export */   getCacheData: () => (/* binding */ getCacheData),\n/* harmony export */   getCacheEvents: () => (/* binding */ getCacheEvents),\n/* harmony export */   getCacheIdKey: () => (/* binding */ getCacheIdKey),\n/* harmony export */   getCacheKey: () => (/* binding */ getCacheKey),\n/* harmony export */   getDispatcherChangeEventKey: () => (/* binding */ getDispatcherChangeEventKey),\n/* harmony export */   getDispatcherDrainedEventKey: () => (/* binding */ getDispatcherDrainedEventKey),\n/* harmony export */   getDispatcherEvents: () => (/* binding */ getDispatcherEvents),\n/* harmony export */   getDispatcherStatusEventKey: () => (/* binding */ getDispatcherStatusEventKey),\n/* harmony export */   getDownloadProgressEventKey: () => (/* binding */ getDownloadProgressEventKey),\n/* harmony export */   getDownloadProgressIdEventKey: () => (/* binding */ getDownloadProgressIdEventKey),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   getInvalidateEventKey: () => (/* binding */ getInvalidateEventKey),\n/* harmony export */   getIsEqualTimestamp: () => (/* binding */ getIsEqualTimestamp),\n/* harmony export */   getLoadingEventKey: () => (/* binding */ getLoadingEventKey),\n/* harmony export */   getLoadingIdEventKey: () => (/* binding */ getLoadingIdEventKey),\n/* harmony export */   getProgressData: () => (/* binding */ getProgressData),\n/* harmony export */   getProgressValue: () => (/* binding */ getProgressValue),\n/* harmony export */   getRemoveEventKey: () => (/* binding */ getRemoveEventKey),\n/* harmony export */   getRemoveIdEventKey: () => (/* binding */ getRemoveIdEventKey),\n/* harmony export */   getRequestDispatcher: () => (/* binding */ getRequestDispatcher),\n/* harmony export */   getRequestEta: () => (/* binding */ getRequestEta),\n/* harmony export */   getRequestKey: () => (/* binding */ getRequestKey),\n/* harmony export */   getRequestManagerEvents: () => (/* binding */ getRequestManagerEvents),\n/* harmony export */   getRequestStartEventKey: () => (/* binding */ getRequestStartEventKey),\n/* harmony export */   getRequestStartIdEventKey: () => (/* binding */ getRequestStartIdEventKey),\n/* harmony export */   getRequestType: () => (/* binding */ getRequestType),\n/* harmony export */   getResponseEventKey: () => (/* binding */ getResponseEventKey),\n/* harmony export */   getResponseHeaders: () => (/* binding */ getResponseHeaders),\n/* harmony export */   getResponseIdEventKey: () => (/* binding */ getResponseIdEventKey),\n/* harmony export */   getResponseStartEventKey: () => (/* binding */ getResponseStartEventKey),\n/* harmony export */   getResponseStartIdEventKey: () => (/* binding */ getResponseStartIdEventKey),\n/* harmony export */   getSimpleKey: () => (/* binding */ getSimpleKey),\n/* harmony export */   getTime: () => (/* binding */ getTime),\n/* harmony export */   getUniqueRequestId: () => (/* binding */ getUniqueRequestId),\n/* harmony export */   getUploadProgressEventKey: () => (/* binding */ getUploadProgressEventKey),\n/* harmony export */   getUploadProgressIdEventKey: () => (/* binding */ getUploadProgressIdEventKey),\n/* harmony export */   hasDocument: () => (/* binding */ hasDocument),\n/* harmony export */   hasWindow: () => (/* binding */ hasWindow),\n/* harmony export */   hydrate: () => (/* binding */ hydrate),\n/* harmony export */   interceptRequest: () => (/* binding */ interceptRequest),\n/* harmony export */   interceptResponse: () => (/* binding */ interceptResponse),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   loggerIconLevels: () => (/* binding */ loggerIconLevels),\n/* harmony export */   loggerStyles: () => (/* binding */ loggerStyles),\n/* harmony export */   mocker: () => (/* binding */ mocker),\n/* harmony export */   onDocumentEvent: () => (/* binding */ onDocumentEvent),\n/* harmony export */   onWindowEvent: () => (/* binding */ onWindowEvent),\n/* harmony export */   parseErrorResponse: () => (/* binding */ parseErrorResponse),\n/* harmony export */   parseResponse: () => (/* binding */ parseResponse),\n/* harmony export */   sendRequest: () => (/* binding */ sendRequest),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   severity: () => (/* binding */ severity),\n/* harmony export */   stringifyDefaultOptions: () => (/* binding */ stringifyDefaultOptions),\n/* harmony export */   stringifyKey: () => (/* binding */ stringifyKey),\n/* harmony export */   stringifyQueryParams: () => (/* binding */ stringifyQueryParams),\n/* harmony export */   stringifyValue: () => (/* binding */ stringifyValue),\n/* harmony export */   xhrExtra: () => (/* binding */ xhrExtra)\n/* harmony export */ });\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/effect/request.effect.ts\nvar RequestEffect = class {\n    constructor(config){\n        this.config = config;\n        this.getEffectKey = ()=>{\n            return this.config.effectKey;\n        };\n        this.onTrigger = (request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onTrigger) == null ? void 0 : _b.call(_a, request);\n        };\n        this.onStart = (request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onStart) == null ? void 0 : _b.call(_a, request);\n        };\n        this.onSuccess = (response, request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onSuccess) == null ? void 0 : _b.call(_a, response, request);\n        };\n        this.onError = (response, request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onError) == null ? void 0 : _b.call(_a, response, request);\n        };\n        this.onFinished = (response, request)=>{\n            var _a, _b;\n            (_b = (_a = this.config).onFinished) == null ? void 0 : _b.call(_a, response, request);\n        };\n    }\n};\n// src/constants/time.constants.ts\nvar Time = /* @__PURE__ */ ((Time2)=>{\n    Time2[Time2[\"SEC\"] = 1e3] = \"SEC\";\n    Time2[Time2[\"MIN\"] = 6e4] = \"MIN\";\n    Time2[Time2[\"HOUR\"] = 36e5] = \"HOUR\";\n    Time2[Time2[\"DAY\"] = 864e5] = \"DAY\";\n    Time2[Time2[\"WEEK\"] = 6048e5] = \"WEEK\";\n    Time2[Time2[\"MONTH_30\"] = 2592e6] = \"MONTH_30\";\n    Time2[Time2[\"MONTH_31\"] = 26784e5] = \"MONTH_31\";\n    Time2[Time2[\"YEAR\"] = 31536e6] = \"YEAR\";\n    Time2[Time2[\"YEAR_LEAP\"] = 316224e5] = \"YEAR_LEAP\";\n    return Time2;\n})(Time || {});\n// src/adapter/adapter.constants.ts\nvar defaultTimeout = 1e3 /* SEC */  * 5;\nvar xhrExtra = {\n    headers: {}\n};\n// src/adapter/adapter.browser.ts\nvar adapter = (request, requestId)=>__async(void 0, null, function*() {\n        const { makeRequest, fullUrl, config, payload, headers, onError, onResponseEnd, onTimeoutError, onRequestEnd, createAbortListener, onResponseProgress, onRequestProgress, onResponseStart, onBeforeRequest, onRequestStart, onSuccess } = yield getAdapterBindings(request, requestId, 0, {\n            headers: {}\n        });\n        const { method = \"GET\" } = request;\n        return makeRequest((resolve)=>{\n            const xhr = new XMLHttpRequest();\n            xhr.timeout = defaultTimeout;\n            const abort = ()=>xhr.abort();\n            Object.entries(config).forEach(([name, value])=>{\n                xhr[name] = value;\n            });\n            xhr.open(method, fullUrl, true);\n            Object.entries(headers).forEach(([name, value])=>xhr.setRequestHeader(name, value));\n            const unmountListener = createAbortListener(0, xhrExtra, abort, resolve);\n            xhr.upload.onprogress = onRequestProgress;\n            xhr.onloadstart = ()=>{\n                onRequestEnd();\n                onResponseStart();\n            };\n            xhr.onprogress = onResponseProgress;\n            xhr.onloadend = ()=>{\n                onResponseEnd();\n                unmountListener();\n            };\n            xhr.ontimeout = ()=>onTimeoutError(0, xhrExtra, resolve);\n            xhr.onreadystatechange = (e)=>{\n                const event = e;\n                const finishedState = 4;\n                if (event.target && event.target.readyState === finishedState) {\n                    const { status } = event.target;\n                    const success = String(status).startsWith(\"2\") || String(status).startsWith(\"3\");\n                    const responseHeaders = getResponseHeaders(xhr.getAllResponseHeaders());\n                    if (success) {\n                        const data = parseResponse(event.target.response);\n                        onSuccess(data, status, {\n                            headers: responseHeaders\n                        }, resolve);\n                    } else {\n                        const data = parseErrorResponse(event.target.response);\n                        onError(data, status, {\n                            headers: responseHeaders\n                        }, resolve);\n                    }\n                }\n            };\n            onBeforeRequest();\n            onRequestStart();\n            xhr.send(payload);\n        });\n    });\n// src/adapter/adapter.server.ts\n\n\n// src/constants/http.constants.ts\nvar HttpMethodsEnum = /* @__PURE__ */ ((HttpMethodsEnum2)=>{\n    HttpMethodsEnum2[\"get\"] = \"GET\";\n    HttpMethodsEnum2[\"post\"] = \"POST\";\n    HttpMethodsEnum2[\"put\"] = \"PUT\";\n    HttpMethodsEnum2[\"patch\"] = \"PATCH\";\n    HttpMethodsEnum2[\"delete\"] = \"DELETE\";\n    return HttpMethodsEnum2;\n})(HttpMethodsEnum || {});\n// src/adapter/adapter.server.ts\nvar adapter2 = (request, requestId)=>__async(void 0, null, function*() {\n        const { makeRequest, fullUrl, config, headers, payload, onError, onResponseEnd, onTimeoutError, onRequestEnd, createAbortListener, onResponseProgress, onResponseStart, onBeforeRequest, onRequestStart, onSuccess } = yield getAdapterBindings(request, requestId, 0, xhrExtra);\n        const { method = \"GET\" /* get */ , client } = request;\n        const httpClient = client.url.includes(\"https://\") ? (https__WEBPACK_IMPORTED_MODULE_1___default()) : (http__WEBPACK_IMPORTED_MODULE_0___default());\n        const options = {\n            method,\n            headers,\n            timeout: defaultTimeout\n        };\n        Object.entries(config).forEach(([name, value])=>{\n            options[name] = value;\n        });\n        let unmountListener = ()=>null;\n        onBeforeRequest();\n        if (payload) {\n            options.headers[\"Content-Length\"] = Buffer.byteLength(JSON.stringify(payload));\n        }\n        const requestUrl = !fullUrl.startsWith(\"http\") ? `http://${fullUrl}` : fullUrl;\n        return makeRequest((resolve)=>{\n            const httpRequest = httpClient.request(requestUrl, options, (response)=>{\n                response.setEncoding(\"utf8\");\n                unmountListener = createAbortListener(0, xhrExtra, response.destroy, resolve);\n                let chunks = \"\";\n                const totalDownloadBytes = Number(response.headers[\"content-length\"]);\n                let downloadedBytes = 0;\n                onRequestStart();\n                response.on(\"data\", (chunk)=>{\n                    if (!chunks) {\n                        onRequestEnd();\n                        onResponseStart();\n                    }\n                    downloadedBytes += chunk.length;\n                    chunks += chunk;\n                    onResponseProgress({\n                        total: totalDownloadBytes,\n                        loaded: downloadedBytes\n                    });\n                });\n                response.on(\"end\", ()=>{\n                    const { statusCode } = response;\n                    const success = String(statusCode).startsWith(\"2\") || String(statusCode).startsWith(\"3\");\n                    if (success) {\n                        const data = parseResponse(chunks);\n                        onSuccess(data, statusCode, {\n                            headers: response.headers\n                        }, resolve);\n                    } else {\n                        const data = parseErrorResponse(chunks);\n                        onError(data, statusCode, {\n                            headers: response.headers\n                        }, resolve);\n                    }\n                    unmountListener();\n                    onResponseEnd();\n                });\n            });\n            httpRequest.on(\"timeout\", ()=>onTimeoutError(0, xhrExtra, resolve));\n            httpRequest.on(\"error\", (error)=>onError(error, 0, xhrExtra, resolve));\n            if (payload) {\n                httpRequest.write(payload);\n            }\n            httpRequest.end();\n        });\n    });\n// src/adapter/adapter.ts\nvar adapter3 = (request, requestId)=>__async(void 0, null, function*() {\n        if (typeof XMLHttpRequest !== \"undefined\") {\n            return adapter(request, requestId);\n        }\n        return adapter2(request, requestId);\n    });\n// src/adapter/adapter.utils.ts\nvar getErrorMessage = (errorCase)=>{\n    if (errorCase === \"timeout\") {\n        return new Error(\"Request timeout\");\n    }\n    if (errorCase === \"abort\") {\n        return new Error(\"Request cancelled\");\n    }\n    return new Error(\"Unexpected error\");\n};\nvar getResponseHeaders = (headersString)=>{\n    const arr = headersString.trim().split(/[\\r\\n]+/);\n    const headers = {};\n    arr.forEach((line)=>{\n        const parts = line.split(\": \");\n        const header = parts.shift();\n        const value = parts.join(\": \");\n        headers[header] = value;\n    });\n    return headers;\n};\nvar parseResponse = (response)=>{\n    try {\n        return JSON.parse(response);\n    } catch (err) {\n        return response;\n    }\n};\nvar parseErrorResponse = (response)=>{\n    return response ? parseResponse(response) : getErrorMessage();\n};\n// src/utils/uuid.utils.ts\nvar getUniqueRequestId = (key)=>{\n    return `${key}_${Date.now().toString(36)}_${Math.random().toString(36).substring(2)}`;\n};\n// src/utils/hydration.utils.ts\nvar serialize = (request, response, options)=>{\n    const { cacheKey } = request;\n    const data = response != null ? response : request.client.cache.get(cacheKey);\n    return __spreadProps(__spreadValues({}, options), {\n        // Keys to allow for easy serialization and deserialization\n        cacheKey,\n        // Data to be stored\n        timestamp: Date.now(),\n        data: JSON.stringify(data)\n    });\n};\nvar hydrate = (client, fallbacks, options)=>{\n    fallbacks == null ? void 0 : fallbacks.forEach((fallback)=>{\n        const _a = fallback, { cacheKey, data } = _a, fallbackOptions = __objRest(_a, [\n            \"cacheKey\",\n            \"data\"\n        ]);\n        const defaults = {\n            cache: true,\n            cacheTime: null,\n            garbageCollection: null,\n            override: false\n        };\n        const config = typeof options === \"function\" ? __spreadValues(__spreadValues(__spreadValues({}, defaults), fallbackOptions), options(fallback)) : __spreadValues(__spreadValues(__spreadValues({}, defaults), fallbackOptions), options);\n        if (!config.override) {\n            const cachedData = client.cache.get(cacheKey);\n            if (cachedData) {\n                return;\n            }\n        }\n        const parsedData = parseResponse(data);\n        client.cache.set(__spreadProps(__spreadValues({}, config), {\n            cacheKey\n        }), parsedData);\n    });\n};\n// src/request/request.ts\nvar Request = class _Request {\n    constructor(client, requestOptions, requestJSON){\n        this.client = client;\n        this.requestOptions = requestOptions;\n        this.requestJSON = requestJSON;\n        this.isMockEnabled = false;\n        this.setHeaders = (headers)=>{\n            return this.clone({\n                headers\n            });\n        };\n        this.setAuth = (auth)=>{\n            return this.clone({\n                auth\n            });\n        };\n        this.setParams = (params)=>{\n            return this.clone({\n                params\n            });\n        };\n        this.setData = (data)=>{\n            return this.clone({\n                data\n            });\n        };\n        this.setQueryParams = (queryParams)=>{\n            return this.clone({\n                queryParams\n            });\n        };\n        this.setOptions = (options)=>{\n            return this.clone({\n                options\n            });\n        };\n        this.setCancelable = (cancelable)=>{\n            return this.clone({\n                cancelable\n            });\n        };\n        this.setRetry = (retry)=>{\n            return this.clone({\n                retry\n            });\n        };\n        this.setRetryTime = (retryTime)=>{\n            return this.clone({\n                retryTime\n            });\n        };\n        this.setGarbageCollection = (garbageCollection)=>{\n            return this.clone({\n                garbageCollection\n            });\n        };\n        this.setCache = (cache)=>{\n            return this.clone({\n                cache\n            });\n        };\n        this.setCacheTime = (cacheTime)=>{\n            return this.clone({\n                cacheTime\n            });\n        };\n        this.setQueued = (queued)=>{\n            return this.clone({\n                queued\n            });\n        };\n        this.setAbortKey = (abortKey)=>{\n            this.updatedAbortKey = true;\n            return this.clone({\n                abortKey\n            });\n        };\n        this.setCacheKey = (cacheKey)=>{\n            this.updatedCacheKey = true;\n            return this.clone({\n                cacheKey\n            });\n        };\n        this.setQueueKey = (queueKey)=>{\n            this.updatedQueueKey = true;\n            return this.clone({\n                queueKey\n            });\n        };\n        this.setEffectKey = (effectKey)=>{\n            this.updatedEffectKey = true;\n            return this.clone({\n                effectKey\n            });\n        };\n        this.setDeduplicate = (deduplicate)=>{\n            return this.clone({\n                deduplicate\n            });\n        };\n        this.setDeduplicateTime = (deduplicateTime)=>{\n            return this.clone({\n                deduplicateTime\n            });\n        };\n        this.setUsed = (used)=>{\n            return this.clone({\n                used\n            });\n        };\n        this.setOffline = (offline)=>{\n            return this.clone({\n                offline\n            });\n        };\n        this.setMock = (mockData)=>{\n            const mockGenerator = function* mocked(mockedValues) {\n                if (Array.isArray(mockData)) {\n                    let iteration = 0;\n                    while(true){\n                        yield mockedValues[iteration];\n                        iteration = mockData.length === iteration + 1 ? 0 : iteration + 1;\n                    }\n                } else {\n                    while(true){\n                        yield mockData;\n                    }\n                }\n            };\n            this.mockData = mockData;\n            this.mock = mockGenerator(mockData);\n            this.isMockEnabled = true;\n            return this;\n        };\n        this.removeMock = ()=>{\n            this.mockData = null;\n            this.mock = null;\n            this.isMockEnabled = false;\n            return this;\n        };\n        this.setEnableMocking = (isMockEnabled)=>{\n            this.isMockEnabled = isMockEnabled;\n            return this;\n        };\n        /**\n     * Mappers\n     */ /**\n     * Map data before it gets send to the server\n     * @param dataMapper\n     * @returns\n     */ this.setDataMapper = (dataMapper)=>{\n            const cloned = this.clone(void 0);\n            cloned.dataMapper = dataMapper;\n            return cloned;\n        };\n        /**\n     * Map request before it gets send to the server\n     * @param requestMapper mapper of the request\n     * @returns new request\n     */ this.setRequestMapper = (requestMapper)=>{\n            const cloned = this.clone(void 0);\n            cloned.requestMapper = requestMapper;\n            return cloned;\n        };\n        /**\n     * Map the response to the new interface\n     * @param responseMapper our mapping callback\n     * @returns new response\n     */ this.setResponseMapper = (responseMapper)=>{\n            const cloned = this.clone();\n            cloned.responseMapper = responseMapper;\n            return cloned;\n        };\n        this.paramsMapper = (params, queryParams)=>{\n            let endpoint = this.requestOptions.endpoint;\n            if (params) {\n                Object.entries(params).forEach(([key, value])=>{\n                    endpoint = endpoint.replace(new RegExp(`:${key}`, \"g\"), String(value));\n                });\n            }\n            if (queryParams) {\n                endpoint += this.client.stringifyQueryParams(queryParams);\n            }\n            return endpoint;\n        };\n        this.hydrate = (data)=>{\n            this.client.cache.set(this, data);\n            return this;\n        };\n        this.abort = ()=>{\n            const { requestManager } = this.client;\n            requestManager.abortByKey(this.abortKey);\n            return this.clone();\n        };\n        /**\n     * Make a request without any side effects for cache or queues.\n     *\n     * Best way for making simple requests or using HF with the SSR.\n     * Method to use the request WITHOUT adding it to cache and queues.\n     * @param options\n     */ this.exec = (options)=>__async(this, null, function*() {\n                const { adapter: adapter4, requestManager } = this.client;\n                const request = this.clone(options);\n                const requestId = getUniqueRequestId(this.queueKey);\n                requestManager.addAbortController(this.abortKey, requestId);\n                const response = yield adapter4(request, requestId);\n                requestManager.removeAbortController(this.abortKey, requestId);\n                if (request.responseMapper) {\n                    return request.responseMapper(response);\n                }\n                return response;\n            });\n        /**\n     * Method used to perform requests with usage of cache and queues.\n     * @param options\n     */ this.send = (options)=>__async(this, null, function*() {\n                const _a = options || {}, { dispatcherType } = _a, rest = __objRest(_a, [\n                    \"dispatcherType\"\n                ]);\n                const request = this.clone(rest);\n                return sendRequest(request, options);\n            });\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C;\n        const { endpoint, headers, auth = true, method = client.defaultMethod, options, cancelable = false, retry = 0, retryTime = 500, garbageCollection = 6e4 /* MIN */  * 5, cache = true, cacheTime = 6e4 /* MIN */  * 5, queued = false, offline = true, abortKey, cacheKey, queueKey, effectKey, deduplicate = false, deduplicateTime = 10 } = __spreadValues(__spreadValues({}, (_b = (_a = this.client).requestDefaultOptions) == null ? void 0 : _b.call(_a, requestOptions)), requestOptions);\n        this.endpoint = (_c = requestJSON == null ? void 0 : requestJSON.endpoint) != null ? _c : endpoint;\n        this.headers = (_d = requestJSON == null ? void 0 : requestJSON.headers) != null ? _d : headers;\n        this.auth = (_e = requestJSON == null ? void 0 : requestJSON.auth) != null ? _e : auth;\n        this.method = method;\n        this.params = requestJSON == null ? void 0 : requestJSON.params;\n        this.data = requestJSON == null ? void 0 : requestJSON.data;\n        this.queryParams = requestJSON == null ? void 0 : requestJSON.queryParams;\n        this.options = (_f = requestJSON == null ? void 0 : requestJSON.options) != null ? _f : options;\n        this.cancelable = (_g = requestJSON == null ? void 0 : requestJSON.cancelable) != null ? _g : cancelable;\n        this.retry = (_h = requestJSON == null ? void 0 : requestJSON.retry) != null ? _h : retry;\n        this.retryTime = (_i = requestJSON == null ? void 0 : requestJSON.retryTime) != null ? _i : retryTime;\n        this.garbageCollection = (_j = requestJSON == null ? void 0 : requestJSON.garbageCollection) != null ? _j : garbageCollection;\n        this.cache = (_k = requestJSON == null ? void 0 : requestJSON.cache) != null ? _k : cache;\n        this.cacheTime = (_l = requestJSON == null ? void 0 : requestJSON.cacheTime) != null ? _l : cacheTime;\n        this.queued = (_m = requestJSON == null ? void 0 : requestJSON.queued) != null ? _m : queued;\n        this.offline = (_n = requestJSON == null ? void 0 : requestJSON.offline) != null ? _n : offline;\n        this.abortKey = (_p = (_o = requestJSON == null ? void 0 : requestJSON.abortKey) != null ? _o : abortKey) != null ? _p : this.client.abortKeyMapper(this);\n        this.cacheKey = (_r = (_q = requestJSON == null ? void 0 : requestJSON.cacheKey) != null ? _q : cacheKey) != null ? _r : this.client.cacheKeyMapper(this);\n        this.queueKey = (_t = (_s = requestJSON == null ? void 0 : requestJSON.queueKey) != null ? _s : queueKey) != null ? _t : this.client.queueKeyMapper(this);\n        this.effectKey = (_v = (_u = requestJSON == null ? void 0 : requestJSON.effectKey) != null ? _u : effectKey) != null ? _v : this.client.effectKeyMapper(this);\n        this.used = (_w = requestJSON == null ? void 0 : requestJSON.used) != null ? _w : false;\n        this.deduplicate = (_x = requestJSON == null ? void 0 : requestJSON.deduplicate) != null ? _x : deduplicate;\n        this.deduplicateTime = (_y = requestJSON == null ? void 0 : requestJSON.deduplicateTime) != null ? _y : deduplicateTime;\n        this.updatedAbortKey = (_z = requestJSON == null ? void 0 : requestJSON.updatedAbortKey) != null ? _z : false;\n        this.updatedCacheKey = (_A = requestJSON == null ? void 0 : requestJSON.updatedCacheKey) != null ? _A : false;\n        this.updatedQueueKey = (_B = requestJSON == null ? void 0 : requestJSON.updatedQueueKey) != null ? _B : false;\n        this.updatedEffectKey = (_C = requestJSON == null ? void 0 : requestJSON.updatedEffectKey) != null ? _C : false;\n    }\n    toJSON() {\n        return {\n            requestOptions: this.requestOptions,\n            endpoint: this.endpoint,\n            headers: this.headers,\n            auth: this.auth,\n            method: this.method,\n            params: this.params,\n            data: this.data,\n            queryParams: this.queryParams,\n            options: this.options,\n            cancelable: this.cancelable,\n            retry: this.retry,\n            retryTime: this.retryTime,\n            garbageCollection: this.garbageCollection,\n            cache: this.cache,\n            cacheTime: this.cacheTime,\n            queued: this.queued,\n            offline: this.offline,\n            abortKey: this.abortKey,\n            cacheKey: this.cacheKey,\n            queueKey: this.queueKey,\n            effectKey: this.effectKey,\n            used: this.used,\n            disableResponseInterceptors: this.requestOptions.disableResponseInterceptors,\n            disableRequestInterceptors: this.requestOptions.disableRequestInterceptors,\n            updatedAbortKey: this.updatedAbortKey,\n            updatedCacheKey: this.updatedCacheKey,\n            updatedQueueKey: this.updatedQueueKey,\n            updatedEffectKey: this.updatedEffectKey,\n            deduplicate: this.deduplicate,\n            deduplicateTime: this.deduplicateTime\n        };\n    }\n    clone(options) {\n        const json = this.toJSON();\n        const requestJSON = __spreadProps(__spreadValues(__spreadValues({}, json), options), {\n            params: options == null ? void 0 : options.params,\n            abortKey: this.updatedAbortKey ? (options == null ? void 0 : options.abortKey) || this.abortKey : void 0,\n            cacheKey: this.updatedCacheKey ? (options == null ? void 0 : options.cacheKey) || this.cacheKey : void 0,\n            queueKey: this.updatedQueueKey ? (options == null ? void 0 : options.queueKey) || this.queueKey : void 0,\n            endpoint: this.paramsMapper((options == null ? void 0 : options.params) || this.params, (options == null ? void 0 : options.queryParams) || this.queryParams),\n            queryParams: (options == null ? void 0 : options.queryParams) || this.queryParams,\n            // Typescript circular types issue - we have to leave any here\n            data: (options == null ? void 0 : options.data) || this.data\n        });\n        const cloned = new _Request(this.client, this.requestOptions, requestJSON);\n        cloned.dataMapper = this.dataMapper;\n        cloned.responseMapper = this.responseMapper;\n        cloned.requestMapper = this.requestMapper;\n        cloned.mockData = this.mockData;\n        cloned.mock = this.mock;\n        cloned.isMockEnabled = this.isMockEnabled;\n        return cloned;\n    }\n};\n// src/dispatcher/dispatcher.constants.ts\nvar DispatcherRequestType = /* @__PURE__ */ ((DispatcherRequestType2)=>{\n    DispatcherRequestType2[\"oneByOne\"] = \"one-by-one\";\n    DispatcherRequestType2[\"allAtOnce\"] = \"all-at-once\";\n    DispatcherRequestType2[\"previousCanceled\"] = \"previous-canceled\";\n    DispatcherRequestType2[\"deduplicated\"] = \"deduplicated\";\n    return DispatcherRequestType2;\n})(DispatcherRequestType || {});\n// src/dispatcher/dispatcher.events.ts\nvar getDispatcherEvents = (emitter)=>({\n        setDrained: (queueKey, values)=>{\n            emitter.emit(getDispatcherDrainedEventKey(queueKey), values);\n        },\n        setQueueStatus: (queueKey, values)=>{\n            emitter.emit(getDispatcherStatusEventKey(queueKey), values);\n        },\n        setQueueChanged: (queueKey, values)=>{\n            emitter.emit(getDispatcherChangeEventKey(queueKey), values);\n        },\n        onDrained: (queueKey, callback)=>{\n            emitter.on(getDispatcherDrainedEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDispatcherDrainedEventKey(queueKey), callback);\n        },\n        onQueueStatus: (queueKey, callback)=>{\n            emitter.on(getDispatcherStatusEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDispatcherStatusEventKey(queueKey), callback);\n        },\n        onQueueChange: (queueKey, callback)=>{\n            emitter.on(getDispatcherChangeEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDispatcherChangeEventKey(queueKey), callback);\n        }\n    });\n// src/dispatcher/dispatcher.ts\n\nvar Dispatcher = class {\n    constructor(client, options){\n        this.client = client;\n        this.options = options;\n        this.emitter = new (events__WEBPACK_IMPORTED_MODULE_2___default())();\n        this.events = getDispatcherEvents(this.emitter);\n        this.storage = /* @__PURE__ */ new Map();\n        this.requestCount = /* @__PURE__ */ new Map();\n        this.runningRequests = /* @__PURE__ */ new Map();\n        // ********************\n        // ********************\n        // Queue\n        // ********************\n        // ********************\n        /**\n     * Start request handling by queueKey\n     */ this.start = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            queue.stopped = false;\n            this.setQueue(queueKey, queue);\n            this.flushQueue(queueKey);\n            this.events.setQueueStatus(queueKey, queue);\n        };\n        /**\n     * Pause request queue, but not cancel already started requests\n     */ this.pause = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            queue.stopped = true;\n            this.setQueue(queueKey, queue);\n            this.events.setQueueStatus(queueKey, queue);\n        };\n        /**\n     * Stop request queue and cancel all started requests - those will be treated like not started\n     */ this.stop = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            queue.stopped = true;\n            this.setQueue(queueKey, queue);\n            this.cancelRunningRequests(queueKey);\n            this.events.setQueueStatus(queueKey, queue);\n        };\n        /**\n     * Return all\n     */ this.getQueuesKeys = ()=>{\n            return Array.from(this.storage.keys());\n        };\n        /**\n     * Return queue state object\n     */ this.getQueue = (queueKey)=>{\n            const initialQueueState = {\n                requests: [],\n                stopped: false\n            };\n            const storedEntity = this.storage.get(queueKey);\n            return storedEntity || initialQueueState;\n        };\n        /**\n     * Return request from queue state\n     */ this.getRequest = (queueKey, requestId)=>{\n            const initialQueueState = {\n                requests: [],\n                stopped: false\n            };\n            const storedEntity = this.storage.get(queueKey) || initialQueueState;\n            return storedEntity.requests.find((req)=>req.requestId === requestId);\n        };\n        /**\n     * Get value of the active queue status based on the stopped status\n     */ this.getIsActiveQueue = (queueKey)=>{\n            const queue = this.getQueue(queueKey);\n            const hasAvailableRequests = queue.requests.some((req)=>!req.stopped);\n            const isRunningQueue = !queue.stopped;\n            return hasAvailableRequests && isRunningQueue;\n        };\n        /**\n     * Add new element to storage\n     */ this.addQueueElement = (queueKey, dispatcherDump)=>{\n            const queue = this.getQueue(queueKey);\n            queue.requests.push(dispatcherDump);\n            this.setQueue(queueKey, queue);\n        };\n        /**\n     * Set new queue storage value\n     */ this.setQueue = (queueKey, queue)=>{\n            var _a, _b;\n            this.storage.set(queueKey, queue);\n            (_b = (_a = this.options) == null ? void 0 : _a.onUpdateStorage) == null ? void 0 : _b.call(_a, queueKey, queue);\n            this.events.setQueueChanged(queueKey, queue);\n            return queue;\n        };\n        /**\n     * Clear requests from queue cache\n     */ this.clearQueue = (queueKey)=>{\n            var _a, _b;\n            const queue = this.getQueue(queueKey);\n            const newQueue = {\n                requests: [],\n                stopped: queue.stopped\n            };\n            this.storage.set(queueKey, newQueue);\n            (_b = (_a = this.options) == null ? void 0 : _a.onDeleteFromStorage) == null ? void 0 : _b.call(_a, queueKey, newQueue);\n            this.events.setQueueChanged(queueKey, newQueue);\n            return newQueue;\n        };\n        /**\n     * Method used to flush the queue requests\n     */ this.flushQueue = (queueKey)=>__async(this, null, function*() {\n                const queue = this.getQueue(queueKey);\n                const runningRequests = this.getRunningRequests(queueKey);\n                const queueElement = queue.requests.find((request)=>!request.stopped);\n                const isStopped = queue && queue.stopped;\n                const isOffline = !this.client.appManager.isOnline;\n                const isConcurrent = !(queueElement == null ? void 0 : queueElement.request.queued);\n                const isInactive = !runningRequests.length;\n                const isEmpty = !queueElement;\n                if (isStopped || isOffline || isEmpty) {\n                    this.logger.debug(\"Skipping queue trigger\", {\n                        isStopped,\n                        isOffline,\n                        isEmpty\n                    });\n                } else if (isConcurrent) {\n                    queue.requests.forEach((element)=>{\n                        if (!this.hasRunningRequest(queueKey, element.requestId)) {\n                            this.performRequest(element);\n                        }\n                    });\n                } else if (isInactive) {\n                    yield this.performRequest(queueElement);\n                    this.flushQueue(queueKey);\n                }\n            });\n        /**\n     * Flush all available requests from all queues\n     */ this.flush = ()=>__async(this, null, function*() {\n                const keys = this.getQueuesKeys();\n                for (const key of keys){\n                    const storageElement = this.getQueue(key);\n                    if (storageElement) {\n                        this.flushQueue(key);\n                    }\n                }\n            });\n        /**\n     * Clear all running requests and storage\n     */ this.clear = ()=>{\n            var _a, _b;\n            const keys = this.getQueuesKeys();\n            keys.forEach((queueKey)=>this.cancelRunningRequests(queueKey));\n            this.runningRequests.clear();\n            this.storage.clear();\n            (_b = (_a = this.options) == null ? void 0 : _a.onClearStorage) == null ? void 0 : _b.call(_a, this);\n        };\n        // ********************\n        // ********************\n        // Requests\n        // ********************\n        // ********************\n        /**\n     * Start particular request\n     */ this.startRequest = (queueKey, requestId)=>{\n            const queue = this.getQueue(queueKey);\n            const request = queue.requests.find((element)=>element.requestId === requestId);\n            if (request) {\n                request.stopped = false;\n                this.setQueue(queueKey, queue);\n                this.flushQueue(queueKey);\n                this.events.setQueueStatus(queueKey, queue);\n            }\n        };\n        /**\n     * Stop particular request\n     */ this.stopRequest = (queueKey, requestId)=>{\n            const queue = this.getQueue(queueKey);\n            const request = queue.requests.find((element)=>element.requestId === requestId);\n            if (request) {\n                request.stopped = true;\n                this.setQueue(queueKey, queue);\n                this.cancelRunningRequest(queueKey, requestId);\n                this.events.setQueueStatus(queueKey, queue);\n            }\n        };\n        /**\n     * Get currently running requests from all queueKeys\n     */ this.getAllRunningRequest = ()=>{\n            return Array.from(this.runningRequests.values()).flat();\n        };\n        /**\n     * Get currently running requests\n     */ this.getRunningRequests = (queueKey)=>{\n            return this.runningRequests.get(queueKey) || [];\n        };\n        /**\n     * Get running request by id\n     */ this.getRunningRequest = (queueKey, requestId)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            return runningRequests.find((req)=>req.requestId === requestId);\n        };\n        /**\n     * Add request to the running requests list\n     */ this.addRunningRequest = (queueKey, requestId, request)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            runningRequests.push({\n                requestId,\n                request,\n                timestamp: Date.now()\n            });\n            this.runningRequests.set(queueKey, runningRequests);\n        };\n        /**\n     * Get the value based on the currently running requests\n     */ this.hasRunningRequests = (queueKey)=>{\n            return !!this.getRunningRequests(queueKey).length;\n        };\n        /**\n     * Check if request is currently processing\n     */ this.hasRunningRequest = (queueKey, requestId)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            return !!runningRequests.find((req)=>req.requestId === requestId);\n        };\n        /**\n     * Cancel all started requests, but do NOT remove it from main storage\n     */ this.cancelRunningRequests = (queueKey)=>{\n            var _a;\n            (_a = this.runningRequests.get(queueKey)) == null ? void 0 : _a.forEach((request)=>{\n                this.client.requestManager.abortByRequestId(request.request.abortKey, request.requestId);\n            });\n            this.deleteRunningRequests(queueKey);\n        };\n        /**\n     * Cancel started request, but do NOT remove it from main storage\n     */ this.cancelRunningRequest = (queueKey, requestId)=>{\n            const requests = this.getRunningRequests(queueKey).filter((request)=>{\n                if (request.requestId === requestId) {\n                    this.client.requestManager.abortByRequestId(request.request.abortKey, request.requestId);\n                    return false;\n                }\n                return true;\n            });\n            this.runningRequests.set(queueKey, requests);\n        };\n        /**\n     * Delete all started requests, but do NOT clear it from queue and do NOT cancel them\n     */ this.deleteRunningRequests = (queueKey)=>{\n            this.runningRequests.set(queueKey, []);\n        };\n        /**\n     * Delete request by id, but do NOT clear it from queue and do NOT cancel them\n     */ this.deleteRunningRequest = (queueKey, requestId)=>{\n            const runningRequests = this.getRunningRequests(queueKey);\n            this.runningRequests.set(queueKey, runningRequests.filter((req)=>req.requestId !== requestId));\n        };\n        /**\n     * Get count of requests from the same queueKey\n     */ this.getQueueRequestCount = (queueKey)=>{\n            return this.requestCount.get(queueKey) || 0;\n        };\n        /**\n     * Add request count to the queueKey\n     */ this.incrementQueueRequestCount = (queueKey)=>{\n            const count = this.requestCount.get(queueKey) || 0;\n            this.requestCount.set(queueKey, count + 1);\n        };\n        /**\n     * Create storage element from request\n     */ // eslint-disable-next-line class-methods-use-this\n        this.createStorageElement = (request)=>{\n            const requestId = getUniqueRequestId(request.queueKey);\n            const storageElement = {\n                requestId,\n                timestamp: +/* @__PURE__ */ new Date(),\n                request,\n                retries: 0,\n                stopped: false\n            };\n            return storageElement;\n        };\n        // ********************\n        // ********************\n        // Dispatching\n        // ********************\n        // ********************\n        /**\n     * Add request to the dispatcher handler\n     */ this.add = (request)=>{\n            const { queueKey } = request;\n            const storageElement = this.createStorageElement(request);\n            const { requestId } = storageElement;\n            const queue = this.getQueue(queueKey);\n            const [latestRequest] = queue.requests.slice(-1);\n            const requestType = getRequestType(request, latestRequest);\n            this.logger.debug(\"Adding request to queue\", {\n                requestType,\n                request,\n                requestId\n            });\n            switch(requestType){\n                case \"one-by-one\" /* oneByOne */ :\n                    {\n                        this.addQueueElement(queueKey, storageElement);\n                        this.flushQueue(queueKey);\n                        return requestId;\n                    }\n                case \"previous-canceled\" /* previousCanceled */ :\n                    {\n                        this.cancelRunningRequests(queueKey);\n                        this.clearQueue(queueKey);\n                        this.addQueueElement(queueKey, storageElement);\n                        this.flushQueue(queueKey);\n                        return requestId;\n                    }\n                case \"deduplicated\" /* deduplicated */ :\n                    {\n                        return queue.requests[0].requestId;\n                    }\n                default:\n                    {\n                        this.addQueueElement(queueKey, storageElement);\n                        this.flushQueue(queueKey);\n                        return requestId;\n                    }\n            }\n        };\n        /**\n     * Delete from the storage and cancel request\n     */ this.delete = (queueKey, requestId, abortKey)=>{\n            var _a, _b;\n            this.logger.debug(\"Deleting request\", {\n                queueKey,\n                requestId,\n                abortKey\n            });\n            const queue = this.getQueue(queueKey);\n            const queueElement = queue.requests.find((req)=>req.requestId === requestId);\n            if (!queueElement) return;\n            queue.requests = queue.requests.filter((req)=>req.requestId !== requestId);\n            this.storage.set(queueKey, queue);\n            if (this.hasRunningRequest(queueKey, requestId)) {\n                this.deleteRunningRequest(queueKey, requestId);\n                this.client.requestManager.abortByRequestId(abortKey, requestId);\n            }\n            (_b = (_a = this.options) == null ? void 0 : _a.onDeleteFromStorage) == null ? void 0 : _b.call(_a, queueKey, queue);\n            this.events.setQueueChanged(queueKey, queue);\n            this.client.requestManager.events.emitRemove(queueKey, requestId, {\n                requestId,\n                request: queueElement.request\n            });\n            if (!queue.requests.length) {\n                this.events.setDrained(queueKey, queue);\n            }\n            return queue;\n        };\n        /**\n     * Request can run for some time, once it's done, we have to check if it's successful or if it was aborted\n     * It can be different once the previous call was set as cancelled and removed from queue before this request got resolved\n     */ this.performRequest = (storageElement)=>__async(this, null, function*() {\n                var _a;\n                const { request, requestId } = storageElement;\n                this.logger.info(\"Performing request\", {\n                    request,\n                    requestId\n                });\n                const { retry, retryTime, queueKey, cacheKey, abortKey, offline } = request;\n                const { adapter: adapter4, requestManager, cache, appManager } = this.client;\n                const canRetry = canRetryRequest(storageElement.retries, retry);\n                const isOffline = !appManager.isOnline && offline;\n                const isAlreadyRunning = this.hasRunningRequest(queueKey, requestId);\n                const isStopped = storageElement.stopped;\n                if (isOffline || isAlreadyRunning || isStopped) {\n                    return this.logger.warning(\"Unable to perform request\", {\n                        isOffline,\n                        isAlreadyRunning,\n                        isStopped\n                    });\n                }\n                this.addRunningRequest(queueKey, requestId, request);\n                requestManager.events.emitLoading(queueKey, requestId, {\n                    queueKey,\n                    requestId,\n                    loading: true,\n                    isRetry: !!storageElement.retries,\n                    isOffline\n                });\n                this.incrementQueueRequestCount(queueKey);\n                requestManager.addAbortController(abortKey, requestId);\n                const response = yield adapter4(request, requestId);\n                requestManager.removeAbortController(abortKey, requestId);\n                const isOfflineResponseStatus = !appManager.isOnline;\n                const isCancelMessage = getErrorMessage(\"abort\").message === ((_a = response.error) == null ? void 0 : _a.message);\n                const isCanceled = !this.hasRunningRequest(queueKey, requestId) || isCancelMessage;\n                this.deleteRunningRequest(queueKey, requestId);\n                const requestDetails = {\n                    isCanceled,\n                    isOffline: isOfflineResponseStatus,\n                    retries: storageElement.retries,\n                    timestamp: +/* @__PURE__ */ new Date()\n                };\n                requestManager.events.emitLoading(queueKey, requestId, {\n                    queueKey,\n                    requestId,\n                    loading: false,\n                    isRetry: !!storageElement.retries,\n                    isOffline\n                });\n                requestManager.events.emitResponse(cacheKey, requestId, response, requestDetails);\n                cache.set(request, __spreadValues(__spreadValues({}, response), requestDetails));\n                this.logger.info(\"Request finished\", {\n                    requestId,\n                    request,\n                    response,\n                    requestDetails\n                });\n                if (isCanceled) {\n                    const queue = this.getQueue(queueKey);\n                    const queueElement = queue.requests.find((req)=>req.requestId === requestId);\n                    if (!queue.stopped && !(queueElement == null ? void 0 : queueElement.stopped)) {\n                        this.logger.debug(\"Request paused\", {\n                            response,\n                            requestDetails,\n                            request\n                        });\n                        return this.delete(queueKey, requestId, abortKey);\n                    }\n                    return this.logger.debug(\"Request canceled\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                }\n                if (!response.success && isOfflineResponseStatus) {\n                    if (!offline) {\n                        this.logger.warning(\"Removing non-offline request\", {\n                            response,\n                            requestDetails,\n                            request\n                        });\n                        return this.delete(queueKey, requestId, abortKey);\n                    }\n                    return this.logger.debug(\"Awaiting for network restoration\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                }\n                if (response.success) {\n                    this.delete(queueKey, requestId, abortKey);\n                    return this.logger.debug(\"Successful response, removing request from queue.\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                }\n                if (!response.success && canRetry) {\n                    this.logger.debug(\"Waiting for retry\", {\n                        response,\n                        requestDetails,\n                        request\n                    });\n                    setTimeout(()=>{\n                        this.logger.warning(\"Error response, performing retry\");\n                        this.performRequest(__spreadProps(__spreadValues({}, storageElement), {\n                            retries: storageElement.retries + 1\n                        }));\n                    }, retryTime || 0);\n                } else {\n                    this.logger.error(\"All retries have been used. Removing request from queue.\");\n                    this.delete(queueKey, requestId, abortKey);\n                }\n            });\n        var _a, _b, _c, _d;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        this.logger = client.loggerManager.init(\"Dispatcher\");\n        if ((_b = this.options) == null ? void 0 : _b.storage) {\n            this.storage = this.options.storage;\n        }\n        this.client.appManager.events.onOnline(()=>{\n            this.flush();\n        });\n        (_d = (_c = this.options) == null ? void 0 : _c.onInitialization) == null ? void 0 : _d.call(_c, this);\n    }\n};\n// src/dispatcher/dispatcher.utils.ts\nvar getDispatcherDrainedEventKey = (key)=>{\n    return `${key}-drained-event`;\n};\nvar getDispatcherStatusEventKey = (key)=>{\n    return `${key}-status-event`;\n};\nvar getDispatcherChangeEventKey = (key)=>{\n    return `${key}-change-event`;\n};\nvar getIsEqualTimestamp = (currentTimestamp, threshold, queueTimestamp)=>{\n    if (!queueTimestamp) {\n        return false;\n    }\n    return queueTimestamp - currentTimestamp <= threshold;\n};\nvar canRetryRequest = (currentRetries, retry)=>{\n    if (retry && currentRetries < retry) {\n        return true;\n    }\n    return false;\n};\nvar getRequestType = (request, latestRequest)=>{\n    const { queued, cancelable, deduplicate } = request;\n    const canDeduplicate = latestRequest ? +/* @__PURE__ */ new Date() - latestRequest.timestamp <= request.deduplicateTime : false;\n    if (queued) {\n        return \"one-by-one\" /* oneByOne */ ;\n    }\n    if (cancelable) {\n        return \"previous-canceled\" /* previousCanceled */ ;\n    }\n    if (canDeduplicate && deduplicate) {\n        return \"deduplicated\" /* deduplicated */ ;\n    }\n    return \"all-at-once\" /* allAtOnce */ ;\n};\n// src/request/request.utils.ts\nvar stringifyKey = (value)=>{\n    try {\n        if (typeof value === \"string\") return value;\n        if (value === void 0 || value === null) return \"\";\n        const data = JSON.stringify(value);\n        if (typeof data !== \"string\") throw new Error();\n        return data;\n    } catch (_) {\n        return \"\";\n    }\n};\nvar getProgressValue = ({ loaded, total })=>{\n    if (!loaded || !total) return 0;\n    return Number((loaded * 100 / total).toFixed(0));\n};\nvar getRequestEta = (startDate, progressDate, { total, loaded })=>{\n    const timeElapsed = +progressDate - +startDate || 1;\n    const uploadSpeed = loaded / timeElapsed;\n    const totalValue = Math.max(total, loaded);\n    const sizeLeft = totalValue - loaded;\n    const estimatedTimeValue = uploadSpeed ? sizeLeft / uploadSpeed : null;\n    const timeLeft = totalValue === loaded ? 0 : estimatedTimeValue;\n    return {\n        timeLeft,\n        sizeLeft\n    };\n};\nvar getProgressData = (requestStartTime, progressDate, progressEvent)=>{\n    const { total, loaded } = progressEvent;\n    if (Number.isNaN(total) || Number.isNaN(loaded)) {\n        return {\n            progress: 0,\n            timeLeft: 0,\n            sizeLeft: 0,\n            total: 0,\n            loaded: 0,\n            startTimestamp: +requestStartTime\n        };\n    }\n    const { timeLeft, sizeLeft } = getRequestEta(requestStartTime, progressDate, progressEvent);\n    return {\n        progress: getProgressValue(progressEvent),\n        timeLeft,\n        sizeLeft,\n        total,\n        loaded,\n        startTimestamp: +requestStartTime\n    };\n};\nvar getSimpleKey = (request)=>{\n    return `${request.method}_${request.requestOptions.endpoint}_${request.cancelable}`;\n};\nvar getRequestKey = (request, useInitialValues)=>{\n    const methodKey = stringifyKey(request.method);\n    const endpointKey = useInitialValues ? request.requestOptions.endpoint : stringifyKey(request.endpoint);\n    return `${methodKey}_${endpointKey}`;\n};\nvar getRequestDispatcher = (request, dispatcherType = \"auto\")=>{\n    const { fetchDispatcher, submitDispatcher } = request.client;\n    const isGet = request.method === \"GET\" /* get */ ;\n    const isFetchDispatcher = dispatcherType === \"auto\" && isGet || dispatcherType === \"fetch\";\n    const dispatcher = isFetchDispatcher ? fetchDispatcher : submitDispatcher;\n    return [\n        dispatcher,\n        isFetchDispatcher\n    ];\n};\nvar sendRequest = (request, options)=>{\n    const { requestManager } = request.client;\n    const [dispatcher] = getRequestDispatcher(request, options == null ? void 0 : options.dispatcherType);\n    return new Promise((resolve)=>{\n        var _a;\n        let isResolved = false;\n        const requestId = dispatcher.add(request);\n        (_a = options == null ? void 0 : options.onSettle) == null ? void 0 : _a.call(options, requestId, request);\n        const unmountRequestStart = requestManager.events.onRequestStartById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onRequestStart) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountResponseStart = requestManager.events.onResponseStartById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onResponseStart) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountUpload = requestManager.events.onUploadProgressById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onUploadProgress) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountDownload = requestManager.events.onDownloadProgressById(requestId, (...props)=>{\n            var _a2;\n            return (_a2 = options == null ? void 0 : options.onDownloadProgress) == null ? void 0 : _a2.call(options, ...props);\n        });\n        const unmountResponse = requestManager.events.onResponseById(requestId, (response, details)=>{\n            var _a2;\n            isResolved = true;\n            const mapping = (_a2 = request.responseMapper) == null ? void 0 : _a2.call(request, response);\n            const isOfflineStatus = request.offline && details.isOffline;\n            const willRetry = canRetryRequest(details.retries, request.retry);\n            const handleResponse = (success, data)=>{\n                var _a3;\n                if (!success && isOfflineStatus) return;\n                if (!success && willRetry) return;\n                (_a3 = options == null ? void 0 : options.onResponse) == null ? void 0 : _a3.call(options, data, details);\n                resolve(data);\n                umountAll();\n            };\n            if (mapping instanceof Promise) {\n                (()=>__async(void 0, null, function*() {\n                        const responseData = yield mapping;\n                        const { success } = responseData;\n                        handleResponse(success, responseData);\n                    }))();\n            } else {\n                const data = mapping || response;\n                const { success } = data;\n                handleResponse(success, data);\n            }\n        });\n        const unmountRemoveQueueElement = requestManager.events.onRemoveById(requestId, (...props)=>{\n            var _a2;\n            if (!isResolved) {\n                (_a2 = options == null ? void 0 : options.onRemove) == null ? void 0 : _a2.call(options, ...props);\n                resolve({\n                    data: null,\n                    status: null,\n                    success: null,\n                    error: getErrorMessage(\"deleted\"),\n                    extra: request.client.defaultExtra\n                });\n                umountAll();\n            }\n        });\n        function umountAll() {\n            unmountRequestStart();\n            unmountResponseStart();\n            unmountUpload();\n            unmountDownload();\n            unmountResponse();\n            unmountRemoveQueueElement();\n        }\n    });\n};\n// src/mocker/mocker.ts\nvar mocker = (_0, _1)=>__async(void 0, [\n        _0,\n        _1\n    ], function*(request, { onError, onResponseEnd, onTimeoutError, onRequestEnd, createAbortListener, onResponseProgress, onRequestProgress, onResponseStart, onBeforeRequest, onRequestStart, onSuccess }) {\n        const mock = request.mock.next();\n        const result = mock.value instanceof Function ? yield mock.value(request) : mock.value;\n        return new Promise((resolve)=>{\n            const { data, status = 200, success = true, extra, config } = result;\n            const { requestTime = 20, responseTime = 20, totalUploaded = 1, totalDownloaded = 1, timeout = false } = config || {};\n            createAbortListener(0, {}, ()=>{}, resolve);\n            onBeforeRequest();\n            onRequestStart();\n            const progress = (totalTime, totalSize, progressFunction)=>new Promise((resolveProgress)=>{\n                    const interval = 20;\n                    const dataStart = +/* @__PURE__ */ new Date();\n                    const chunkSize = Math.floor(totalSize / Math.floor(totalTime / Math.min(totalTime, interval)));\n                    let currentlyLoaded = 0;\n                    const timer = setInterval(function handleProgressInterval() {\n                        const currentTime = Math.min(totalTime, +/* @__PURE__ */ new Date() - dataStart);\n                        currentlyLoaded += currentlyLoaded + chunkSize >= totalSize ? totalSize - currentlyLoaded : chunkSize;\n                        if (currentTime >= totalTime) {\n                            resolveProgress(true);\n                            clearInterval(timer);\n                        } else {\n                            progressFunction({\n                                total: totalSize,\n                                loaded: currentlyLoaded\n                            });\n                        }\n                    }, interval);\n                });\n            const getResponse = ()=>__async(void 0, null, function*() {\n                    yield progress(requestTime, totalUploaded, onRequestProgress);\n                    onRequestEnd();\n                    onResponseStart();\n                    yield progress(responseTime, totalDownloaded, onResponseProgress);\n                    if (success) {\n                        onSuccess(data, status, extra || {}, resolve);\n                    } else {\n                        onError(data, status, extra || {}, resolve);\n                    }\n                });\n            if (timeout) {\n                setTimeout(()=>onTimeoutError(0, extra || {}, resolve), 1);\n            } else {\n                setTimeout(getResponse, requestTime + responseTime + 1);\n            }\n            onResponseEnd();\n        });\n    });\n// src/adapter/adapter.bindings.ts\nvar getAdapterBindings = (req, requestId, systemErrorStatus, systemErrorExtra)=>__async(void 0, null, function*() {\n        const { url, requestManager, loggerManager, headerMapper, payloadMapper } = req.client;\n        const logger2 = loggerManager.init(\"Adapter\");\n        let processingError = null;\n        let requestStartTimestamp = null;\n        let responseStartTimestamp = null;\n        let request = req;\n        let requestTotal = 1;\n        let responseTotal = 1;\n        let previousRequestTotal = 0;\n        let previousResponseTotal = 0;\n        logger2.debug(`Starting request middleware callbacks`);\n        try {\n            request = yield request.client.__modifyRequest(req);\n            if (request.auth) {\n                request = yield request.client.__modifyAuth(req);\n            }\n            if (request.requestMapper) {\n                request = yield request.requestMapper(request, requestId);\n            }\n        } catch (err) {\n            processingError = err;\n        }\n        const { client, abortKey, queueKey, endpoint, data } = request;\n        const fullUrl = url + endpoint;\n        const effects = client.effects.filter((effect)=>request.effectKey === effect.getEffectKey());\n        const headers = headerMapper(request);\n        let payload = data;\n        try {\n            payload = payloadMapper(data);\n            if (request.dataMapper) {\n                payload = yield request.dataMapper(data);\n            }\n        } catch (err) {\n            processingError = err;\n        }\n        const config = __spreadValues({}, request.options);\n        const getRequestStartTimestamp = ()=>{\n            return requestStartTimestamp;\n        };\n        const getResponseStartTimestamp = ()=>{\n            return responseStartTimestamp;\n        };\n        const getTotal = (previousTotal, progress)=>{\n            if (!progress) return previousTotal;\n            const total = Number(progress.total || 0);\n            const loaded = Number(progress.loaded || 0);\n            return Math.max(total, loaded, previousTotal);\n        };\n        const handleRequestProgress = (startTimestamp, progressTimestamp, progressEvent)=>{\n            const progress = getProgressData(new Date(startTimestamp), new Date(progressTimestamp), progressEvent);\n            if (previousRequestTotal !== 100) {\n                previousRequestTotal = progress.total;\n                requestManager.events.emitUploadProgress(queueKey, requestId, progress, {\n                    requestId,\n                    request\n                });\n            }\n        };\n        const handleResponseProgress = (startTimestamp, progressTimestamp, progressEvent)=>{\n            const progress = getProgressData(new Date(startTimestamp), new Date(progressTimestamp), progressEvent);\n            if (previousResponseTotal !== 100) {\n                previousResponseTotal = progress.total;\n                requestManager.events.emitDownloadProgress(queueKey, requestId, progress, {\n                    requestId,\n                    request\n                });\n            }\n        };\n        const onBeforeRequest = ()=>{\n            effects.forEach((effect)=>effect.onTrigger(request));\n        };\n        const onRequestStart = (progress)=>{\n            effects.forEach((action)=>action.onStart(request));\n            if (progress == null ? void 0 : progress.total) {\n                requestTotal = getTotal(requestTotal, progress);\n            }\n            const initialPayload = {\n                total: requestTotal,\n                loaded: (progress == null ? void 0 : progress.loaded) || 0\n            };\n            requestStartTimestamp = +/* @__PURE__ */ new Date();\n            handleRequestProgress(requestStartTimestamp, requestStartTimestamp, initialPayload);\n            requestManager.events.emitRequestStart(queueKey, requestId, {\n                requestId,\n                request\n            });\n            return requestStartTimestamp;\n        };\n        const onRequestProgress = (progress)=>{\n            if (!requestStartTimestamp) {\n                requestStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            requestTotal = getTotal(requestTotal, progress);\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            handleRequestProgress(requestStartTimestamp, progressTimestamp, {\n                total: requestTotal,\n                loaded: progress.loaded || 0\n            });\n            return progressTimestamp;\n        };\n        const onRequestEnd = ()=>{\n            if (!requestStartTimestamp) {\n                requestStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            handleRequestProgress(requestStartTimestamp, progressTimestamp, {\n                total: requestTotal,\n                loaded: requestTotal\n            });\n            return progressTimestamp;\n        };\n        const onResponseStart = (progress)=>{\n            responseStartTimestamp = +/* @__PURE__ */ new Date();\n            responseTotal = getTotal(responseTotal, progress);\n            const initialPayload = {\n                total: responseTotal,\n                loaded: (progress == null ? void 0 : progress.loaded) || 0\n            };\n            handleResponseProgress(responseStartTimestamp, responseStartTimestamp, initialPayload);\n            requestManager.events.emitResponseStart(queueKey, requestId, {\n                requestId,\n                request\n            });\n            return responseStartTimestamp;\n        };\n        const onResponseProgress = (progress)=>{\n            if (!responseStartTimestamp) {\n                responseStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            responseTotal = getTotal(responseTotal, progress);\n            handleResponseProgress(responseStartTimestamp, progressTimestamp, {\n                total: progress.total || responseTotal,\n                loaded: progress.loaded || 0\n            });\n            return progressTimestamp;\n        };\n        const onResponseEnd = ()=>{\n            if (!responseStartTimestamp) {\n                responseStartTimestamp = +/* @__PURE__ */ new Date();\n            }\n            const progressTimestamp = +/* @__PURE__ */ new Date();\n            handleResponseProgress(responseStartTimestamp, progressTimestamp, {\n                total: responseTotal,\n                loaded: responseTotal\n            });\n            return progressTimestamp;\n        };\n        const onSuccess = (responseData, status, extra, resolve)=>__async(void 0, null, function*() {\n                let response = {\n                    data: responseData,\n                    error: null,\n                    success: true,\n                    status,\n                    extra\n                };\n                response = yield request.client.__modifyResponse(response, request);\n                response = yield request.client.__modifySuccessResponse(response, request);\n                effects.forEach((effect)=>effect.onSuccess(response, request));\n                effects.forEach((effect)=>effect.onFinished(response, request));\n                resolve(response);\n                return response;\n            });\n        const onError = (error, status, extra, resolve)=>__async(void 0, null, function*() {\n                let responseData = {\n                    data: null,\n                    status,\n                    error,\n                    success: false,\n                    extra\n                };\n                responseData = yield request.client.__modifyResponse(responseData, request);\n                responseData = yield request.client.__modifyErrorResponse(responseData, request);\n                effects.forEach((effect)=>effect.onError(responseData, request));\n                effects.forEach((effect)=>effect.onFinished(responseData, request));\n                resolve(responseData);\n                return responseData;\n            });\n        const onAbortError = (status, extra, resolve)=>{\n            const error = getErrorMessage(\"abort\");\n            return onError(error, status, extra, resolve);\n        };\n        const onTimeoutError = (status, extra, resolve)=>{\n            const error = getErrorMessage(\"timeout\");\n            return onError(error, status, extra, resolve);\n        };\n        const onUnexpectedError = (status, extra, resolve)=>{\n            const error = getErrorMessage();\n            return onError(error, status, extra, resolve);\n        };\n        const getAbortController = ()=>{\n            return requestManager.getAbortController(abortKey, requestId);\n        };\n        const createAbortListener = (status, abortExtra, callback, resolve)=>{\n            const controller = getAbortController();\n            if (!controller) {\n                throw new Error(\"Controller is not found\");\n            }\n            const fn = ()=>{\n                onAbortError(status, abortExtra, resolve);\n                callback();\n                requestManager.events.emitAbort(abortKey, requestId, request);\n            };\n            if (controller.signal.aborted) {\n                fn();\n            }\n            controller.signal.addEventListener(\"abort\", fn);\n            return ()=>controller.signal.removeEventListener(\"abort\", fn);\n        };\n        const makeRequest = (apiCall)=>{\n            if (processingError) {\n                return onError(processingError, systemErrorStatus, systemErrorExtra, ()=>null);\n            }\n            if (req.mock && req.isMockEnabled && req.client.isMockEnabled) {\n                return mocker(request, {\n                    onError,\n                    onResponseEnd,\n                    onTimeoutError,\n                    onRequestEnd,\n                    createAbortListener,\n                    onResponseProgress,\n                    onRequestProgress,\n                    onResponseStart,\n                    onBeforeRequest,\n                    onRequestStart,\n                    onSuccess\n                });\n            }\n            return new Promise(apiCall);\n        };\n        logger2.debug(`Finishing request bindings creation`, {\n            fullUrl,\n            data,\n            headers,\n            payload,\n            config\n        });\n        return {\n            fullUrl,\n            data,\n            headers,\n            payload,\n            config,\n            getAbortController,\n            getRequestStartTimestamp,\n            getResponseStartTimestamp,\n            createAbortListener,\n            onBeforeRequest,\n            onRequestStart,\n            onRequestProgress,\n            onRequestEnd,\n            onResponseStart,\n            onResponseProgress,\n            onResponseEnd,\n            onSuccess,\n            onAbortError,\n            onTimeoutError,\n            onUnexpectedError,\n            onError,\n            makeRequest\n        };\n    });\n// src/cache/cache.ts\n\nvar Cache = class {\n    constructor(client, options){\n        this.client = client;\n        this.options = options;\n        this.emitter = new (events__WEBPACK_IMPORTED_MODULE_2___default())();\n        this.garbageCollectors = /* @__PURE__ */ new Map();\n        /**\n     * Set the cache data to the storage\n     * @param request\n     * @param response\n     * @returns\n     */ this.set = (request, response)=>{\n            var _a, _b, _c;\n            this.logger.debug(\"Processing cache response\", {\n                request,\n                response\n            });\n            const { cacheKey, cache, cacheTime, garbageCollection } = request;\n            const cachedData = this.storage.get(cacheKey);\n            const processedResponse = typeof response === \"function\" ? response(cachedData) : response;\n            const data = getCacheData(cachedData, processedResponse);\n            const newCacheData = __spreadProps(__spreadValues({}, data), {\n                cacheTime,\n                clearKey: this.clearKey,\n                garbageCollection\n            });\n            this.events.emitCacheData(cacheKey, newCacheData);\n            this.logger.debug(\"Emitting cache response\", {\n                request,\n                data\n            });\n            if (!cache) {\n                return this.logger.debug(\"Prevented saving response to cache\", {\n                    request,\n                    data\n                });\n            }\n            if (processedResponse.success) {\n                this.logger.debug(\"Saving response to cache storage\", {\n                    request,\n                    data\n                });\n                this.storage.set(cacheKey, newCacheData);\n                (_a = this.lazyStorage) == null ? void 0 : _a.set(cacheKey, newCacheData);\n                (_c = (_b = this.options) == null ? void 0 : _b.onChange) == null ? void 0 : _c.call(_b, cacheKey, newCacheData);\n                this.scheduleGarbageCollector(cacheKey);\n            }\n        };\n        /**\n     * Update the cache data with partial response data\n     * @param request\n     * @param partialResponse\n     * @returns\n     */ this.update = (request, partialResponse)=>{\n            this.logger.debug(\"Processing cache update\", {\n                request,\n                partialResponse\n            });\n            const { cacheKey } = request;\n            const cachedData = this.storage.get(cacheKey);\n            const processedResponse = typeof partialResponse === \"function\" ? partialResponse(cachedData) : partialResponse;\n            if (cachedData) {\n                this.set(request, __spreadValues(__spreadValues({}, cachedData), processedResponse));\n            }\n        };\n        /**\n     * Get particular record from storage by cacheKey. It will trigger lazyStorage to emit lazy load event for reading it's data.\n     * @param cacheKey\n     * @returns\n     */ this.get = (cacheKey)=>{\n            this.getLazyResource(cacheKey);\n            const cachedData = this.storage.get(cacheKey);\n            return cachedData;\n        };\n        /**\n     * Get sync storage keys, lazyStorage keys will not be included\n     * @returns\n     */ this.keys = ()=>{\n            const values = this.storage.keys();\n            return Array.from(values);\n        };\n        /**\n     * Delete record from storages and trigger invalidation event\n     * @param cacheKey\n     */ this.delete = (cacheKey)=>{\n            var _a, _b, _c;\n            this.logger.debug(\"Deleting cache element\", {\n                cacheKey\n            });\n            this.storage.delete(cacheKey);\n            (_b = (_a = this.options) == null ? void 0 : _a.onDelete) == null ? void 0 : _b.call(_a, cacheKey);\n            (_c = this.lazyStorage) == null ? void 0 : _c.delete(cacheKey);\n        };\n        /**\n     * Invalidate cache by cacheKey or partial matching with RegExp\n     * @param cacheKey\n     */ this.invalidate = (cacheKey)=>__async(this, null, function*() {\n                this.logger.debug(\"Revalidating cache element\", {\n                    cacheKey\n                });\n                const keys = yield this.getLazyKeys();\n                if (typeof cacheKey === \"string\") {\n                    this.events.emitInvalidation(cacheKey);\n                    this.delete(cacheKey);\n                } else {\n                    for (const entityKey of keys){\n                        if (cacheKey.test(entityKey)) {\n                            this.events.emitInvalidation(entityKey);\n                            this.delete(entityKey);\n                        }\n                    }\n                }\n            });\n        /**\n     * Used to receive data from lazy storage\n     * @param cacheKey\n     */ this.getLazyResource = (cacheKey)=>__async(this, null, function*() {\n                var _a;\n                const data = yield (_a = this.lazyStorage) == null ? void 0 : _a.get(cacheKey);\n                const syncData = this.storage.get(cacheKey);\n                const hasLazyData = this.lazyStorage && data;\n                if (hasLazyData) {\n                    const now = +/* @__PURE__ */ new Date();\n                    const isNewestData = syncData ? syncData.timestamp < data.timestamp : true;\n                    const isStaleData = data.cacheTime <= now - data.timestamp;\n                    const isValidLazyData = data.clearKey === this.clearKey;\n                    if (!isValidLazyData) {\n                        this.lazyStorage.delete(cacheKey);\n                    }\n                    if (isNewestData && !isStaleData && isValidLazyData) {\n                        this.storage.set(cacheKey, data);\n                        this.events.emitCacheData(cacheKey, data);\n                        return data;\n                    }\n                }\n                const isValidData = (syncData == null ? void 0 : syncData.clearKey) === this.clearKey;\n                if (syncData && !isValidData) {\n                    this.delete(cacheKey);\n                }\n                return syncData;\n            });\n        /**\n     * Used to receive keys from sync storage and lazy storage\n     * @param cacheKey\n     */ this.getLazyKeys = ()=>__async(this, null, function*() {\n                var _a;\n                const keys = yield (_a = this.lazyStorage) == null ? void 0 : _a.keys();\n                const asyncKeys = Array.from(keys || []);\n                const syncKeys = Array.from(this.storage.keys());\n                return [\n                    .../* @__PURE__ */ new Set([\n                        ...asyncKeys,\n                        ...syncKeys\n                    ])\n                ];\n            });\n        /**\n     * Schedule garbage collection for given key\n     * @param cacheKey\n     * @returns\n     */ this.scheduleGarbageCollector = (cacheKey)=>__async(this, null, function*() {\n                const cacheData = yield this.getLazyResource(cacheKey);\n                clearTimeout(this.garbageCollectors.get(cacheKey));\n                if (cacheData) {\n                    const timeLeft = cacheData.garbageCollection + cacheData.timestamp - +/* @__PURE__ */ new Date();\n                    if (cacheData.garbageCollection !== null && JSON.stringify(cacheData.garbageCollection) === \"null\") {\n                        this.logger.info(\"Cache value is Infinite\", {\n                            cacheKey\n                        });\n                    } else if (timeLeft >= 0) {\n                        this.garbageCollectors.set(cacheKey, setTimeout(()=>{\n                            if (this.client.appManager.isOnline) {\n                                this.logger.info(\"Garbage collecting cache element\", {\n                                    cacheKey\n                                });\n                                this.delete(cacheKey);\n                            }\n                        }, timeLeft));\n                    } else if (this.client.appManager.isOnline) {\n                        this.logger.info(\"Garbage collecting cache element\", {\n                            cacheKey\n                        });\n                        this.delete(cacheKey);\n                    }\n                }\n            });\n        /**\n     * Clear cache storages\n     */ this.clear = ()=>__async(this, null, function*() {\n                this.storage.clear();\n            });\n        var _a, _b, _c, _d, _e, _f;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        this.storage = ((_b = this.options) == null ? void 0 : _b.storage) || /* @__PURE__ */ new Map();\n        this.events = getCacheEvents(this.emitter);\n        (_d = (_c = this.options) == null ? void 0 : _c.onInitialization) == null ? void 0 : _d.call(_c, this);\n        this.clearKey = ((_e = this.options) == null ? void 0 : _e.clearKey) || \"\";\n        this.lazyStorage = (_f = this.options) == null ? void 0 : _f.lazyStorage;\n        this.logger = this.client.loggerManager.init(\"Cache\");\n        this.getLazyKeys().then((keys)=>{\n            keys.forEach(this.scheduleGarbageCollector);\n        });\n        this.client.appManager.events.onOnline(()=>{\n            this.getLazyKeys().then((keys)=>{\n                keys.forEach(this.scheduleGarbageCollector);\n            });\n        });\n    }\n};\n// src/cache/cache.utils.ts\nvar getCacheData = (previousResponse, response)=>{\n    const { data, success } = response;\n    const previousData = !success && previousResponse ? previousResponse.data : null;\n    const computedData = data || previousData;\n    return __spreadProps(__spreadValues({}, response), {\n        data: computedData\n    });\n};\nvar getInvalidateEventKey = (key)=>{\n    return `${key}_invalidate`;\n};\nvar getCacheKey = (key)=>{\n    return `${key}_cache`;\n};\nvar getCacheIdKey = (key)=>{\n    return `${key}_cache_by_id`;\n};\n// src/cache/cache.events.ts\nvar getCacheEvents = (emitter)=>({\n        /**\n   * Set cache data\n   * @param cacheKey\n   * @param data\n   */ emitCacheData: (cacheKey, data)=>{\n            emitter.emit(getCacheKey(cacheKey), data);\n        },\n        /**\n   * Invalidate cache values event\n   */ emitInvalidation: (cacheKey)=>{\n            emitter.emit(getInvalidateEventKey(cacheKey));\n        },\n        /** StatusType\n   * Cache data listener\n   * @param cacheKey\n   * @param callback\n   * @returns\n   */ onData: (cacheKey, callback)=>{\n            emitter.on(getCacheKey(cacheKey), callback);\n            return ()=>emitter.removeListener(getCacheKey(cacheKey), callback);\n        },\n        /**\n   * Cache invalidation listener\n   * @param cacheKey\n   * @param callback\n   * @returns\n   */ onInvalidate: (cacheKey, callback)=>{\n            emitter.on(getInvalidateEventKey(cacheKey), callback);\n            return ()=>emitter.removeListener(getInvalidateEventKey(cacheKey), callback);\n        }\n    });\n// src/managers/app/app.manager.ts\n\nvar AppManager = class {\n    constructor(options){\n        this.options = options;\n        this.emitter = new (events__WEBPACK_IMPORTED_MODULE_2___default())();\n        this.events = getAppManagerEvents(this.emitter);\n        this.setInitialFocus = (initValue)=>__async(this, null, function*() {\n                if (typeof initValue === \"function\") {\n                    this.isFocused = false;\n                    this.isFocused = yield initValue();\n                } else {\n                    this.isFocused = initValue;\n                }\n            });\n        this.setInitialOnline = (initValue)=>__async(this, null, function*() {\n                if (typeof initValue === \"function\") {\n                    this.isOnline = false;\n                    this.isOnline = yield initValue();\n                } else {\n                    this.isOnline = initValue;\n                }\n            });\n        this.setFocused = (isFocused)=>{\n            this.isFocused = isFocused;\n            if (isFocused) {\n                this.events.emitFocus();\n            } else {\n                this.events.emitBlur();\n            }\n        };\n        this.setOnline = (isOnline)=>{\n            this.isOnline = isOnline;\n            if (isOnline) {\n                this.events.emitOnline();\n            } else {\n                this.events.emitOffline();\n            }\n        };\n        var _a;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        const { focusEvent = appManagerInitialOptions.focusEvent, onlineEvent = appManagerInitialOptions.onlineEvent, initiallyFocused = appManagerInitialOptions.initiallyFocused, initiallyOnline = appManagerInitialOptions.initiallyOnline } = this.options || appManagerInitialOptions;\n        this.setInitialFocus(initiallyFocused);\n        this.setInitialOnline(initiallyOnline);\n        focusEvent(this.setFocused);\n        onlineEvent(this.setOnline);\n        this.isBrowser = hasDocument();\n    }\n};\n// src/managers/app/app.manager.utils.ts\nvar hasWindow = ()=>{\n    try {\n        return Boolean(window && window.addEventListener);\n    } catch (err) {\n        return false;\n    }\n};\nvar hasDocument = ()=>{\n    try {\n        return Boolean(hasWindow() && window.document && window.document.addEventListener);\n    } catch (err) {\n        return false;\n    }\n};\nvar onWindowEvent = (key, listener, options)=>{\n    if (hasWindow()) {\n        window.addEventListener(key, listener, options);\n    }\n};\nvar onDocumentEvent = (key, listener, options)=>{\n    if (hasDocument()) {\n        window.document.addEventListener(key, listener, options);\n    }\n};\n// src/managers/app/app.manager.events.ts\nvar getAppManagerEvents = (emitter)=>({\n        emitFocus: ()=>{\n            emitter.emit(\"focus\" /* focus */ );\n        },\n        emitBlur: ()=>{\n            emitter.emit(\"blur\" /* blur */ );\n        },\n        emitOnline: ()=>{\n            emitter.emit(\"online\" /* online */ );\n        },\n        emitOffline: ()=>{\n            emitter.emit(\"offline\" /* offline */ );\n        },\n        onFocus: (callback)=>{\n            emitter.on(\"focus\" /* focus */ , callback);\n            return ()=>emitter.removeListener(\"focus\" /* focus */ , callback);\n        },\n        onBlur: (callback)=>{\n            emitter.on(\"blur\" /* blur */ , callback);\n            return ()=>emitter.removeListener(\"blur\" /* blur */ , callback);\n        },\n        onOnline: (callback)=>{\n            emitter.on(\"online\" /* online */ , callback);\n            return ()=>emitter.removeListener(\"online\" /* online */ , callback);\n        },\n        onOffline: (callback)=>{\n            emitter.on(\"offline\" /* offline */ , callback);\n            return ()=>emitter.removeListener(\"offline\" /* offline */ , callback);\n        }\n    });\n// src/managers/app/app.manager.constants.ts\nvar AppEvents = /* @__PURE__ */ ((AppEvents2)=>{\n    AppEvents2[\"focus\"] = \"focus\";\n    AppEvents2[\"blur\"] = \"blur\";\n    AppEvents2[\"online\"] = \"online\";\n    AppEvents2[\"offline\"] = \"offline\";\n    return AppEvents2;\n})(AppEvents || {});\nvar appManagerInitialOptions = {\n    initiallyFocused: true,\n    initiallyOnline: true,\n    focusEvent: (setFocused)=>{\n        onDocumentEvent(\"visibilitychange\", ()=>setFocused(true));\n        onWindowEvent(\"focus\", ()=>setFocused(true));\n        onWindowEvent(\"blur\", ()=>setFocused(false));\n    },\n    onlineEvent: (setOnline)=>{\n        onWindowEvent(\"online\", ()=>setOnline(true));\n        onWindowEvent(\"offline\", ()=>setOnline(false));\n    }\n};\n// src/managers/request/request.manager.ts\n\nvar RequestManager = class {\n    constructor(){\n        this.emitter = new (events__WEBPACK_IMPORTED_MODULE_2___default())();\n        this.events = getRequestManagerEvents(this.emitter);\n        this.abortControllers = /* @__PURE__ */ new Map();\n        this.addAbortController = (abortKey, requestId)=>{\n            let abortGroup = this.abortControllers.get(abortKey);\n            if (!abortGroup) {\n                const newAbortGroup = /* @__PURE__ */ new Map();\n                abortGroup = newAbortGroup;\n                this.abortControllers.set(abortKey, newAbortGroup);\n            }\n            const abortController = abortGroup.get(requestId);\n            if (!abortController || abortController.signal.aborted) {\n                abortGroup.set(requestId, new AbortController());\n            }\n        };\n        this.getAbortController = (abortKey, requestId)=>{\n            var _a;\n            return (_a = this.abortControllers.get(abortKey)) == null ? void 0 : _a.get(requestId);\n        };\n        this.removeAbortController = (abortKey, requestId)=>{\n            var _a;\n            (_a = this.abortControllers.get(abortKey)) == null ? void 0 : _a.delete(requestId);\n        };\n        // Aborting\n        this.useAbortController = (abortKey, requestId)=>{\n            var _a;\n            const controller = (_a = this.abortControllers.get(abortKey)) == null ? void 0 : _a.get(requestId);\n            controller == null ? void 0 : controller.abort();\n        };\n        this.abortByKey = (abortKey)=>{\n            const controllers = this.abortControllers.get(abortKey);\n            if (controllers) {\n                const entries = Array.from(controllers.entries());\n                entries.forEach(([key])=>{\n                    this.useAbortController(abortKey, key);\n                });\n            }\n        };\n        this.abortByRequestId = (abortKey, requestId)=>{\n            this.useAbortController(abortKey, requestId);\n        };\n        this.abortAll = ()=>{\n            const entries = Array.from(this.abortControllers.entries());\n            entries.forEach(([abortKey, value])=>{\n                const controllers = Array.from(value.entries());\n                controllers.forEach(([requestId])=>{\n                    this.useAbortController(abortKey, requestId);\n                });\n            });\n        };\n        var _a;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n    }\n};\n// src/managers/request/request.manager.utils.ts\nvar getLoadingEventKey = (key)=>`${key}-loading-event`;\nvar getLoadingIdEventKey = (key)=>`${key}-loading-event-by-id`;\nvar getRemoveEventKey = (key)=>`${key}-remove-event`;\nvar getRemoveIdEventKey = (key)=>`${key}-remove-event-by-id`;\nvar getAbortEventKey = (key)=>`${key}-request-abort`;\nvar getAbortByIdEventKey = (key)=>`${key}-request-abort-by-id`;\nvar getResponseEventKey = (key)=>`${key}-response`;\nvar getResponseIdEventKey = (key)=>`${key}-response-by-id`;\nvar getRequestStartEventKey = (key)=>`${key}-request-start`;\nvar getRequestStartIdEventKey = (key)=>`${key}-request-start-by-id`;\nvar getResponseStartEventKey = (key)=>`${key}-response-start`;\nvar getResponseStartIdEventKey = (key)=>`${key}-response-start-by-id`;\nvar getUploadProgressEventKey = (key)=>`${key}-request-progress`;\nvar getUploadProgressIdEventKey = (key)=>`${key}-request-progress-by-id`;\nvar getDownloadProgressEventKey = (key)=>`${key}-response-progress`;\nvar getDownloadProgressIdEventKey = (key)=>`${key}-response-progress-by-id`;\n// src/managers/request/request.manager.events.ts\nvar getRequestManagerEvents = (emitter)=>({\n        /**\n   * Emiter\n   */ // Loading\n        emitLoading: (queueKey, requestId, values)=>{\n            emitter.emit(getLoadingIdEventKey(requestId), values);\n            emitter.emit(getLoadingEventKey(queueKey), values);\n        },\n        // Start\n        emitRequestStart: (queueKey, requestId, details)=>{\n            emitter.emit(getRequestStartIdEventKey(requestId), details);\n            emitter.emit(getRequestStartEventKey(queueKey), details);\n        },\n        emitResponseStart: (queueKey, requestId, details)=>{\n            emitter.emit(getResponseStartIdEventKey(requestId), details);\n            emitter.emit(getResponseStartEventKey(queueKey), details);\n        },\n        // Progress\n        emitUploadProgress: (queueKey, requestId, values, details)=>{\n            emitter.emit(getUploadProgressIdEventKey(requestId), values, details);\n            emitter.emit(getUploadProgressEventKey(queueKey), values, details);\n        },\n        emitDownloadProgress: (queueKey, requestId, values, details)=>{\n            emitter.emit(getDownloadProgressIdEventKey(requestId), values, details);\n            emitter.emit(getDownloadProgressEventKey(queueKey), values, details);\n        },\n        // Response\n        emitResponse: (cacheKey, requestId, response, details)=>{\n            emitter.emit(getResponseIdEventKey(requestId), response, details);\n            emitter.emit(getResponseEventKey(cacheKey), response, details);\n        },\n        // Abort\n        emitAbort: (abortKey, requestId, request)=>{\n            emitter.emit(getAbortByIdEventKey(requestId), request);\n            emitter.emit(getAbortEventKey(abortKey), request);\n        },\n        // Remove\n        emitRemove: (queueKey, requestId, details)=>{\n            emitter.emit(getRemoveEventKey(queueKey), details);\n            emitter.emit(getRemoveIdEventKey(requestId), details);\n        },\n        /**\n   * Listeners\n   */ // Loading\n        onLoading: (queueKey, callback)=>{\n            emitter.on(getLoadingEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getLoadingEventKey(queueKey), callback);\n        },\n        onLoadingById: (requestId, callback)=>{\n            emitter.on(getLoadingIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getLoadingIdEventKey(requestId), callback);\n        },\n        // Request Start\n        onRequestStart: (queueKey, callback)=>{\n            emitter.on(getRequestStartEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getRequestStartEventKey(queueKey), callback);\n        },\n        onRequestStartById: (requestId, callback)=>{\n            emitter.on(getRequestStartIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getRequestStartIdEventKey(requestId), callback);\n        },\n        // Response Start\n        onResponseStart: (queueKey, callback)=>{\n            emitter.on(getResponseStartEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getResponseStartEventKey(queueKey), callback);\n        },\n        onResponseStartById: (requestId, callback)=>{\n            emitter.on(getResponseStartIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getResponseStartIdEventKey(requestId), callback);\n        },\n        // Progress\n        onUploadProgress: (queueKey, callback)=>{\n            emitter.on(getUploadProgressEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getUploadProgressEventKey(queueKey), callback);\n        },\n        onUploadProgressById: (requestId, callback)=>{\n            emitter.on(getUploadProgressIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getUploadProgressIdEventKey(requestId), callback);\n        },\n        onDownloadProgress: (queueKey, callback)=>{\n            emitter.on(getDownloadProgressEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getDownloadProgressEventKey(queueKey), callback);\n        },\n        onDownloadProgressById: (requestId, callback)=>{\n            emitter.on(getDownloadProgressIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getDownloadProgressIdEventKey(requestId), callback);\n        },\n        // Response\n        onResponse: (cacheKey, callback)=>{\n            emitter.on(getResponseEventKey(cacheKey), callback);\n            return ()=>emitter.removeListener(getResponseEventKey(cacheKey), callback);\n        },\n        // Response by requestId\n        onResponseById: (requestId, callback)=>{\n            emitter.on(getResponseIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getResponseIdEventKey(requestId), callback);\n        },\n        // Abort\n        onAbort: (abortKey, callback)=>{\n            emitter.on(getAbortEventKey(abortKey), callback);\n            return ()=>emitter.removeListener(getAbortEventKey(abortKey), callback);\n        },\n        onAbortById: (requestId, callback)=>{\n            emitter.on(getAbortByIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getAbortByIdEventKey(requestId), callback);\n        },\n        // Remove\n        onRemove: (queueKey, callback)=>{\n            emitter.on(getRemoveEventKey(queueKey), callback);\n            return ()=>emitter.removeListener(getRemoveEventKey(queueKey), callback);\n        },\n        onRemoveById: (requestId, callback)=>{\n            emitter.on(getRemoveIdEventKey(requestId), callback);\n            return ()=>emitter.removeListener(getRemoveIdEventKey(requestId), callback);\n        }\n    });\n// src/managers/logger/logger.manager.ts\n\nvar LoggerManager = class {\n    constructor(client, options){\n        this.client = client;\n        this.options = options;\n        this.emitter = new (events__WEBPACK_IMPORTED_MODULE_2___default())();\n        this.setSeverity = (severity2)=>{\n            this.severity = severity2;\n        };\n        this.init = (module)=>{\n            return {\n                error: (message, ...extra)=>{\n                    this.logger({\n                        level: \"error\",\n                        module,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                },\n                warning: (message, ...extra)=>{\n                    this.logger({\n                        level: \"warning\",\n                        module,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                },\n                info: (message, ...extra)=>{\n                    this.logger({\n                        level: \"info\",\n                        module,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                },\n                debug: (message, ...extra)=>{\n                    this.logger({\n                        level: \"debug\",\n                        module,\n                        message,\n                        extra,\n                        severity: this.severity,\n                        enabled: this.client.debug\n                    });\n                }\n            };\n        };\n        var _a, _b, _c;\n        (_a = this.emitter) == null ? void 0 : _a.setMaxListeners(Infinity);\n        this.logger = ((_b = this.options) == null ? void 0 : _b.logger) || logger;\n        this.severity = ((_c = this.options) == null ? void 0 : _c.severity) || 2;\n    }\n};\n// src/managers/logger/logger.manager.utils.ts\nvar getTime = ()=>{\n    const d = /* @__PURE__ */ new Date();\n    return `${d.toLocaleTimeString()}(:${d.getMilliseconds()})`;\n};\nvar logger = (log)=>{\n    var _a;\n    if (log.enabled && log.severity >= severity[log.level]) {\n        const styles = loggerStyles[log.level];\n        const emoji = loggerIconLevels[log.level];\n        const module = `%c[${log.module}]:[${getTime()}]:`;\n        const message = `${emoji}${module} ${log.message}`;\n        if ((_a = log.extra) == null ? void 0 : _a.length) {\n            console.groupCollapsed(message, styles);\n            log.extra.forEach((data)=>{\n                console.log(data);\n            });\n            console.groupEnd();\n        } else {\n            console.log(message, styles);\n        }\n    }\n};\n// src/managers/logger/logger.manager.constants.ts\nvar defaultStyles = \"background:rgba(0,0,0,0.2);padding:2px 5px;border-radius:5px;font-weight:bold;\";\nvar loggerStyles = {\n    error: `${defaultStyles}color:#db2525`,\n    warning: `${defaultStyles}color:#e1941e`,\n    info: `${defaultStyles}color:#1e74e1`,\n    debug: `${defaultStyles}color:#adadad`\n};\nvar loggerIconLevels = {\n    error: `\\u{1F6A8}`,\n    warning: `\\u{1F6A7}`,\n    info: `\\u2139\\uFE0F`,\n    debug: `\\u{1F6E9}\\uFE0F`\n};\nvar severity = {\n    error: 0,\n    warning: 1,\n    info: 2,\n    debug: 3\n};\n// src/client/client.utils.ts\nvar stringifyValue = (response)=>{\n    try {\n        return JSON.stringify(response);\n    } catch (err) {\n        return \"\";\n    }\n};\nvar interceptRequest = (interceptors, request)=>__async(void 0, null, function*() {\n        let newRequest = request;\n        if (!request.requestOptions.disableRequestInterceptors) {\n            for (const interceptor of interceptors){\n                newRequest = yield interceptor(request);\n                if (!newRequest) throw new Error(\"Request modifier must return request\");\n            }\n        }\n        return newRequest;\n    });\nvar interceptResponse = (interceptors, response, request)=>__async(void 0, null, function*() {\n        let newResponse = response;\n        if (!request.requestOptions.disableResponseInterceptors) {\n            for (const interceptor of interceptors){\n                newResponse = yield interceptor(response, request);\n                if (!newResponse) throw new Error(\"Response modifier must return data\");\n            }\n        }\n        return newResponse;\n    });\nvar getAdapterHeaders = (request)=>{\n    const isFormData = hasWindow() && request.data instanceof FormData;\n    const headers = {};\n    if (!isFormData) headers[\"Content-Type\"] = \"application/json\";\n    Object.assign(headers, request.headers);\n    return headers;\n};\nvar getAdapterPayload = (data)=>{\n    const isFormData = hasWindow() && data instanceof FormData;\n    if (isFormData) return data;\n    return stringifyValue(data);\n};\nvar isValidValue = (options)=>{\n    return (value)=>{\n        const { skipNull, skipEmptyString } = options;\n        if (skipEmptyString && value === void 0) {\n            return false;\n        }\n        if (skipEmptyString && value === \"\") {\n            return false;\n        }\n        if (skipNull && value === null) {\n            return false;\n        }\n        return true;\n    };\n};\nvar encodeValue = (value, { encode, strict })=>{\n    if (encode && strict) {\n        return encodeURIComponent(value).replace(/[!'()*]/g, (s)=>`%${s.charCodeAt(0).toString(16).toUpperCase()}`);\n    }\n    if (encode) {\n        return encodeURIComponent(value);\n    }\n    return value;\n};\nvar encodeParams = (key, value, options)=>{\n    const shouldSkip = !isValidValue(options)(value);\n    if (!key || shouldSkip) {\n        return \"\";\n    }\n    const parsedValue = ()=>{\n        var _a, _b;\n        if (value instanceof Date) {\n            return ((_a = options.dateParser) == null ? void 0 : _a.call(options, value)) || value.toISOString();\n        }\n        if (typeof value === \"object\" && !Array.isArray(value)) {\n            return ((_b = options.objectParser) == null ? void 0 : _b.call(options, value)) || JSON.stringify(value);\n        }\n        return String(value);\n    };\n    return `${encodeValue(key, options)}=${encodeValue(parsedValue(), options)}`;\n};\nvar encodeArray = (key, array, options)=>{\n    const { arrayFormat, arraySeparator } = options;\n    return array.filter(isValidValue(options)).reduce((acc, value, index)=>{\n        switch(arrayFormat){\n            case \"index\":\n                {\n                    const keyValue = `${encodeValue(key, options)}[${encodeValue(String(index), options)}]=`;\n                    acc.push(`${keyValue}${encodeValue(String(value), options)}`);\n                    break;\n                }\n            case \"bracket\":\n                {\n                    const keyValue = `${encodeValue(key, options)}[]=`;\n                    acc.push(`${keyValue}${encodeValue(String(value), options)}`);\n                    break;\n                }\n            case \"comma\":\n                {\n                    const keyValue = !acc.length && `${encodeValue(key, options)}=` || \"\";\n                    return [\n                        [\n                            ...acc,\n                            `${keyValue}${encodeValue(String(value), options)}`\n                        ].join(\",\")\n                    ];\n                }\n            case \"separator\":\n                {\n                    const keyValue = !acc.length && `${encodeValue(key, options)}=` || \"\";\n                    return [\n                        [\n                            ...acc,\n                            `${keyValue}${encodeValue(String(value), options)}`\n                        ].join(arraySeparator || \"|\")\n                    ];\n                }\n            case \"bracket-separator\":\n                {\n                    const keyValue = !acc.length && `${encodeValue(key, options)}[]=` || \"\";\n                    return [\n                        [\n                            ...acc,\n                            `${keyValue}${encodeValue(String(value), options)}`\n                        ].join(arraySeparator || \"|\")\n                    ];\n                }\n            default:\n                {\n                    const keyValue = `${encodeValue(key, options)}=`;\n                    acc.push(`${keyValue}${encodeValue(String(value), options)}`);\n                }\n        }\n        return acc;\n    }, []).join(\"&\");\n};\nvar stringifyQueryParams = (queryParams, options = stringifyDefaultOptions)=>{\n    if (!queryParams || !Object.keys(queryParams).length) {\n        return \"\";\n    }\n    if (typeof queryParams === \"string\") {\n        const hasQuestionMark = queryParams[0] === \"?\";\n        return hasQuestionMark ? queryParams : `?${queryParams}`;\n    }\n    const stringified = Object.entries(queryParams).map(([key, value])=>{\n        if (Array.isArray(value)) {\n            return encodeArray(key, value, options);\n        }\n        return encodeParams(key, value, options);\n    }).filter(Boolean).join(\"&\");\n    if (stringified) {\n        return `?${stringified}`;\n    }\n    return \"\";\n};\n// src/client/client.ts\nvar Client = class _Client {\n    constructor(options){\n        this.options = options;\n        // Private\n        this.__onErrorCallbacks = [];\n        this.__onSuccessCallbacks = [];\n        this.__onResponseCallbacks = [];\n        this.__onAuthCallbacks = [];\n        this.__onRequestCallbacks = [];\n        // Managers\n        this.requestManager = new RequestManager();\n        this.loggerManager = new LoggerManager(this);\n        this.defaultMethod = \"GET\" /* get */ ;\n        this.defaultExtra = xhrExtra;\n        this.isMockEnabled = true;\n        // Registered requests effect\n        this.effects = [];\n        this.abortKeyMapper = getSimpleKey;\n        this.cacheKeyMapper = getRequestKey;\n        this.queueKeyMapper = getRequestKey;\n        this.effectKeyMapper = getSimpleKey;\n        // Utils\n        /**\n     * Method to stringify query params from objects.\n     */ this.stringifyQueryParams = (queryParams)=>stringifyQueryParams(queryParams, this.queryParamsConfig);\n        /**\n     * Method to get default headers and to map them based on the data format exchange, by default it handles FormData / JSON formats.\n     */ this.headerMapper = getAdapterHeaders;\n        /**\n     * Method to get request data and transform them to the required format. It handles FormData and JSON by default.\n     */ this.payloadMapper = getAdapterPayload;\n        /**\n     * Method to get request data and transform them to the required format. It handles FormData and JSON by default.\n     */ // eslint-disable-next-line class-methods-use-this\n        this.endpointMapper = (endpoint)=>endpoint;\n        // Logger\n        this.logger = this.loggerManager.init(\"Client\");\n        /**\n     * This method allows to configure global defaults for the request configuration like method, auth, deduplication etc.\n     */ this.setRequestDefaultOptions = (callback)=>{\n            this.requestDefaultOptions = callback;\n            return this;\n        };\n        this.setAdapterDefaultOptions = (callback)=>{\n            this.adapterDefaultOptions = callback;\n            return this;\n        };\n        /**\n     * This method enables the logger usage and display the logs in console\n     */ this.setDebug = (debug)=>{\n            this.debug = debug;\n            return this;\n        };\n        /**\n     * Set the logger severity of the messages displayed to the console\n     */ this.setLoggerSeverity = (severity2)=>{\n            this.loggerManager.setSeverity(severity2);\n            return this;\n        };\n        /**\n     * Set the new logger instance to the Client\n     */ this.setLogger = (callback)=>{\n            this.loggerManager = callback(this);\n            return this;\n        };\n        /**\n     * Set config for the query params stringify method, we can set here, among others, arrayFormat, skipNull, encode, skipEmptyString and more\n     */ this.setQueryParamsConfig = (queryParamsConfig)=>{\n            this.queryParamsConfig = queryParamsConfig;\n            return this;\n        };\n        /**\n     * Set the custom query params stringify method to the Client\n     * @param stringifyFn Custom callback handling query params stringify\n     */ this.setStringifyQueryParams = (stringifyFn)=>{\n            this.stringifyQueryParams = stringifyFn;\n            return this;\n        };\n        /**\n     * Set the custom header mapping function\n     */ this.setHeaderMapper = (headerMapper)=>{\n            this.headerMapper = headerMapper;\n            return this;\n        };\n        /**\n     * Set the request payload mapping function which get triggered before request get send\n     */ this.setPayloadMapper = (payloadMapper)=>{\n            this.payloadMapper = payloadMapper;\n            return this;\n        };\n        /**\n     * Set globally if mocking should be enabled or disabled for all client requests.\n     * @param isMockEnabled\n     */ this.setEnableGlobalMocking = (isMockEnabled)=>{\n            this.isMockEnabled = isMockEnabled;\n            return this;\n        };\n        /**\n     * Set the request payload mapping function which get triggered before request get send\n     */ this.setEndpointMapper = (endpointMapper)=>{\n            this.endpointMapper = endpointMapper;\n            return this;\n        };\n        /**\n     * Set custom http adapter to handle graphql, rest, firebase or others\n     */ this.setAdapter = (callback)=>{\n            const value = callback(this);\n            if (value instanceof _Client) {\n                return value;\n            }\n            this.adapter = value;\n            return this;\n        };\n        /**\n     * Set default method for requests.\n     */ this.setDefaultMethod = (defaultMethod)=>{\n            this.defaultMethod = defaultMethod;\n            return this;\n        };\n        /**\n     * Set default additional data for initial state.\n     */ this.setDefaultExtra = (defaultExtra)=>{\n            this.defaultExtra = defaultExtra;\n            return this;\n        };\n        /**\n     * Method of manipulating requests before sending the request. We can for example add custom header with token to the request which request had the auth set to true.\n     */ this.onAuth = (callback)=>{\n            this.__onAuthCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on auth.\n     * */ this.removeOnAuthInterceptors = (callbacks)=>{\n            this.__onAuthCallbacks = this.__onAuthCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method for intercepting error responses. It can be used for example to refresh tokens.\n     */ this.onError = (callback)=>{\n            this.__onErrorCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on error.\n     * */ this.removeOnErrorInterceptors = (callbacks)=>{\n            this.__onErrorCallbacks = this.__onErrorCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method for intercepting success responses.\n     */ this.onSuccess = (callback)=>{\n            this.__onSuccessCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on success.\n     * */ this.removeOnSuccessInterceptors = (callbacks)=>{\n            this.__onSuccessCallbacks = this.__onSuccessCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method of manipulating requests before sending the request.\n     */ this.onRequest = (callback)=>{\n            this.__onRequestCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on request.\n     * */ this.removeOnRequestInterceptors = (callbacks)=>{\n            this.__onRequestCallbacks = this.__onRequestCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Method for intercepting any responses.\n     */ this.onResponse = (callback)=>{\n            this.__onResponseCallbacks.push(callback);\n            return this;\n        };\n        /**\n     * Method for removing listeners on request.\n     * */ this.removeOnResponseInterceptors = (callbacks)=>{\n            this.__onResponseCallbacks = this.__onResponseCallbacks.filter((callback)=>!callbacks.includes(callback));\n            return this;\n        };\n        /**\n     * Add persistent effects which trigger on the request lifecycle\n     */ this.addEffect = (effect)=>{\n            this.effects = this.effects.concat(effect);\n            return this;\n        };\n        /**\n     * Remove effects from Client\n     */ this.removeEffect = (effect)=>{\n            const name = typeof effect === \"string\" ? effect : effect.getEffectKey();\n            this.effects = this.effects.filter((currentEffect)=>currentEffect.getEffectKey() !== name);\n            return this;\n        };\n        /**\n     * Key setters\n     */ this.setAbortKeyMapper = (callback)=>{\n            this.abortKeyMapper = callback;\n        };\n        this.setCacheKeyMapper = (callback)=>{\n            this.cacheKeyMapper = callback;\n        };\n        this.setQueueKeyMapper = (callback)=>{\n            this.queueKeyMapper = callback;\n        };\n        this.setEffectKeyMapper = (callback)=>{\n            this.effectKeyMapper = callback;\n        };\n        /**\n     * Helper used by http adapter to apply the modifications on response error\n     */ this.__modifyAuth = (request)=>__async(this, null, function*() {\n                return interceptRequest(this.__onAuthCallbacks, request);\n            });\n        /**\n     * Private helper to run async pre-request processing\n     */ this.__modifyRequest = (request)=>__async(this, null, function*() {\n                return interceptRequest(this.__onRequestCallbacks, request);\n            });\n        /**\n     * Private helper to run async on-error response processing\n     */ this.__modifyErrorResponse = (response, request)=>__async(this, null, function*() {\n                return interceptResponse(this.__onErrorCallbacks, response, request);\n            });\n        /**\n     * Private helper to run async on-success response processing\n     */ this.__modifySuccessResponse = (response, request)=>__async(this, null, function*() {\n                return interceptResponse(this.__onSuccessCallbacks, response, request);\n            });\n        /**\n     * Private helper to run async response processing\n     */ this.__modifyResponse = (response, request)=>__async(this, null, function*() {\n                return interceptResponse(this.__onResponseCallbacks, response, request);\n            });\n        /**\n     * Clears the Client instance and remove all listeners on it's dependencies\n     */ this.clear = ()=>{\n            const { appManager, cache, fetchDispatcher, submitDispatcher } = this.options;\n            this.requestManager.abortControllers.clear();\n            this.fetchDispatcher.clear();\n            this.submitDispatcher.clear();\n            this.cache.clear();\n            this.requestManager.emitter.removeAllListeners();\n            this.fetchDispatcher.emitter.removeAllListeners();\n            this.submitDispatcher.emitter.removeAllListeners();\n            this.cache.emitter.removeAllListeners();\n            this.appManager = (appManager == null ? void 0 : appManager(this)) || new AppManager();\n            this.cache = (cache == null ? void 0 : cache(this)) || new Cache(this);\n            this.fetchDispatcher = (fetchDispatcher == null ? void 0 : fetchDispatcher(this)) || new Dispatcher(this);\n            this.submitDispatcher = (submitDispatcher == null ? void 0 : submitDispatcher(this)) || new Dispatcher(this);\n        };\n        /**\n     * Create requests based on the Client setup\n     *\n     * @template {response: any, payload:any} Properties\n     */ this.createRequest = ()=>{\n            return (params)=>{\n                const endpoint = this.endpointMapper(params.endpoint);\n                const mappedParams = __spreadProps(__spreadValues({}, params), {\n                    endpoint\n                });\n                return new Request(this, mappedParams);\n            };\n        };\n        const { url, adapter: adapter4, appManager, cache, fetchDispatcher, submitDispatcher } = this.options;\n        this.url = url;\n        this.adapter = adapter4 || adapter3;\n        this.appManager = (appManager == null ? void 0 : appManager(this)) || new AppManager();\n        this.cache = (cache == null ? void 0 : cache(this)) || new Cache(this);\n        this.fetchDispatcher = (fetchDispatcher == null ? void 0 : fetchDispatcher(this)) || new Dispatcher(this);\n        this.submitDispatcher = (submitDispatcher == null ? void 0 : submitDispatcher(this)) || new Dispatcher(this);\n    }\n};\n// src/client/client.constants.ts\nvar stringifyDefaultOptions = {\n    strict: true,\n    encode: true,\n    arrayFormat: \"bracket\",\n    arraySeparator: \"bracket\",\n    sort: false,\n    skipNull: true,\n    skipEmptyString: true\n};\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/core/dist/index.esm.js\n");

/***/ }),

/***/ "../../packages/react/dist/index.cjs.js":
/*!**********************************************!*\
  !*** ../../packages/react/dist/index.cjs.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    ConfigProvider: ()=>ConfigProvider,\n    getBounceData: ()=>getBounceData,\n    getDetailsState: ()=>getDetailsState,\n    getInitialState: ()=>getInitialState,\n    getRefreshTime: ()=>getRefreshTime,\n    getTimestamp: ()=>getTimestamp,\n    getValidCacheData: ()=>getValidCacheData,\n    initialSocketState: ()=>initialSocketState,\n    initialState: ()=>initialState,\n    isEmpty: ()=>isEmpty,\n    isEqual: ()=>isEqual,\n    isStaleCacheData: ()=>isStaleCacheData,\n    useAppManager: ()=>useAppManager,\n    useCache: ()=>useCache,\n    useCacheDefaultOptions: ()=>useCacheDefaultOptions,\n    useConfigProvider: ()=>useConfigProvider,\n    useEmitter: ()=>useEmitter,\n    useEventMessages: ()=>useEventMessages,\n    useFetch: ()=>useFetch,\n    useFetchDefaultOptions: ()=>useFetchDefaultOptions,\n    useListener: ()=>useListener,\n    useQueue: ()=>useQueue,\n    useQueueDefaultOptions: ()=>useQueueDefaultOptions,\n    useRequestEvents: ()=>useRequestEvents,\n    useSocketState: ()=>useSocketState,\n    useSubmit: ()=>useSubmit,\n    useSubmitDefaultOptions: ()=>useSubmitDefaultOptions,\n    useTrackedState: ()=>useTrackedState\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/hooks/use-fetch/use-fetch.hooks.ts\nvar import_react5 = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle4 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar import_performance = __webpack_require__(/*! @better-hooks/performance */ \"@better-hooks/performance\");\nvar import_core3 = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.cjs.js\");\n// src/helpers/use-request-events/use-request-events.hooks.ts\nvar import_react = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar useRequestEvents = ({ request, dispatcher, logger, actions, setCacheData })=>{\n    const { responseMapper } = request;\n    const { cache, requestManager } = request.client;\n    const onSuccessCallback = (0, import_react.useRef)(null);\n    const onErrorCallback = (0, import_react.useRef)(null);\n    const onAbortCallback = (0, import_react.useRef)(null);\n    const onOfflineErrorCallback = (0, import_react.useRef)(null);\n    const onFinishedCallback = (0, import_react.useRef)(null);\n    const onRequestStartCallback = (0, import_react.useRef)(null);\n    const onResponseStartCallback = (0, import_react.useRef)(null);\n    const onDownloadProgressCallback = (0, import_react.useRef)(null);\n    const onUploadProgressCallback = (0, import_react.useRef)(null);\n    const lifecycleEvents = (0, import_react.useRef)(/* @__PURE__ */ new Map());\n    const dataEvents = (0, import_react.useRef)(null);\n    const removeLifecycleListener = (requestId)=>{\n        const event = lifecycleEvents.current.get(requestId);\n        event == null ? void 0 : event.unmount();\n        lifecycleEvents.current.delete(requestId);\n    };\n    const clearLifecycleListeners = ()=>{\n        const events = lifecycleEvents.current;\n        const listeners = Array.from(events.values());\n        listeners.forEach((value)=>{\n            value.unmount();\n        });\n        events.clear();\n    };\n    const handleResponseCallbacks = (cmd, response, details)=>{\n        var _a, _b, _c, _d, _e;\n        const { data, error, success } = response;\n        const { isOffline, isCanceled } = details;\n        if (request.offline && isOffline && !success) {\n            logger.debug(\"Performing offline error callback\", {\n                data,\n                details\n            });\n            (_a = onOfflineErrorCallback.current) == null ? void 0 : _a.call(onOfflineErrorCallback, {\n                response: error,\n                request: cmd,\n                details\n            });\n        } else if (isCanceled) {\n            logger.debug(\"Performing abort callback\", {\n                data,\n                details\n            });\n            (_b = onAbortCallback.current) == null ? void 0 : _b.call(onAbortCallback, {\n                response: error,\n                request: cmd,\n                details\n            });\n        } else if (success) {\n            logger.debug(\"Performing success callback\", {\n                data,\n                details\n            });\n            (_c = onSuccessCallback.current) == null ? void 0 : _c.call(onSuccessCallback, {\n                response: data,\n                request: cmd,\n                details\n            });\n        } else {\n            logger.debug(\"Performing error callback\", {\n                data,\n                details\n            });\n            (_d = onErrorCallback.current) == null ? void 0 : _d.call(onErrorCallback, {\n                response: error,\n                request: cmd,\n                details\n            });\n        }\n        (_e = onFinishedCallback.current) == null ? void 0 : _e.call(onFinishedCallback, {\n            response,\n            request: cmd,\n            details\n        });\n    };\n    const handleGetLoadingEvent = (queueKey)=>{\n        return ({ loading })=>{\n            const canDisableLoading = !loading && !dispatcher.hasRunningRequests(queueKey);\n            if (loading || canDisableLoading) {\n                actions.setLoading(loading, false);\n            }\n        };\n    };\n    const handleDownloadProgress = (progress, details)=>{\n        var _a;\n        (_a = onDownloadProgressCallback.current) == null ? void 0 : _a.call(onDownloadProgressCallback, progress, details);\n    };\n    const handleUploadProgress = (progress, details)=>{\n        var _a;\n        (_a = onUploadProgressCallback.current) == null ? void 0 : _a.call(onUploadProgressCallback, progress, details);\n    };\n    const handleRequestStart = (cmd)=>{\n        return (details)=>{\n            var _a;\n            (_a = onRequestStartCallback.current) == null ? void 0 : _a.call(onRequestStartCallback, {\n                request: cmd,\n                details\n            });\n        };\n    };\n    const handleResponseStart = (cmd)=>{\n        return (details)=>{\n            var _a;\n            (_a = onResponseStartCallback.current) == null ? void 0 : _a.call(onResponseStartCallback, {\n                request: cmd,\n                details\n            });\n        };\n    };\n    const handleResponse = (req)=>{\n        return (response, details)=>{\n            const data = responseMapper ? responseMapper(response) : response;\n            if (data instanceof Promise) {\n                return (()=>__async(void 0, null, function*() {\n                        const promiseData = yield data;\n                        handleResponseCallbacks(req, promiseData, details);\n                    }))();\n            }\n            return handleResponseCallbacks(req, data, details);\n        };\n    };\n    const handleRemove = ({ requestId })=>{\n        removeLifecycleListener(requestId);\n    };\n    const clearDataListener = ()=>{\n        var _a;\n        (_a = dataEvents.current) == null ? void 0 : _a.unmount();\n        dataEvents.current = null;\n    };\n    const addDataListener = (req)=>{\n        const loadingUnmount = requestManager.events.onLoading(req.queueKey, handleGetLoadingEvent(req.queueKey));\n        const getResponseUnmount = cache.events.onData(req.cacheKey, setCacheData);\n        const unmount = ()=>{\n            loadingUnmount();\n            getResponseUnmount();\n        };\n        clearDataListener();\n        dataEvents.current = {\n            unmount\n        };\n        return unmount;\n    };\n    const addLifecycleListeners = (req, requestId)=>{\n        if (!requestId) {\n            clearLifecycleListeners();\n            const { queueKey, cacheKey } = req;\n            const requestStartUnmount2 = requestManager.events.onRequestStart(queueKey, handleRequestStart(req));\n            const responseStartUnmount2 = requestManager.events.onResponseStart(queueKey, handleResponseStart(req));\n            const uploadUnmount2 = requestManager.events.onUploadProgress(queueKey, handleUploadProgress);\n            const downloadUnmount2 = requestManager.events.onDownloadProgress(queueKey, handleDownloadProgress);\n            const responseUnmount2 = requestManager.events.onResponse(cacheKey, handleResponse(req));\n            const unmount2 = ()=>{\n                downloadUnmount2();\n                uploadUnmount2();\n                requestStartUnmount2();\n                responseStartUnmount2();\n                responseUnmount2();\n            };\n            lifecycleEvents.current.set(queueKey, {\n                unmount: unmount2\n            });\n            return unmount2;\n        }\n        const requestRemove = requestManager.events.onRemoveById(requestId, handleRemove);\n        const requestStartUnmount = requestManager.events.onRequestStartById(requestId, handleRequestStart(req));\n        const responseStartUnmount = requestManager.events.onResponseStartById(requestId, handleResponseStart(req));\n        const responseUnmount = requestManager.events.onResponseById(requestId, handleResponse(req));\n        const uploadUnmount = requestManager.events.onUploadProgressById(requestId, handleUploadProgress);\n        const downloadUnmount = requestManager.events.onDownloadProgressById(requestId, handleDownloadProgress);\n        const unmount = ()=>{\n            requestRemove();\n            downloadUnmount();\n            uploadUnmount();\n            requestStartUnmount();\n            responseStartUnmount();\n            responseUnmount();\n        };\n        lifecycleEvents.current.set(requestId, {\n            unmount\n        });\n        return unmount;\n    };\n    const abort = ()=>{\n        const { abortKey } = request;\n        const requests = dispatcher.getAllRunningRequest();\n        requests.forEach((requestData)=>{\n            if (requestData.request.abortKey === abortKey) {\n                dispatcher.delete(requestData.request.queueKey, requestData.requestId, abortKey);\n            }\n        });\n    };\n    (0, import_lifecycle.useWillUnmount)(()=>{\n        clearLifecycleListeners();\n        clearDataListener();\n    });\n    return [\n        {\n            abort,\n            onSuccess: (callback)=>{\n                onSuccessCallback.current = callback;\n            },\n            onError: (callback)=>{\n                onErrorCallback.current = callback;\n            },\n            onAbort: (callback)=>{\n                onAbortCallback.current = callback;\n            },\n            onOfflineError: (callback)=>{\n                onOfflineErrorCallback.current = callback;\n            },\n            onFinished: (callback)=>{\n                onFinishedCallback.current = callback;\n            },\n            onRequestStart: (callback)=>{\n                onRequestStartCallback.current = callback;\n            },\n            onResponseStart: (callback)=>{\n                onResponseStartCallback.current = callback;\n            },\n            onDownloadProgress: (callback)=>{\n                onDownloadProgressCallback.current = callback;\n            },\n            onUploadProgress: (callback)=>{\n                onUploadProgressCallback.current = callback;\n            }\n        },\n        {\n            addDataListener,\n            clearDataListener,\n            addLifecycleListeners,\n            removeLifecycleListener,\n            clearLifecycleListeners\n        }\n    ];\n};\n// src/helpers/use-tracked-state/use-tracked-state.constants.ts\nvar initialState = {\n    data: null,\n    error: null,\n    status: null,\n    extra: null,\n    success: null,\n    loading: false,\n    retries: 0,\n    timestamp: null\n};\n// src/helpers/use-tracked-state/use-tracked-state.hooks.ts\nvar import_react3 = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle2 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar import_core2 = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.cjs.js\");\n// src/utils/deep-equal.utils.ts\nvar isEmpty = (value)=>{\n    const valueType = Object.prototype.toString.call(value);\n    if (Array.isArray(value)) return !value.length;\n    if (typeof value === \"object\" && value !== null && valueType === \"[object Object]\") return !Object.keys(value).length;\n    return false;\n};\nvar isEqual = (firstValue, secondValue)=>{\n    if (firstValue === secondValue) return true;\n    try {\n        const firstValueType = Object.prototype.toString.call(firstValue);\n        const secondValueType = Object.prototype.toString.call(secondValue);\n        const firstType = typeof firstValue;\n        const secondType = typeof secondValue;\n        const isType = (type)=>firstType === type && secondType === type;\n        const isTypeValue = (type)=>firstValueType === type && secondValueType === type;\n        if (firstValueType !== secondValueType) return false;\n        if (firstValue === null && secondValue === null) return true;\n        if (isType(\"number\") && Number.isNaN(firstValue) && Number.isNaN(secondValue)) return true;\n        if (isEmpty(firstValue) && isEmpty(secondValue)) return true;\n        if (Array.isArray(firstValue) && Array.isArray(secondValue)) {\n            if (firstValue.length !== secondValue.length) return false;\n            return !firstValue.some((element, i)=>!isEqual(element, secondValue[i]));\n        }\n        if (isType(\"object\") && isTypeValue(\"[object Object]\")) {\n            if (Object.keys(firstValue).length !== Object.keys(secondValue).length) return false;\n            return !Object.entries(firstValue).some(([key, value])=>!isEqual(value, secondValue[key]));\n        }\n        if (firstValue instanceof Date && secondValue instanceof Date) {\n            return +firstValue === +secondValue;\n        }\n        return firstValue === secondValue;\n    } catch (err) {\n        console.error(err);\n        return false;\n    }\n};\n// src/utils/bounce.utils.ts\nvar getBounceData = (bounceData)=>{\n    return __spreadValues(__spreadValues({}, bounceData), {\n        throttle: void 0,\n        debounce: void 0\n    });\n};\n// src/helpers/use-tracked-state/use-tracked-state.utils.ts\nvar getDetailsState = (state, details)=>{\n    return __spreadValues({\n        retries: (state == null ? void 0 : state.retries) || 0,\n        timestamp: +/* @__PURE__ */ new Date(),\n        isCanceled: false,\n        isOffline: false\n    }, details);\n};\nvar isStaleCacheData = (cacheTime, cacheTimestamp)=>{\n    if (!cacheTimestamp) return true;\n    return +/* @__PURE__ */ new Date() > +cacheTimestamp + cacheTime;\n};\nvar getValidCacheData = (request, initialData, cacheData)=>{\n    const isStale = isStaleCacheData(request.cacheTime, cacheData == null ? void 0 : cacheData.timestamp);\n    if (!isStale && cacheData) {\n        return cacheData;\n    }\n    if (initialData) {\n        return __spreadProps(__spreadValues(__spreadValues({\n            data: null,\n            error: null,\n            status: null,\n            success: null,\n            extra: null\n        }, initialData || {}), getDetailsState()), {\n            cacheTime: 1e3,\n            clearKey: request.client.cache.clearKey,\n            garbageCollection: request.garbageCollection\n        });\n    }\n    return null;\n};\nvar getTimestamp = (timestamp)=>{\n    return timestamp ? new Date(timestamp) : null;\n};\nvar getInitialState = (initialData, dispatcher, request)=>{\n    const { client, cacheKey, responseMapper } = request;\n    const { cache } = client;\n    const cacheData = cache.get(cacheKey);\n    const cacheState = getValidCacheData(request, initialData, cacheData);\n    const initialLoading = dispatcher.hasRunningRequests(request.queueKey);\n    if (cacheState) {\n        const mappedData = responseMapper ? responseMapper(cacheState) : cacheState;\n        if (mappedData instanceof Promise) {\n            return initialState;\n        }\n        return {\n            data: mappedData.data,\n            error: mappedData.error,\n            status: mappedData.status,\n            success: mappedData.success,\n            extra: mappedData.extra,\n            retries: cacheState.retries,\n            timestamp: getTimestamp(cacheState.timestamp),\n            loading: initialLoading\n        };\n    }\n    return {\n        data: initialState.data,\n        error: initialState.error,\n        status: initialState.status,\n        success: initialState.success,\n        extra: request.client.defaultExtra,\n        retries: initialState.retries,\n        timestamp: getTimestamp(initialState.timestamp),\n        loading: initialLoading\n    };\n};\n// src/config-provider/config-provider.tsx\nvar import_react2 = __toESM(__webpack_require__(/*! react */ \"react\"));\nvar import_core = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.cjs.js\");\nvar import_jsx_runtime = __webpack_require__(/*! react/jsx-runtime */ \"react/jsx-runtime\");\nvar ConfigContext = import_react2.default.createContext({\n    config: {},\n    setConfig: ()=>null\n});\nvar ConfigProvider = ({ children, client, config, fallbacks, fallbacksConfig })=>{\n    const [currentConfig, setConfig] = (0, import_react2.useState)(config || {});\n    const value = (0, import_react2.useMemo)(()=>{\n        const contextValue = {\n            config: currentConfig,\n            setConfig,\n            fallbacks\n        };\n        return contextValue;\n    }, [\n        currentConfig,\n        fallbacks\n    ]);\n    (0, import_react2.useLayoutEffect)(()=>{\n        (0, import_core.hydrate)(client, fallbacks, fallbacksConfig);\n    }, [\n        client,\n        fallbacks,\n        fallbacksConfig\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ConfigContext.Provider, {\n        value,\n        children\n    });\n};\nvar useConfigProvider = ()=>{\n    const config = (0, import_react2.useContext)(ConfigContext);\n    return config;\n};\n// src/helpers/use-tracked-state/use-tracked-state.hooks.ts\nvar useTrackedState = ({ request, dispatcher, initialData, deepCompare, dependencyTracking, defaultCacheEmitting = true })=>{\n    const { client, cacheKey, queueKey, cacheTime, responseMapper } = request;\n    const { cache, requestManager } = client;\n    const forceUpdate = (0, import_lifecycle2.useForceUpdate)();\n    const { fallbacks } = useConfigProvider();\n    const { fallbackData } = (0, import_react3.useMemo)(()=>{\n        var _a;\n        const fallbackRawData = (_a = fallbacks == null ? void 0 : fallbacks.find((item)=>item.cacheKey === cacheKey)) == null ? void 0 : _a.data;\n        const data = fallbackRawData ? (0, import_core2.parseResponse)(fallbackRawData) : void 0;\n        return {\n            fallbackData: data\n        };\n    }, [\n        cacheKey,\n        fallbacks\n    ]);\n    const state = (0, import_react3.useRef)(getInitialState(initialData || fallbackData, dispatcher, request));\n    const renderKeys = (0, import_react3.useRef)([]);\n    const getStaleStatus = ()=>{\n        const cacheData = cache.get(cacheKey);\n        return !cacheData || isStaleCacheData(cacheTime, cacheData == null ? void 0 : cacheData.timestamp);\n    };\n    const renderKeyTrigger = (keys)=>{\n        const shouldRerender = renderKeys.current.some((renderKey)=>keys.includes(renderKey));\n        if (shouldRerender) forceUpdate();\n    };\n    const setRenderKey = (renderKey)=>{\n        if (!renderKeys.current.includes(renderKey)) {\n            renderKeys.current.push(renderKey);\n        }\n    };\n    (0, import_lifecycle2.useDidUpdate)(()=>{\n        state.current.loading = dispatcher.hasRunningRequests(queueKey);\n        const cacheData = cache.get(cacheKey);\n        const cacheState = getValidCacheData(request, initialData || fallbackData, cacheData);\n        const hasInitialState = isEqual((initialData == null ? void 0 : initialData.data) || (fallbackData == null ? void 0 : fallbackData.data), state.current.data);\n        const hasState = !!(state.current.data || state.current.error) && !hasInitialState;\n        const shouldLoadInitialCache = !hasState && !!state.current.data;\n        const shouldRemovePreviousData = hasState && !state.current.data;\n        if (cacheState || shouldLoadInitialCache || shouldRemovePreviousData) {\n            setCacheData(cacheState);\n        }\n    }, [\n        cacheKey,\n        queueKey\n    ], true);\n    (0, import_lifecycle2.useDidUpdate)(()=>{\n        const handleDependencyTracking = ()=>{\n            if (!dependencyTracking) {\n                Object.keys(state.current).forEach((key)=>setRenderKey(key));\n            }\n        };\n        handleDependencyTracking();\n    }, [\n        dependencyTracking\n    ], true);\n    const handleCompare = (firstValue, secondValue)=>{\n        if (typeof deepCompare === \"function\") {\n            return deepCompare(firstValue, secondValue);\n        }\n        if (deepCompare) {\n            return isEqual(firstValue, secondValue);\n        }\n        return false;\n    };\n    const handleCacheData = (cacheData)=>{\n        const newStateValues = {\n            data: cacheData.data,\n            error: cacheData.error,\n            status: cacheData.status,\n            success: cacheData.success,\n            extra: cacheData.extra,\n            retries: cacheData.retries,\n            timestamp: new Date(cacheData.timestamp),\n            loading: state.current.loading\n        };\n        const changedKeys = Object.keys(newStateValues).filter((key)=>{\n            const keyValue = key;\n            const firstValue = state.current[keyValue];\n            const secondValue = newStateValues[keyValue];\n            return !handleCompare(firstValue, secondValue);\n        });\n        state.current = __spreadValues(__spreadValues({}, state.current), newStateValues);\n        renderKeyTrigger(changedKeys);\n    };\n    const setCacheData = (cacheData)=>{\n        const data = responseMapper ? responseMapper(cacheData) : cacheData;\n        if (data instanceof Promise) {\n            return (()=>__async(void 0, null, function*() {\n                    const promiseData = yield data;\n                    handleCacheData(__spreadValues(__spreadValues({}, cacheData), promiseData));\n                }))();\n        }\n        return handleCacheData(__spreadValues(__spreadValues({}, cacheData), data));\n    };\n    const actions = {\n        setData: (data, emitToCache = defaultCacheEmitting)=>{\n            if (emitToCache) {\n                const currentState = state.current;\n                cache.set(request, __spreadProps(__spreadValues(__spreadValues({}, currentState), getDetailsState(state.current)), {\n                    success: true,\n                    data\n                }));\n            } else {\n                state.current.data = data;\n                renderKeyTrigger([\n                    \"data\"\n                ]);\n            }\n        },\n        setError: (error, emitToCache = defaultCacheEmitting)=>{\n            if (emitToCache) {\n                const currentState = state.current;\n                cache.set(request, __spreadProps(__spreadValues(__spreadValues({}, currentState), getDetailsState(state.current)), {\n                    success: false,\n                    error\n                }));\n            } else {\n                state.current.error = error;\n                renderKeyTrigger([\n                    \"error\"\n                ]);\n            }\n        },\n        setLoading: (loading, emitToHooks = true)=>{\n            if (emitToHooks) {\n                requestManager.events.emitLoading(queueKey, \"\", {\n                    queueKey,\n                    requestId: \"\",\n                    loading,\n                    isRetry: false,\n                    isOffline: false\n                });\n            } else {\n                state.current.loading = loading;\n                renderKeyTrigger([\n                    \"loading\"\n                ]);\n            }\n        },\n        setStatus: (status, emitToCache = defaultCacheEmitting)=>{\n            if (emitToCache) {\n                const currentState = state.current;\n                cache.set(request, __spreadProps(__spreadValues(__spreadValues({}, currentState), getDetailsState(state.current)), {\n                    status\n                }));\n            } else {\n                state.current.status = status;\n                renderKeyTrigger([\n                    \"status\"\n                ]);\n            }\n        },\n        setSuccess: (success, emitToCache = defaultCacheEmitting)=>{\n            if (emitToCache) {\n                const currentState = state.current;\n                cache.set(request, __spreadProps(__spreadValues(__spreadValues({}, currentState), getDetailsState(state.current)), {\n                    success\n                }));\n            } else {\n                state.current.success = success;\n                renderKeyTrigger([\n                    \"success\"\n                ]);\n            }\n        },\n        setExtra: (extra, emitToCache = defaultCacheEmitting)=>{\n            if (emitToCache) {\n                const currentState = state.current;\n                cache.set(request, __spreadProps(__spreadValues(__spreadValues({}, currentState), getDetailsState(state.current)), {\n                    extra\n                }));\n            } else {\n                state.current.extra = extra;\n                renderKeyTrigger([\n                    \"extra\"\n                ]);\n            }\n        },\n        setRetries: (retries, emitToCache = defaultCacheEmitting)=>{\n            if (emitToCache) {\n                const currentState = state.current;\n                cache.set(request, __spreadValues(__spreadValues({}, currentState), getDetailsState(state.current, {\n                    retries\n                })));\n            } else {\n                state.current.retries = retries;\n                renderKeyTrigger([\n                    \"retries\"\n                ]);\n            }\n        },\n        setTimestamp: (timestamp, emitToCache = defaultCacheEmitting)=>{\n            if (emitToCache) {\n                const currentState = state.current;\n                cache.set(request, __spreadValues(__spreadValues({}, currentState), getDetailsState(state.current, {\n                    timestamp: +timestamp\n                })));\n            } else {\n                state.current.timestamp = timestamp;\n                renderKeyTrigger([\n                    \"timestamp\"\n                ]);\n            }\n        }\n    };\n    return [\n        state.current,\n        actions,\n        {\n            setRenderKey,\n            setCacheData,\n            getStaleStatus\n        }\n    ];\n};\n// src/helpers/use-socket-state/use-socket-state.hooks.ts\nvar import_react4 = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle3 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar useSocketState = (socket, { dependencyTracking })=>{\n    const forceUpdate = (0, import_lifecycle3.useForceUpdate)();\n    const onOpenCallback = (0, import_react4.useRef)(null);\n    const onCloseCallback = (0, import_react4.useRef)(null);\n    const onErrorCallback = (0, import_react4.useRef)(null);\n    const onConnectingCallback = (0, import_react4.useRef)(null);\n    const onReconnectingCallback = (0, import_react4.useRef)(null);\n    const onReconnectingStopCallback = (0, import_react4.useRef)(null);\n    const state = (0, import_react4.useRef)(initialSocketState);\n    const renderKeys = (0, import_react4.useRef)([]);\n    const renderKeyTrigger = (keys)=>{\n        const shouldRerender = renderKeys.current.some((renderKey)=>keys.includes(renderKey));\n        if (shouldRerender) forceUpdate();\n    };\n    const setRenderKey = (renderKey)=>{\n        if (!renderKeys.current.includes(renderKey)) {\n            renderKeys.current.push(renderKey);\n        }\n    };\n    (0, import_lifecycle3.useDidUpdate)(()=>{\n        const handleDependencyTracking = ()=>{\n            if (!dependencyTracking) {\n                Object.keys(state.current).forEach((key)=>setRenderKey(key));\n            }\n        };\n        handleDependencyTracking();\n    }, [\n        dependencyTracking\n    ], true);\n    const actions = {\n        setData: (data)=>{\n            state.current.data = data;\n            renderKeyTrigger([\n                \"data\"\n            ]);\n        },\n        setConnected: (connected)=>{\n            state.current.connected = connected;\n            renderKeyTrigger([\n                \"data\"\n            ]);\n        },\n        setConnecting: (connecting)=>{\n            state.current.connecting = connecting;\n            renderKeyTrigger([\n                \"data\"\n            ]);\n        },\n        setTimestamp: (timestamp)=>{\n            state.current.timestamp = timestamp;\n            renderKeyTrigger([\n                \"timestamp\"\n            ]);\n        }\n    };\n    const callbacks = {\n        onOpen: (callback)=>{\n            onOpenCallback.current = callback;\n        },\n        onClose: (callback)=>{\n            onCloseCallback.current = callback;\n        },\n        onError: (callback)=>{\n            onErrorCallback.current = callback;\n        },\n        onConnecting: (callback)=>{\n            onConnectingCallback.current = callback;\n        },\n        onReconnecting: (callback)=>{\n            onReconnectingCallback.current = callback;\n        },\n        onReconnectingStop: (callback)=>{\n            onReconnectingStopCallback.current = callback;\n        }\n    };\n    (0, import_lifecycle3.useDidMount)(()=>{\n        const umountOnError = socket.events.onError((event)=>{\n            var _a;\n            (_a = onErrorCallback.current) == null ? void 0 : _a.call(onErrorCallback, event);\n        });\n        const umountOnConnecting = socket.events.onConnecting(()=>{\n            var _a;\n            actions.setConnecting(true);\n            (_a = onConnectingCallback.current) == null ? void 0 : _a.call(onConnectingCallback);\n        });\n        const umountOnOpen = socket.events.onOpen(()=>{\n            var _a;\n            actions.setConnected(true);\n            (_a = onOpenCallback.current) == null ? void 0 : _a.call(onOpenCallback);\n        });\n        const umountOnClose = socket.events.onClose(()=>{\n            var _a;\n            actions.setConnected(false);\n            (_a = onCloseCallback.current) == null ? void 0 : _a.call(onCloseCallback);\n        });\n        const umountOnReconnecting = socket.events.onReconnecting((attempts)=>{\n            var _a;\n            (_a = onReconnectingCallback.current) == null ? void 0 : _a.call(onReconnectingCallback, attempts);\n        });\n        const umountOnReconnectingStop = socket.events.onReconnectingStop((attempts)=>{\n            var _a;\n            (_a = onReconnectingStopCallback.current) == null ? void 0 : _a.call(onReconnectingStopCallback, attempts);\n        });\n        return ()=>{\n            umountOnError();\n            umountOnConnecting();\n            umountOnOpen();\n            umountOnClose();\n            umountOnReconnecting();\n            umountOnReconnectingStop();\n        };\n    });\n    return [\n        state.current,\n        actions,\n        callbacks,\n        {\n            setRenderKey\n        }\n    ];\n};\n// src/helpers/use-socket-state/use-socket-state.constants.ts\nvar initialSocketState = {\n    data: null,\n    connected: false,\n    connecting: false,\n    timestamp: null\n};\n// src/hooks/use-fetch/use-fetch.hooks.ts\nvar useFetch = (request, options = useFetchDefaultOptions)=>{\n    const { config: globalConfig } = useConfigProvider();\n    const { dependencies = useFetchDefaultOptions.dependencies, disabled = useFetchDefaultOptions.disabled, dependencyTracking = useFetchDefaultOptions.dependencyTracking, revalidate = useFetchDefaultOptions.revalidate, initialData = useFetchDefaultOptions.initialData, refresh = useFetchDefaultOptions.refresh, refreshTime = useFetchDefaultOptions.refreshTime, refetchBlurred = useFetchDefaultOptions.refetchBlurred, refetchOnBlur = useFetchDefaultOptions.refetchOnBlur, refetchOnFocus = useFetchDefaultOptions.refetchOnFocus, refetchOnReconnect = useFetchDefaultOptions.refetchOnReconnect, bounce = useFetchDefaultOptions.bounce, bounceType = useFetchDefaultOptions.bounceType, bounceTime = useFetchDefaultOptions.bounceTime, bounceTimeout = useFetchDefaultOptions.bounceTime, deepCompare = useFetchDefaultOptions.deepCompare } = __spreadValues(__spreadValues(__spreadValues({}, useFetchDefaultOptions), globalConfig.useFetchConfig), options);\n    const updateKey = JSON.stringify(request.toJSON());\n    const requestDebounce = (0, import_performance.useDebounce)({\n        delay: bounceTime\n    });\n    const requestThrottle = (0, import_performance.useThrottle)({\n        interval: bounceTime,\n        timeout: bounceTimeout\n    });\n    const refreshDebounce = (0, import_performance.useDebounce)({\n        delay: refreshTime\n    });\n    const { cacheKey, queueKey, client } = request;\n    const { cache, fetchDispatcher: dispatcher, appManager, loggerManager } = client;\n    const ignoreReact18DoubleRender = (0, import_react5.useRef)(true);\n    const logger = (0, import_react5.useRef)(loggerManager.init(\"useFetch\")).current;\n    const bounceData = bounceType === \"throttle\" ? requestThrottle : requestDebounce;\n    const bounceFunction = bounceType === \"throttle\" ? requestThrottle.throttle : requestDebounce.debounce;\n    const [state, actions, { setRenderKey, setCacheData, getStaleStatus }] = useTrackedState({\n        logger,\n        request,\n        dispatcher,\n        initialData,\n        deepCompare,\n        dependencyTracking\n    });\n    const [callbacks, listeners] = useRequestEvents({\n        logger,\n        actions,\n        request,\n        dispatcher,\n        setCacheData\n    });\n    const { addDataListener, addLifecycleListeners, clearDataListener } = listeners;\n    const handleFetch = ()=>{\n        if (!disabled) {\n            logger.debug(`Fetching data`);\n            dispatcher.add(request);\n        } else {\n            logger.debug(`Cannot add to fetch queue`, {\n                disabled\n            });\n        }\n    };\n    function handleRefresh() {\n        if (!refresh) {\n            refreshDebounce.reset();\n            return;\n        }\n        refreshDebounce.debounce(()=>{\n            const isBlurred = !appManager.isFocused;\n            const isFetching = dispatcher.hasRunningRequests(request.queueKey);\n            const isQueued = dispatcher.getIsActiveQueue(request.queueKey);\n            const isActive = isFetching || isQueued;\n            const canRefreshBlurred = isBlurred && refetchBlurred && !isActive;\n            const canRefreshFocused = !isBlurred && !isActive;\n            if (canRefreshBlurred || canRefreshFocused) {\n                handleFetch();\n                logger.debug(`Performing refresh request`);\n            }\n            handleRefresh();\n        });\n    }\n    const handleInvalidation = (invalidateKey)=>{\n        if (invalidateKey && invalidateKey instanceof import_core3.Request) {\n            cache.invalidate((0, import_core3.getRequestKey)(invalidateKey));\n        } else if (invalidateKey && !(invalidateKey instanceof import_core3.Request)) {\n            cache.invalidate(invalidateKey);\n        }\n    };\n    const refetch = (invalidateKey)=>{\n        if (invalidateKey && Array.isArray(invalidateKey)) {\n            invalidateKey.forEach(handleInvalidation);\n        } else if (invalidateKey && !Array.isArray(invalidateKey)) {\n            handleInvalidation(invalidateKey);\n        } else {\n            handleFetch();\n            handleRefresh();\n        }\n    };\n    const getIsFetchingIdentity = ()=>{\n        return dispatcher.getRunningRequests(queueKey).some((running)=>running.request.cacheKey === cacheKey);\n    };\n    const initialFetchData = ()=>{\n        const hasStaleData = getStaleStatus();\n        const isFetching = getIsFetchingIdentity();\n        if ((revalidate || hasStaleData) && !isFetching) {\n            handleFetch();\n        }\n    };\n    const updateFetchData = ()=>{\n        const hasStaleData = getStaleStatus();\n        const shouldUpdate = !revalidate ? hasStaleData : true;\n        if (!ignoreReact18DoubleRender.current && shouldUpdate) {\n            if (bounce) {\n                logger.debug(`Bounce request with ${bounceType}`, {\n                    queueKey,\n                    request\n                });\n                bounceFunction(()=>handleFetch());\n            } else {\n                handleFetch();\n            }\n        } else {\n            ignoreReact18DoubleRender.current = false;\n        }\n    };\n    const handleMountEvents = ()=>{\n        addDataListener(request);\n        addLifecycleListeners(request);\n        const focusUnmount = appManager.events.onFocus(()=>{\n            if (refetchOnFocus) {\n                handleFetch();\n                handleRefresh();\n            }\n        });\n        const blurUnmount = appManager.events.onBlur(()=>{\n            if (refetchOnBlur) {\n                handleFetch();\n                handleRefresh();\n            }\n        });\n        const onlineUnmount = appManager.events.onOnline(()=>{\n            if (refetchOnReconnect) {\n                handleFetch();\n                handleRefresh();\n            }\n        });\n        const invalidateUnmount = cache.events.onInvalidate(cacheKey, handleFetch);\n        const unmount = ()=>{\n            clearDataListener();\n            focusUnmount();\n            blurUnmount();\n            onlineUnmount();\n            invalidateUnmount();\n        };\n        return unmount;\n    };\n    (0, import_lifecycle4.useDidUpdate)(handleMountEvents, [\n        updateKey\n    ], true);\n    (0, import_lifecycle4.useDidMount)(initialFetchData);\n    (0, import_lifecycle4.useDidUpdate)(updateFetchData, [\n        updateKey,\n        disabled,\n        ...dependencies\n    ], true);\n    (0, import_lifecycle4.useDidUpdate)(handleRefresh, [\n        updateKey,\n        ...dependencies,\n        disabled,\n        refresh,\n        refreshTime\n    ], true);\n    (0, import_lifecycle4.useWillUnmount)(()=>{\n        ignoreReact18DoubleRender.current = true;\n    });\n    return __spreadProps(__spreadValues(__spreadValues({\n        get data () {\n            setRenderKey(\"data\");\n            return state.data;\n        },\n        get error () {\n            setRenderKey(\"error\");\n            return state.error;\n        },\n        get loading () {\n            setRenderKey(\"loading\");\n            return state.loading;\n        },\n        get status () {\n            setRenderKey(\"status\");\n            return state.status;\n        },\n        get success () {\n            setRenderKey(\"success\");\n            return state.success;\n        },\n        get extra () {\n            setRenderKey(\"extra\");\n            return state.extra;\n        },\n        get retries () {\n            setRenderKey(\"retries\");\n            return state.retries;\n        },\n        get timestamp () {\n            setRenderKey(\"timestamp\");\n            return state.timestamp;\n        },\n        bounce: getBounceData(bounceData)\n    }, actions), callbacks), {\n        refetch\n    });\n};\n// src/hooks/use-fetch/use-fetch.utils.ts\nvar getRefreshTime = (refreshTime, dataTimestamp)=>{\n    if (dataTimestamp) {\n        const timeDiff = Date.now() - +dataTimestamp;\n        return timeDiff < refreshTime ? refreshTime - timeDiff : refreshTime;\n    }\n    return refreshTime;\n};\n// src/hooks/use-fetch/use-fetch.constants.ts\nvar import_core4 = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.cjs.js\");\nvar useFetchDefaultOptions = {\n    dependencies: [],\n    disabled: false,\n    dependencyTracking: true,\n    revalidate: true,\n    initialData: null,\n    refresh: false,\n    refreshTime: import_core4.Time.HOUR,\n    refetchBlurred: true,\n    refetchOnBlur: false,\n    refetchOnFocus: false,\n    refetchOnReconnect: false,\n    bounce: false,\n    bounceType: \"debounce\",\n    bounceTime: 400,\n    deepCompare: true\n};\n// src/hooks/use-submit/use-submit.hooks.ts\nvar import_react6 = __webpack_require__(/*! react */ \"react\");\nvar import_core5 = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.cjs.js\");\nvar import_lifecycle5 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar import_performance2 = __webpack_require__(/*! @better-hooks/performance */ \"@better-hooks/performance\");\nvar useSubmit = (request, options = useSubmitDefaultOptions)=>{\n    const { config: globalConfig } = useConfigProvider();\n    const mergedOptions = (0, import_react6.useMemo)(()=>__spreadValues(__spreadValues(__spreadValues({}, useSubmitDefaultOptions), globalConfig.useSubmitConfig), options), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        globalConfig.useSubmitConfig,\n        JSON.stringify(options),\n        options.deepCompare\n    ]);\n    const { disabled, dependencyTracking, initialData, bounce, bounceType, bounceTime, deepCompare } = mergedOptions;\n    const { client } = request;\n    const { cache, submitDispatcher: dispatcher, loggerManager } = client;\n    const logger = (0, import_react6.useRef)(loggerManager.init(\"useSubmit\")).current;\n    const requestDebounce = (0, import_performance2.useDebounce)({\n        delay: bounceTime\n    });\n    const requestThrottle = (0, import_performance2.useThrottle)({\n        interval: bounceTime,\n        timeout: \"bounceTimeout\" in mergedOptions ? mergedOptions.bounceTimeout : bounceTime\n    });\n    const bounceResolver = (0, import_react6.useRef)(()=>null);\n    const bounceData = bounceType === \"throttle\" ? requestThrottle : requestDebounce;\n    const bounceFunction = bounceType === \"throttle\" ? requestThrottle.throttle : requestDebounce.debounce;\n    const [state, actions, { setRenderKey, setCacheData }] = useTrackedState({\n        logger,\n        request,\n        dispatcher,\n        initialData,\n        deepCompare,\n        dependencyTracking\n    });\n    const [callbacks, listeners] = useRequestEvents({\n        logger,\n        actions,\n        request,\n        dispatcher,\n        setCacheData\n    });\n    const { addDataListener, addLifecycleListeners } = listeners;\n    const handleSubmit = (submitOptions)=>{\n        const requestClone = request.clone(submitOptions);\n        if (disabled) {\n            logger.warning(`Cannot submit request`, {\n                disabled,\n                submitOptions\n            });\n            return Promise.resolve({\n                data: null,\n                error: new Error(\"Cannot submit request. Option 'disabled' is enabled\"),\n                status: null,\n                extra: request.client.defaultExtra\n            });\n        }\n        const triggerRequest = ()=>{\n            addDataListener(requestClone);\n            return (0, import_core5.sendRequest)(requestClone, __spreadProps(__spreadValues({\n                dispatcherType: \"submit\"\n            }, submitOptions), {\n                onSettle: (requestId, cmd)=>{\n                    var _a;\n                    addLifecycleListeners(requestClone, requestId);\n                    (_a = submitOptions == null ? void 0 : submitOptions.onSettle) == null ? void 0 : _a.call(submitOptions, requestId, cmd);\n                }\n            }));\n        };\n        return new Promise((resolve)=>{\n            const performSubmit = ()=>__async(void 0, null, function*() {\n                    logger.debug(`Submitting request`, {\n                        disabled,\n                        submitOptions\n                    });\n                    if (bounce) {\n                        const bouncedResolve = bounceResolver.current;\n                        bounceResolver.current = (value)=>{\n                            bouncedResolve(value);\n                            resolve(value);\n                        };\n                        bounceFunction(()=>__async(void 0, null, function*() {\n                                const callback = bounceResolver.current;\n                                bounceResolver.current = ()=>null;\n                                const value = yield triggerRequest();\n                                callback(value);\n                            }));\n                    } else {\n                        const value = yield triggerRequest();\n                        resolve(value);\n                    }\n                });\n            performSubmit();\n        });\n    };\n    const handleInvalidation = (invalidateKey)=>{\n        if (invalidateKey && invalidateKey instanceof import_core5.Request) {\n            cache.invalidate((0, import_core5.getRequestKey)(invalidateKey));\n        } else if (invalidateKey && !(invalidateKey instanceof import_core5.Request)) {\n            cache.invalidate(invalidateKey);\n        }\n    };\n    const refetch = (invalidateKey)=>{\n        if (!invalidateKey) return;\n        if (invalidateKey && Array.isArray(invalidateKey)) {\n            invalidateKey.forEach(handleInvalidation);\n        } else if (invalidateKey && !Array.isArray(invalidateKey)) {\n            handleInvalidation(invalidateKey);\n        }\n    };\n    const handlers = {\n        onSubmitSuccess: callbacks.onSuccess,\n        onSubmitError: callbacks.onError,\n        onSubmitFinished: callbacks.onFinished,\n        onSubmitRequestStart: callbacks.onRequestStart,\n        onSubmitResponseStart: callbacks.onResponseStart,\n        onSubmitDownloadProgress: callbacks.onDownloadProgress,\n        onSubmitUploadProgress: callbacks.onUploadProgress,\n        onSubmitOfflineError: callbacks.onOfflineError,\n        onSubmitAbort: callbacks.onAbort\n    };\n    (0, import_lifecycle5.useDidMount)(()=>{\n        addDataListener(request);\n    });\n    return __spreadProps(__spreadValues(__spreadValues({\n        submit: handleSubmit,\n        get data () {\n            setRenderKey(\"data\");\n            return state.data;\n        },\n        get error () {\n            setRenderKey(\"error\");\n            return state.error;\n        },\n        get submitting () {\n            setRenderKey(\"loading\");\n            return state.loading;\n        },\n        get status () {\n            setRenderKey(\"status\");\n            return state.status;\n        },\n        get success () {\n            setRenderKey(\"success\");\n            return state.success;\n        },\n        get extra () {\n            setRenderKey(\"extra\");\n            return state.extra;\n        },\n        get retries () {\n            setRenderKey(\"retries\");\n            return state.retries;\n        },\n        get timestamp () {\n            setRenderKey(\"timestamp\");\n            return state.timestamp;\n        },\n        abort: callbacks.abort\n    }, actions), handlers), {\n        bounce: getBounceData(bounceData),\n        refetch\n    });\n};\n// src/hooks/use-submit/use-submit.constants.ts\nvar useSubmitDefaultOptions = {\n    disabled: false,\n    dependencyTracking: true,\n    initialData: null,\n    bounce: false,\n    bounceType: \"debounce\",\n    bounceTime: 400,\n    deepCompare: true\n};\n// src/hooks/use-queue/use-queue.hooks.ts\nvar import_react7 = __webpack_require__(/*! react */ \"react\");\nvar import_core6 = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.cjs.js\");\nvar import_lifecycle6 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar useQueue = (request, options = useQueueDefaultOptions)=>{\n    const { config: globalConfig } = useConfigProvider();\n    const { queueType = \"auto\" } = __spreadValues(__spreadValues(__spreadValues({}, useQueueDefaultOptions), globalConfig.useQueueConfig), options);\n    const { abortKey, queueKey, client } = request;\n    const { requestManager } = client;\n    const [dispatcher] = (0, import_core6.getRequestDispatcher)(request, queueType);\n    const unmountCallbacks = (0, import_react7.useRef)(null);\n    const [stopped, setStopped] = (0, import_react7.useState)(false);\n    const [requests, setRequests] = (0, import_react7.useState)([]);\n    const createRequestsArray = (queueElements)=>{\n        return queueElements.map((req)=>__spreadProps(__spreadValues({}, req), {\n                stopRequest: ()=>dispatcher.stopRequest(queueKey, req.requestId),\n                startRequest: ()=>dispatcher.startRequest(queueKey, req.requestId),\n                deleteRequest: ()=>dispatcher.delete(queueKey, req.requestId, abortKey)\n            }));\n    };\n    const mergePayloadType = (requestId, data)=>{\n        setRequests((prev)=>prev.map((el)=>el.requestId === requestId ? __spreadValues(__spreadValues({}, el), data) : el));\n    };\n    const getInitialState2 = ()=>{\n        const requestQueue = dispatcher.getQueue(queueKey);\n        setStopped(requestQueue.stopped);\n        setRequests(createRequestsArray(requestQueue.requests));\n    };\n    const updateQueueState = (values)=>{\n        setStopped(values.stopped);\n        setRequests(createRequestsArray(values.requests));\n    };\n    const mountEvents = ()=>{\n        var _a;\n        const unmountChange = dispatcher.events.onQueueChange(queueKey, updateQueueState);\n        const unmountStatus = dispatcher.events.onQueueStatus(queueKey, updateQueueState);\n        const unmountDownload = requestManager.events.onDownloadProgress(queueKey, (progress, { requestId })=>{\n            mergePayloadType(requestId, {\n                downloading: progress\n            });\n        });\n        const unmountUpload = requestManager.events.onUploadProgress(queueKey, (progress, { requestId })=>{\n            mergePayloadType(requestId, {\n                uploading: progress\n            });\n        });\n        const unmount = ()=>{\n            unmountStatus();\n            unmountChange();\n            unmountDownload();\n            unmountUpload();\n        };\n        (_a = unmountCallbacks.current) == null ? void 0 : _a.call(unmountCallbacks);\n        unmountCallbacks.current = unmount;\n        return unmount;\n    };\n    (0, import_lifecycle6.useDidMount)(getInitialState2);\n    (0, import_lifecycle6.useDidUpdate)(mountEvents, [\n        stopped,\n        requests,\n        setRequests,\n        setStopped\n    ], true);\n    return {\n        stopped,\n        requests,\n        stop: ()=>dispatcher.stop(queueKey),\n        pause: ()=>dispatcher.pause(queueKey),\n        start: ()=>dispatcher.start(queueKey)\n    };\n};\n// src/hooks/use-queue/use-queue.constants.ts\nvar useQueueDefaultOptions = {\n    queueType: \"auto\"\n};\n// src/hooks/use-cache/use-cache.hooks.ts\nvar import_react8 = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle7 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar import_core7 = __webpack_require__(/*! @hyper-fetch/core */ \"../../packages/core/dist/index.cjs.js\");\nvar useCache = (request, options = useCacheDefaultOptions)=>{\n    const { cacheKey, client } = request;\n    const { cache, loggerManager } = client;\n    const logger = (0, import_react8.useRef)(loggerManager.init(\"useCache\")).current;\n    const [dispatcher] = (0, import_core7.getRequestDispatcher)(request);\n    const updateKey = JSON.stringify(request.toJSON());\n    const { config: globalConfig } = useConfigProvider();\n    const { dependencyTracking, initialData, deepCompare } = __spreadValues(__spreadValues(__spreadValues({}, useCacheDefaultOptions), globalConfig.useCacheConfig), options);\n    const [state, actions, { setRenderKey, setCacheData }] = useTrackedState({\n        logger,\n        request,\n        dispatcher,\n        initialData,\n        deepCompare,\n        dependencyTracking\n    });\n    const [callbacks, listeners] = useRequestEvents({\n        logger,\n        actions,\n        request,\n        dispatcher,\n        setCacheData\n    });\n    const { addDataListener, addLifecycleListeners } = listeners;\n    const handleMountEvents = ()=>{\n        const unmountDataListener = addDataListener(request);\n        const unmountLifecycleListener = addLifecycleListeners(request);\n        return ()=>{\n            unmountDataListener();\n            unmountLifecycleListener();\n        };\n    };\n    (0, import_lifecycle7.useDidUpdate)(()=>{\n        return handleMountEvents();\n    }, [\n        updateKey\n    ], true);\n    const refetch = (invalidateKey)=>{\n        if (invalidateKey instanceof import_core7.Request) {\n            cache.invalidate((0, import_core7.getRequestKey)(invalidateKey, true));\n        } else if (invalidateKey) {\n            cache.invalidate(invalidateKey);\n        } else {\n            cache.invalidate(cacheKey);\n        }\n    };\n    return __spreadProps(__spreadValues({\n        get data () {\n            setRenderKey(\"data\");\n            return state.data;\n        },\n        get error () {\n            setRenderKey(\"error\");\n            return state.error;\n        },\n        get loading () {\n            setRenderKey(\"loading\");\n            return state.loading;\n        },\n        get status () {\n            setRenderKey(\"status\");\n            return state.status;\n        },\n        get success () {\n            setRenderKey(\"success\");\n            return state.success;\n        },\n        get extra () {\n            setRenderKey(\"extra\");\n            return state.extra;\n        },\n        get retries () {\n            setRenderKey(\"retries\");\n            return state.retries;\n        },\n        get timestamp () {\n            setRenderKey(\"timestamp\");\n            return state.timestamp;\n        },\n        onCacheError: callbacks.onError,\n        onCacheSuccess: callbacks.onSuccess,\n        onCacheChange: callbacks.onFinished\n    }, actions), {\n        refetch\n    });\n};\n// src/hooks/use-cache/use-cache.constants.ts\nvar useCacheDefaultOptions = {\n    dependencyTracking: true,\n    initialData: null,\n    deepCompare: true\n};\n// src/hooks/use-listener/use-listener.hooks.ts\nvar import_react9 = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle8 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar useListener = (listener, options)=>{\n    const { config: globalConfig } = useConfigProvider();\n    const { dependencyTracking } = __spreadValues(__spreadValues({}, globalConfig.useListener), options);\n    const [state, actions, callbacks, { setRenderKey }] = useSocketState(listener.socket, {\n        dependencyTracking\n    });\n    const removeListenerRef = (0, import_react9.useRef)(null);\n    const onEventCallback = (0, import_react9.useRef)(null);\n    const stopListener = ()=>{\n        var _a;\n        (_a = removeListenerRef.current) == null ? void 0 : _a.call(removeListenerRef);\n    };\n    const listen = ()=>{\n        stopListener();\n        removeListenerRef.current = listener.listen({\n            callback: ({ data, extra })=>{\n                var _a;\n                (_a = onEventCallback.current) == null ? void 0 : _a.call(onEventCallback, {\n                    data,\n                    extra\n                });\n                actions.setData(data);\n                actions.setTimestamp(+/* @__PURE__ */ new Date());\n            }\n        });\n    };\n    const additionalCallbacks = {\n        onEvent: (callback)=>{\n            onEventCallback.current = callback;\n        }\n    };\n    (0, import_lifecycle8.useDidUpdate)(()=>{\n        listen();\n    }, [\n        listener.params,\n        JSON.stringify(listener.options)\n    ], true);\n    (0, import_lifecycle8.useWillUnmount)(()=>{\n        stopListener();\n    });\n    return __spreadProps(__spreadValues(__spreadValues(__spreadValues({\n        get data () {\n            setRenderKey(\"data\");\n            return state.data;\n        },\n        get connected () {\n            setRenderKey(\"connected\");\n            return state.connected;\n        },\n        get connecting () {\n            setRenderKey(\"connecting\");\n            return state.connecting;\n        },\n        get timestamp () {\n            setRenderKey(\"timestamp\");\n            return state.timestamp;\n        }\n    }, actions), callbacks), additionalCallbacks), {\n        listen\n    });\n};\n// src/hooks/use-emitter/use-emitter.hooks.ts\nvar import_react10 = __webpack_require__(/*! react */ \"react\");\nvar useEmitter = (emitter, options)=>{\n    const { config: globalConfig } = useConfigProvider();\n    const { dependencyTracking } = __spreadValues(__spreadValues({}, globalConfig.useEmitter), options);\n    const onEventCallback = (0, import_react10.useRef)(null);\n    const [state, actions, callbacks, { setRenderKey }] = useSocketState(emitter.socket, {\n        dependencyTracking\n    });\n    const additionalCallbacks = {\n        onEvent: (callback)=>{\n            onEventCallback.current = callback;\n        }\n    };\n    const emit = (emitOptions)=>{\n        var _a;\n        actions.setTimestamp(+/* @__PURE__ */ new Date());\n        (_a = onEventCallback.current) == null ? void 0 : _a.call(onEventCallback, emitter);\n        return emitter.emit(emitOptions);\n    };\n    return __spreadProps(__spreadValues(__spreadValues(__spreadValues({\n        get connected () {\n            setRenderKey(\"connected\");\n            return state.connected;\n        },\n        get connecting () {\n            setRenderKey(\"connecting\");\n            return state.connecting;\n        },\n        get timestamp () {\n            setRenderKey(\"timestamp\");\n            return state.timestamp;\n        }\n    }, actions), callbacks), additionalCallbacks), {\n        emit,\n        reconnect: emitter.socket.reconnect\n    });\n};\n// src/hooks/use-event-messages/use-event-messages.hooks.ts\nvar import_react11 = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle9 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar useEventMessages = (socket, options)=>{\n    const { config: globalConfig } = useConfigProvider();\n    const { dependencyTracking = false, filter } = __spreadValues(__spreadValues({}, globalConfig.useEventMessages), options);\n    const onEventCallback = (0, import_react11.useRef)(null);\n    const [state, actions, callbacks, { setRenderKey }] = useSocketState(socket, {\n        dependencyTracking\n    });\n    (0, import_lifecycle9.useDidUpdate)(()=>{\n        const unmountListener = socket.events.onListenerEvent(({ endpoint, data, extra })=>{\n            var _a;\n            const filterFn = typeof filter === \"function\" ? ()=>filter(endpoint, data) : ()=>filter.includes(endpoint);\n            const isFiltered = filter ? filterFn() : false;\n            if (!isFiltered) {\n                (_a = onEventCallback.current) == null ? void 0 : _a.call(onEventCallback, data, extra);\n                actions.setData(data);\n                actions.setTimestamp(+/* @__PURE__ */ new Date());\n            }\n        });\n        return unmountListener;\n    }, [\n        socket,\n        filter\n    ], true);\n    const additionalCallbacks = {\n        onEvent: (callback)=>{\n            onEventCallback.current = callback;\n        }\n    };\n    return __spreadValues(__spreadValues(__spreadValues({\n        get data () {\n            setRenderKey(\"data\");\n            return state.data;\n        },\n        get connected () {\n            setRenderKey(\"connected\");\n            return state.connected;\n        },\n        get connecting () {\n            setRenderKey(\"connecting\");\n            return state.connecting;\n        },\n        get timestamp () {\n            setRenderKey(\"timestamp\");\n            return state.timestamp;\n        }\n    }, actions), callbacks), additionalCallbacks);\n};\n// src/hooks/use-app-manager/use-app-manager.hooks.ts\nvar import_react12 = __webpack_require__(/*! react */ \"react\");\nvar import_lifecycle10 = __webpack_require__(/*! @better-hooks/lifecycle */ \"@better-hooks/lifecycle\");\nvar useAppManager = (client)=>{\n    const [online, setIsOnline] = (0, import_react12.useState)(client.appManager.isOnline);\n    const [focused, setIsFocused] = (0, import_react12.useState)(client.appManager.isFocused);\n    const mountEvents = ()=>{\n        const unmountIsOnline = client.appManager.events.onOnline(()=>setIsOnline(true));\n        const unmountIsOffline = client.appManager.events.onOffline(()=>setIsOnline(false));\n        const unmountIsFocus = client.appManager.events.onFocus(()=>setIsFocused(true));\n        const unmountIsBlur = client.appManager.events.onBlur(()=>setIsFocused(false));\n        return ()=>{\n            unmountIsOnline();\n            unmountIsOffline();\n            unmountIsFocus();\n            unmountIsBlur();\n        };\n    };\n    const setOnline = (isOnline)=>{\n        client.appManager.setOnline(isOnline);\n    };\n    const setFocused = (isFocused)=>{\n        client.appManager.setFocused(isFocused);\n    };\n    (0, import_lifecycle10.useDidMount)(mountEvents);\n    return {\n        isOnline: online,\n        isFocused: focused,\n        setOnline,\n        setFocused\n    };\n}; //# sourceMappingURL=index.cjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/react/dist/index.cjs.js\n");

/***/ }),

/***/ "@better-hooks/lifecycle":
/*!******************************************!*\
  !*** external "@better-hooks/lifecycle" ***!
  \******************************************/
/***/ ((module) => {

module.exports = require("@better-hooks/lifecycle");

/***/ }),

/***/ "@better-hooks/performance":
/*!********************************************!*\
  !*** external "@better-hooks/performance" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@better-hooks/performance");

/***/ }),

/***/ "@mui/base/ClassNameGenerator":
/*!***********************************************!*\
  !*** external "@mui/base/ClassNameGenerator" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = require("@mui/base/ClassNameGenerator");

/***/ }),

/***/ "@mui/base/utils":
/*!**********************************!*\
  !*** external "@mui/base/utils" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("@mui/base/utils");

/***/ }),

/***/ "@mui/system":
/*!******************************!*\
  !*** external "@mui/system" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("@mui/system");

/***/ }),

/***/ "@mui/system/RtlProvider":
/*!******************************************!*\
  !*** external "@mui/system/RtlProvider" ***!
  \******************************************/
/***/ ((module) => {

module.exports = require("@mui/system/RtlProvider");

/***/ }),

/***/ "@mui/system/colorManipulator":
/*!***********************************************!*\
  !*** external "@mui/system/colorManipulator" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = require("@mui/system/colorManipulator");

/***/ }),

/***/ "@mui/system/createStyled":
/*!*******************************************!*\
  !*** external "@mui/system/createStyled" ***!
  \*******************************************/
/***/ ((module) => {

module.exports = require("@mui/system/createStyled");

/***/ }),

/***/ "@mui/system/createTheme":
/*!******************************************!*\
  !*** external "@mui/system/createTheme" ***!
  \******************************************/
/***/ ((module) => {

module.exports = require("@mui/system/createTheme");

/***/ }),

/***/ "@mui/system/styleFunctionSx":
/*!**********************************************!*\
  !*** external "@mui/system/styleFunctionSx" ***!
  \**********************************************/
/***/ ((module) => {

module.exports = require("@mui/system/styleFunctionSx");

/***/ }),

/***/ "@mui/system/useThemeProps":
/*!********************************************!*\
  !*** external "@mui/system/useThemeProps" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@mui/system/useThemeProps");

/***/ }),

/***/ "@mui/utils":
/*!*****************************!*\
  !*** external "@mui/utils" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("@mui/utils");

/***/ }),

/***/ "@mui/utils/capitalize":
/*!****************************************!*\
  !*** external "@mui/utils/capitalize" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/capitalize");

/***/ }),

/***/ "@mui/utils/chainPropTypes":
/*!********************************************!*\
  !*** external "@mui/utils/chainPropTypes" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/chainPropTypes");

/***/ }),

/***/ "@mui/utils/composeClasses":
/*!********************************************!*\
  !*** external "@mui/utils/composeClasses" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/composeClasses");

/***/ }),

/***/ "@mui/utils/createChainedFunction":
/*!***************************************************!*\
  !*** external "@mui/utils/createChainedFunction" ***!
  \***************************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/createChainedFunction");

/***/ }),

/***/ "@mui/utils/debounce":
/*!**************************************!*\
  !*** external "@mui/utils/debounce" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/debounce");

/***/ }),

/***/ "@mui/utils/deepmerge":
/*!***************************************!*\
  !*** external "@mui/utils/deepmerge" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/deepmerge");

/***/ }),

/***/ "@mui/utils/deprecatedPropType":
/*!************************************************!*\
  !*** external "@mui/utils/deprecatedPropType" ***!
  \************************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/deprecatedPropType");

/***/ }),

/***/ "@mui/utils/elementTypeAcceptingRef":
/*!*****************************************************!*\
  !*** external "@mui/utils/elementTypeAcceptingRef" ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/elementTypeAcceptingRef");

/***/ }),

/***/ "@mui/utils/formatMuiErrorMessage":
/*!***************************************************!*\
  !*** external "@mui/utils/formatMuiErrorMessage" ***!
  \***************************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/formatMuiErrorMessage");

/***/ }),

/***/ "@mui/utils/generateUtilityClass":
/*!**************************************************!*\
  !*** external "@mui/utils/generateUtilityClass" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/generateUtilityClass");

/***/ }),

/***/ "@mui/utils/generateUtilityClasses":
/*!****************************************************!*\
  !*** external "@mui/utils/generateUtilityClasses" ***!
  \****************************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/generateUtilityClasses");

/***/ }),

/***/ "@mui/utils/integerPropType":
/*!*********************************************!*\
  !*** external "@mui/utils/integerPropType" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/integerPropType");

/***/ }),

/***/ "@mui/utils/isMuiElement":
/*!******************************************!*\
  !*** external "@mui/utils/isMuiElement" ***!
  \******************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/isMuiElement");

/***/ }),

/***/ "@mui/utils/ownerDocument":
/*!*******************************************!*\
  !*** external "@mui/utils/ownerDocument" ***!
  \*******************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/ownerDocument");

/***/ }),

/***/ "@mui/utils/ownerWindow":
/*!*****************************************!*\
  !*** external "@mui/utils/ownerWindow" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/ownerWindow");

/***/ }),

/***/ "@mui/utils/refType":
/*!*************************************!*\
  !*** external "@mui/utils/refType" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/refType");

/***/ }),

/***/ "@mui/utils/requirePropFactory":
/*!************************************************!*\
  !*** external "@mui/utils/requirePropFactory" ***!
  \************************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/requirePropFactory");

/***/ }),

/***/ "@mui/utils/resolveProps":
/*!******************************************!*\
  !*** external "@mui/utils/resolveProps" ***!
  \******************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/resolveProps");

/***/ }),

/***/ "@mui/utils/setRef":
/*!************************************!*\
  !*** external "@mui/utils/setRef" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/setRef");

/***/ }),

/***/ "@mui/utils/unsupportedProp":
/*!*********************************************!*\
  !*** external "@mui/utils/unsupportedProp" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/unsupportedProp");

/***/ }),

/***/ "@mui/utils/useControlled":
/*!*******************************************!*\
  !*** external "@mui/utils/useControlled" ***!
  \*******************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/useControlled");

/***/ }),

/***/ "@mui/utils/useEnhancedEffect":
/*!***********************************************!*\
  !*** external "@mui/utils/useEnhancedEffect" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/useEnhancedEffect");

/***/ }),

/***/ "@mui/utils/useEventCallback":
/*!**********************************************!*\
  !*** external "@mui/utils/useEventCallback" ***!
  \**********************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/useEventCallback");

/***/ }),

/***/ "@mui/utils/useForkRef":
/*!****************************************!*\
  !*** external "@mui/utils/useForkRef" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/useForkRef");

/***/ }),

/***/ "@mui/utils/useId":
/*!***********************************!*\
  !*** external "@mui/utils/useId" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("@mui/utils/useId");

/***/ }),

/***/ "@mui/utils/useIsFocusVisible":
/*!***********************************************!*\
  !*** external "@mui/utils/useIsFocusVisible" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/useIsFocusVisible");

/***/ }),

/***/ "@mui/utils/useTimeout":
/*!****************************************!*\
  !*** external "@mui/utils/useTimeout" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@mui/utils/useTimeout");

/***/ }),

/***/ "clsx":
/*!***********************!*\
  !*** external "clsx" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("clsx");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "msw":
/*!**********************!*\
  !*** external "msw" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("msw");

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next/head");

/***/ }),

/***/ "notistack":
/*!****************************!*\
  !*** external "notistack" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("notistack");

/***/ }),

/***/ "prop-types":
/*!*****************************!*\
  !*** external "prop-types" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("prop-types");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("react-dom");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("react-is");

/***/ }),

/***/ "react-transition-group":
/*!*****************************************!*\
  !*** external "react-transition-group" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = require("react-transition-group");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "react/jsx-runtime":
/*!************************************!*\
  !*** external "react/jsx-runtime" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("react/jsx-runtime");

/***/ }),

/***/ "msw/node":
/*!***************************!*\
  !*** external "msw/node" ***!
  \***************************/
/***/ ((module) => {

module.exports = import("msw/node");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@mui","vendor-chunks/@babel"], () => (__webpack_exec__("../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fform&preferredRegion=&absolutePagePath=.%2Fpages%2Fform%2Findex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();