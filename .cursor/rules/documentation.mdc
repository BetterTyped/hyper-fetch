---
description: Best practices for writing documentation approach
globs: **/*.mdx, **/*.md
alwaysApply: false
---

# Documentation Best Practices

## General Guidelines

- We're using docusaurus and its features to build our documentation
- Keep documentation clear, concise, and up-to-date
- Use consistent language and tone throughout
- Write for your audience (developers, end-users, etc.)
- Follow a logical structure with proper headings
- Use active voice and present tense
- Include examples for complex concepts
- Limit each document to a single topic or concern

## Inspirations

The documentation approach in this project is inspired by the best practices found in the React and Stripe
documentation. Both of these projects are renowned for their:

- **Clarity and Simplicity**: Information is presented in a clear, concise, and approachable manner, making it easy for
  developers of all experience levels to understand and use.
- **Logical Structure**: Content is organized with a strong hierarchy, intuitive navigation, and consistent formatting,
  helping users quickly find what they need.
- **Comprehensive Examples**: Both documentations provide real-world, copy-pastable code examples that are always
  up-to-date and verified against the latest version of the library.
- **Developer-Centric Focus**: The needs of developers are prioritized, with detailed guides, API references, and
  troubleshooting sections that address common use cases and pain points.
- **Visual Aids and Interactivity**: Use of diagrams, interactive elements, and visual cues to enhance understanding of
  complex concepts.

By drawing inspiration from React and Stripe, this project aims to deliver documentation that is not only technically
accurate but also highly usable, discoverable, and enjoyable for all users.

## Markdown Usage

- Use proper heading hierarchies (H1 > H2 > H3)
- Apply consistent formatting for code blocks with language specification
- Use lists for sequential or grouped information
- Utilize tables for structured data comparison
- Include properly sized and labeled images when helpful
- Use blockquotes for important notes or warnings
- Add horizontal rules to separate major sections
- Use admonitions for warnings, notes, tips, and important information
- Use the import directive syntax `(@import {packageName} {componentName} {content type})` to selectively include
  essential information from autogenerated documentation.

## Importer Usage Guide

The documentation system includes a powerful import directive that allows embedding auto-generated API documentation
into markdown files. This helps maintain consistency between code and documentation.

### Basic Syntax

```
(@import {packageName} {componentName} {contentType})
```

- **packageName**: Name of the package from `/packages` directory (e.g., `core`, `client`, `react`)
- **componentName**: Type of component to import (e.g., `class`, `function`, `interface`, `type`)
- **contentType**: What aspect of the component to import

### Finding Component Names

Component names for import directives can be found by browsing the `/documentation/docs/api` directory. Each file in
this directory represents a component from the codebase, and the filename corresponds to the component name that should
be used in the import directive. This makes it easy to discover available components for documentation imports.

### Available Content Types

| Content Type   | Description                          |
| -------------- | ------------------------------------ |
| definition     | Complete definition of the component |
| npm            | NPM installation information         |
| import         | Import statement for the component   |
| details        | Detailed component information       |
| description    | Component description from JSDoc     |
| generics       | Generic parameters information       |
| method         | Single method documentation          |
| methods        | All methods documentation            |
| name           | Component name only                  |
| parameters     | Function parameters                  |
| preview        | Brief component preview              |
| properties     | Object/interface properties          |
| returns        | Return value information             |
| returnsPreview | Brief return value preview           |
| signature      | Function/method signature            |
| sources        | Source code information              |
| type           | Type information                     |

### Usage

(@import core Client import) (@import core Client description)

### Best Practices

- Only import essential information to keep documentation concise
- Use preview content types for overview sections
- Use specific content types (parameters, returns, etc.) for detailed documentation
- Combine multiple imports to create comprehensive but organized documentation
- Always verify that imported content appears correctly in the rendered documentation

## Documentation Links

When creating links between documentation pages, follow these guidelines to ensure consistency and maintainability:

### Link Types

The documentation supports two primary ways to create links between pages:

1. **Markdown Links**

   ```md
   [Link Text](mdc:documentation/docs/path/to/file.md)
   ```

   - Always use relative paths from the root
   - All paths should start with `/documentation/docs/`
   - Use descriptive link text that indicates the target content

2. **LinkCard Component**

   ```jsx
   <LinkCard
     type="guides" // guides | docs | integrations | promo | api
     title="Guide Title"
     description="Brief description of the linked content"
     to="/documentation/docs/guides/specific-guide"
   />
   ```

   - Use for featured or important links that deserve visual emphasis
   - Provide a clear title and concise description
   - Follow the same path rules as markdown links

### Best Practices for Links

- Ensure all links lead to files within the `/documentation/docs` directory
- Verify links work correctly after documentation structure changes
- Use LinkCards for navigation between major sections or to highlight important content
- Use standard markdown links for inline references within text
- Keep link text descriptive and meaningful (avoid "click here" or "read more")
- Consider adding a brief context about what the reader will find in the linked document

### Link Path Requirements

- All link paths must follow this pattern: `/documentation/docs/[path]/[filename]`
- Never omit the file extension, as this can break documentation navigation and versioning
- This applies to both standard Markdown links and LinkCard component paths

## Documentation Types and Locations

- The project features three distinct types of documentation:

  1. **Core Documentation** (`/documentation/docs`)
     - Covers overall ideas behind modules
     - Provides limited but focused examples
     - Explains the purpose, important features, methods and functionalities
     - Contains links to other important documentation sections (guides, API references)
  2. **Guides** (`/documentation/docs/guides`)
     - Problem-focused with detailed explanations
     - Provides complete code examples with syntax highlighting
     - Includes step-by-step instructions for implementation
     - Addresses specific use cases and solutions
  3. **API References** (`/documentation/docs/api`)
     - Autogenerated documentation that cannot be directly edited
     - To enhance API docs, add JSDoc comments to the relevant code in package files
     - Document entities, modules, parameters, and other code elements at their source

- Essential information for the packages are: how to install, how to use, what it's doing and how is it helpful
- Each entity from the packages should have it's Purpose section

## API Documentation

- Document all public APIs with consistent formatting
- Include parameter descriptions, types, and default values
- Provide return value information
- Add examples showing typical usage
- Document possible errors and edge cases
- Use JSDoc or similar standards for code documentation
- Keep method documentation close to its implementation

## README Files

- Include a clear project description
- Document installation and setup instructions
- Provide getting started examples
- List prerequisites and dependencies
- Include troubleshooting sections for common issues
- Add references to additional documentation
- Maintain contributing guidelines and code of conduct

## Documentation Organization

- Create a logical hierarchy of documentation
- Implement proper navigation between related documents
- Include a search feature if documentation is extensive
- Create an index or table of contents for larger docs
- Group related documentation together
- Use consistent filenames and folder structure
- Link to related documentation when appropriate - they always start with "/docs" and should lead to the .md or .mdx
  file to keep the versioning abilities

## Interactive Documentation

- Implement collapsible sections for complex documentation
- Use tabs to organize related but separate content
- Add interactive diagrams to explain complex workflows - could be with mermaid or other
- Include working demos of components and features
- Enable dark/light mode toggle for documentation
- Consider implementing interactive tutorials for key features

## Accessibility

- Use descriptive link text (avoid "click here")
- Add alt text to all images
- Create scannable content with proper headings
- Write in plain language, avoiding jargon when possible
- Define acronyms and technical terms
- Ensure documentation is responsive for mobile devices

## Code Examples

- Provide complete, working code examples
- Avoid large code example blocks or mixing multiple examples in a single snippet
- Use syntax highlighting with proper language tags
- Make examples copy-pastable when possible
- Include comments to explain complex parts
- Show both basic and advanced use cases
- Update examples when the API changes
- Test all code examples to ensure they work
- Ensure examples are highly accessible by using appropriate syntax highlighting, clear formatting, code diffs and
  sufficient color contrast for improved readability

- **Keep examples brief and focused** - Each example should demonstrate a single concept or feature rather than trying
  to showcase multiple capabilities at once
- **Base examples on actual code** - All code examples must be based on the actual implementation in the `/packages`
  directory
- **Do not create hypothetical examples** - Don't create examples that haven't been verified against the actual codebase
- **Reference existing implementations** - If unsure how something works, examine the source code in the packages
  directory first
- **Request clarification when needed** - If you need more information about implementation details, ask for specific
  paths or reference code
- **Test all examples** - Verify that code examples actually work with the current library version before including them
- **Include imports** - Always show the necessary imports for the examples to work

### Code Example Accuracy Requirements

- **Never hallucinate code examples** - All examples must be based on real, working code from the `/packages` directory
- **Examine the source code first** - Before writing an example, thoroughly review the actual implementation in the
  codebase, search for the tests which can give you better idea on how something works
- **Reproduce real-world usage patterns** - Follow the patterns and conventions used in the actual codebase
- **Respect types and signatures** - Ensure all parameter types and return values match the actual implementation
- **When in doubt, ask** - If you're unsure how a feature works, ask for specific paths to reference code instead of
  guessing
- **Document limitations** - Be clear about any constraints or edge cases in the implementation
- **Indicate version compatibility** - Note which versions of the library the example works with

### Example Verification Process

1. Locate the relevant code in the `/packages` directory, each have `__tests__` directory with many examples of the code
2. Understand the implementation and API surface
3. Create a minimal working example that demonstrates the feature
4. Test the example to ensure it works as expected
5. Document any dependencies or prerequisites
6. Include complete import statements and configuration
7. Add explanatory comments for complex parts
8. Verify the example against the latest version of the library

### Code Highlighting in Examples

To emphasize specific lines or sections in code examples, use the following comment markers:

```js
// highlight-start
// ... code to highlight ...
// highlight-end

// highlight-next-line
const important = true;
```

- Place `// highlight-start` before the code you want to highlight and `// highlight-end` after.
- Use `// highlight-next-line` to highlight only the line immediately following the comment.
- This works for JavaScript, TypeScript, and other languages that support `//` comments. For other languages, use the
  appropriate comment syntax (e.g., `#` for Python).
- Use highlighting sparingly to draw attention to the most important parts of an example, such as key logic,
  configuration, or changes.
- Do not use highlighting for entire code blocks unless every line is essential.
- Always ensure highlighted code is accurate and up-to-date with the actual implementation.

### Red Highlighting for Errors

To visually indicate lines that will cause an error (red highlight), use the following comment:

```js
// error-next-line
throw new Error(1);
// Throws the Error(1)

// error-start
function error() {
  throw new Error(1);
}
// error-end
// Throws the Error(1)
```

- Place `// error-...` directly above the line that should be highlighted in red as an error.
- Use this only for lines that are expected to throw or demonstrate incorrect usage.
- This helps readers quickly identify problematic code in examples.
- Leave helpful comments with error details under it

### Showing Code Diffs in Examples

To illustrate code changes (diffs) in examples, use the following comment markers:

```js
// diff-add-next-line
const newValue = 2;

// diff-remove-next-line
const oldValue = 1;

// diff-add-start
const foo = 1;
const bar = 2;
// diff-add-end

// diff-remove-start
const oldFoo = 0;
const oldBar = 0;
// diff-remove-end
```

- Use `// diff-remove-...` to indicate a line that should be shown as removed in a diff.
- Use `// diff-add-...` to indicate a line that should be shown as added in a diff.
- Place the comments directly above the relevant lines.
- This helps readers quickly understand what has changed between code versions or in upgrade guides.
- Only use these markers when demonstrating code changes, migrations, or upgrade steps.

### Creating Live Code Examples

To provide interactive, live-editable code examples in the documentation, use the `live` option in your code block:

```tsx live
function Example() {
  return <div>Hello, world!</div>;
}
```

```ts live
console.log(123);
```

- Add `live` after the language identifier (e.g., `{lang} live`) to enable live editing and preview.
- Use this for React or TypeScript code that benefits from interactive demonstration.
- Keep live examples minimal and focused on a single concept.
- Ensure all live examples are functional and error-free.
- Only use live examples where interactivity adds value for the reader.
