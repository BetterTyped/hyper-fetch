name: Hyper Flow Release
on:
  push:
    tags:
      - "hyper-flow-v*"

jobs:
  publish_on_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build
        run: yarn build
      - name: Release
        run: yarn nx run hyper-flow:publish:app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGN_ID: ${{ secrets.SIGN_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_on_mac:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Import codesign certs
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Clean xcode
        run: |
          sudo rm -rf /Library/Developer/CommandLineTools
          xcode-select --install
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Install macos-alias with proper build environment
        run: |
          export CC=clang
          export CXX=clang++
          yarn add macos-alias -W -D
      - name: Build
        run: yarn build
      - name: Release
        run: yarn nx run hyper-flow:publish:app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGN_ID: ${{ secrets.SIGN_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_on_win:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build
        run: yarn build
      - name: Release
        run: yarn nx run hyper-flow:publish:app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGN_ID: ${{ secrets.SIGN_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
