name: Workflow
on:
  push:
    branches:
      - main

concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  prepare-environment:
    runs-on: ubuntu-latest
    name: Prepare environment
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: yarn.lock
        env:
          FORCE_COLOR: 0
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Cache node_modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: node_modules
          key: yarn-${{ hashFiles('yarn.lock') }}

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs: prepare-environment
    # Tests timeout after 40 minutes
    timeout-minutes: 40
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        test-group:
          [
            axios,
            firebase-admin,
            firebase,
            graphql,
            codegen-openapi,
            hyper-flow,
            plugin-devtools,
            plugin-eslint,
            core,
            react,
            sockets,
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: yarn-${{ hashFiles('yarn.lock') }}
          fail-on-cache-miss: false
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build
        run: yarn build
      - name: Test package
        run: yarn nx run ${{ matrix.test-group }}:"test:pipeline"
      # This will no longer work as we test one package at the time and we don't have coverage for all packages
      # - name: Send Report
      #   uses: paambaati/codeclimate-action@v3.0.0
      #   env:
      #     CC_TEST_REPORTER_ID: c206a2ed5aa86c7480a13634e91e440a27a98a5d134653f8ea9a7d5f987e68c3
      #   with:
      #     coverageLocations: |
      #       ${{github.workspace}}/packages/core/coverage/lcov.info:lcov
      #       ${{github.workspace}}/packages/react/coverage/lcov.info:lcov

  release:
    name: Release
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: yarn-${{ hashFiles('yarn.lock') }}
          fail-on-cache-miss: false
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build
        run: yarn build
      - name: Publish
        run: yarn release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
