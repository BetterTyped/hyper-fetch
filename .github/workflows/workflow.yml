name: Workflow

on: push

# concurrency:
#   group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
#   # Allow cancellation except on release branches (main, beta, alpha) where release job runs
#   cancel-in-progress:
#     ${{ !(github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/alpha') }}

jobs:
  prepare-environment:
    name: Prepare environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
        env:
          FORCE_COLOR: 0
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Install node_modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Cache node_modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            '**/node_modules'
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}

  build_on_linux:
    name: Build HyperFlow on Linux
    runs-on: ubuntu-latest
    needs: prepare-environment
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --ignore-optional
      - name: Cache node_modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            '**/node_modules'
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Build
        run: yarn build
      - name: App build
        run: yarn nx run hyper-flow:make:app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGN_ID: ${{ secrets.SIGN_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_on_mac:
    name: Build HyperFlow on Mac
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Import codesign certs
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Install macos-alias
        run: yarn add macos-alias@0.2.12 -W
      - name: Rebuild native modules
        run: |
          npm install -g node-gyp
          npm rebuild
          yarn install --force
      - name: Cache node_modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            '**/node_modules'
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Build
        run: yarn build
      - name: App build
        run: yarn nx run hyper-flow:make:app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGN_ID: ${{ secrets.SIGN_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_on_win:
    name: Build HyperFlow on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --network-timeout 1000000 --ignore-optional
      - name: Cache node_modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            '**/node_modules'
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Build
        run: yarn build
      - name: App build
        run: yarn nx run hyper-flow:make:app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGN_ID: ${{ secrets.SIGN_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs: [prepare-environment, build_on_linux, build_on_mac, build_on_win]
    # Tests timeout after 40 minutes
    timeout-minutes: 40
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --ignore-optional
      - name: Build
        run: yarn build
      - name: Lint
        run: yarn lint
      - name: Typecheck
        run: yarn typescheck
      - name: Test
        run: yarn test --coverage
      - name: Send Report
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: c206a2ed5aa86c7480a13634e91e440a27a98a5d134653f8ea9a7d5f987e68c3
        with:
          coverageLocations: |
            ${{github.workspace}}/packages/core/coverage/lcov.info:lcov
            ${{github.workspace}}/packages/react/coverage/lcov.info:lcov

  release:
    name: Release
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/alpha' }}
    runs-on: ubuntu-latest
    needs: [tests, build_on_linux, build_on_mac, build_on_win]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.3"
          cache: "yarn"
          cache-dependency-path: yarn.lock
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=version::$(yarn -v)"
      - name: Restore node_modules
        uses: actions/cache/restore@v3
        id: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.eslintcache
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ steps.yarn-cache-dir-path.outputs.version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install node_modules on cache miss
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build
        run: yarn build
      - name: Publish
        run: yarn release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
